{
  "Delaunay": {
    "cls": "Delaunay", 
    "description": "<h3>Generate a set of triangles from a set of points, so that none of the points will be inside the circumcenter of any triangle.</h3>", 
    "extend": "PointSet", 
    "file": "Delaunay.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a new Delaunay which extends <code>PointSet</code>. The generated results are stored in <code>this.mesh</code>.</h2>", 
        "eg": "<p><code>new Delaunay()</code> <code>new Delaunay(1,2,3)</code> <code>new Delaunay([2,4])</code> <code>new Delaunay({x:3, y:6, z:9}).to(1,2,3)</code> <code>new Delaunay(1,2,3).to([p1, p2, p3, p4, p5])</code></p>", 
        "name": "Delaunay", 
        "param": [
          "<p><code>args</code> Similar to Point constructor, use comma-separated values, an array, or an object as parameters to specify the anchor point. Use <code>to()</code> to add points to the set.</p>"
        ], 
        "pname": "", 
        "return": "<p>a new Delaunay object</p>"
      }, 
      {
        "description": "<h2>Calculate delaunay triangulation and store the results in <code>this.mesh</code> array</h2>", 
        "name": "generate", 
        "param": [], 
        "pname": "", 
        "return": "<p>an array of {i, j, k, triangle, circle} which records the indices of the vertices, and the calculated triangles and circumcircles</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "GridCascade": {
    "cls": "GridCascade", 
    "description": "<h3>(In progress) Like Grid, but expand the rows as needed to fit more items.</h3>", 
    "extend": "Grid", 
    "file": "GridCascade.coffee", 
    "funcs": [
      {
        "description": "<h2>Clear the layout and re-make the initial grid</h2><p>simplified because rows are auto-expanded in fit()</p>", 
        "name": "resetLayout", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Mark a certain area in the grid as occupied. This also checks for new rows, which is not checked in Grid</h2>", 
        "name": "occupy", 
        "param": [
          "<p><code>x</code> column index</p>", 
          "<p><code>y</code> row index</p>", 
          "<p><code>W</code> column width</p>", 
          "<p><code>h</code> row size</p>"
        ], 
        "pname": "x, y, w, h", 
        "return": "<p>this grid</p>"
      }, 
      {
        "description": "<h2>optimize the iteration by starting at a row that has free cells</h2>", 
        "name": "findStartRow", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>fit this area within the grid. This expands new rows to fit more items as needed.</h2>", 
        "name": "fit", 
        "param": [
          "<p><code>width</code> number of columns</p>", 
          "<p><code>height</code> number of rows</p>"
        ], 
        "pname": "cols, rows", 
        "return": "<p>an object with properties <code>row</code> and <code>column</code> to specify the top left position, <code>columnSize</code> and <code>rowSize</code> to specify the resulting size in grid units, and <code>bound</code> which is the actual area as a Rectangle object.</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "Noise": {
    "cls": "Noise", 
    "description": "<h3>Generate Perlin and Simplex2D noise.</h3>", 
    "extend": "Vector", 
    "file": "Noise.coffee", 
    "funcs": [
      {
        "description": "<h2>Generate a different noise by seeding</h2>", 
        "eg": "<p><code>noise.seed(0.1)</code>, <code>noise.seed(Math.random())</code></p>", 
        "name": "seed", 
        "param": [
          "<p><code>seed</code> a value between 0 to 1</p>"
        ], 
        "pname": "seed"
      }, 
      {
        "description": "<h2>Get a 2D perlin noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.</h2>", 
        "eg": "<p><code>noise.perlin2D()</code>, <code>noise.perlin2D(10.001, 0.1)</code></p>", 
        "name": "perlin2D", 
        "param": [
          "<p><code>x, y</code> optional x and y dimension, or leave empty to use this vector's x and y position</p>"
        ], 
        "pname": "xin=@x, yin=@y", 
        "return": "<p>a value between 0 to 1</p>"
      }, 
      {
        "description": "<h2>Get a 2D simplex noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.</h2>", 
        "eg": "<p><code>noise.simplex2D()</code>, <code>noise.simplex2D(10.001, 0.1)</code></p>", 
        "name": "simplex2D", 
        "param": [
          "<p><code>x, y</code> optional x and y dimension, or leave empty to use this vector's x and y position</p>"
        ], 
        "pname": "xin=@x, yin=@y", 
        "return": "<p>a value between -1 to 1</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "ParticleEmitter": {
    "cls": "ParticleEmitter", 
    "description": "<h3>(In progress)  A very basic particle emitter</h3>", 
    "extend": "Vector", 
    "file": "ParticleEmitter.coffee", 
    "funcs": [
      {
        "description": "<h2>Constructor</h2>", 
        "name": "ParticleEmitter", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Initiate with an instance of a <code>ParticleSystem</code></h2>", 
        "name": "init", 
        "param": [], 
        "pname": "system"
      }, 
      {
        "description": "<h2>Set frequency of emisson.</h2>", 
        "name": "frequency", 
        "param": [
          "<p><code>f</code> how many per second.</p>"
        ], 
        "pname": "f"
      }, 
      {
        "description": "<h2>emit a particle (abstract method)</h2>", 
        "name": "emit", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>animate function to be called by Space</h2>", 
        "name": "animate", 
        "param": [], 
        "pname": "time, frame, ctx"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "ParticleField": {
    "cls": "ParticleField", 
    "description": "<h3>(In progress) An area that influence force, velocity, etc of particles inside it</h3>", 
    "extend": "Rectangle", 
    "file": "ParticleField.coffee", 
    "funcs": [
      {
        "description": "<h2>check particles to work on</h2>", 
        "name": "check", 
        "param": [
          "<p>{particles} array of particles</p>", 
          "<p>{removal} if true and if particle within bound, then remove it from array</p>"
        ], 
        "pname": "particles, removal=false"
      }, 
      {
        "description": "<h2>apply the changes to a particle (abstract method), used in check()</h2>", 
        "name": "work", 
        "param": [
          "<p>{p} a particle</p>"
        ], 
        "pname": "p"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "QuadTree": {
    "cls": "QuadTree", 
    "description": "<h3>A basic quad tree implementation</h3>", 
    "extend": "Rectangle", 
    "file": "QuadTree.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a new QuadTree, which is a kind of Rectangle</h2>", 
        "name": "QuadTree", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Get a list of quads in which this point is contained</h2>", 
        "name": "getQuads", 
        "param": [
          "<p><code>p</code> is a Point</p>", 
          "<p><code>list</code> Optional existing list to append to</p>"
        ], 
        "pname": "p, list=[]"
      }, 
      {
        "description": "<h2>Get a list of items in this point's deepest quad</h2>", 
        "name": "getItems", 
        "param": [
          "<p><code>p</code>  a Point</p>"
        ], 
        "pname": "p"
      }, 
      {
        "description": "<h2>Add an item into this QuadTree. Split to sub quads if needed.</h2>", 
        "name": "addToQuad", 
        "param": [], 
        "pname": "item"
      }, 
      {
        "description": "<h2>Split this into 4 quads using Rectangle's <code>quadrant()</code></h2>", 
        "name": "splitQuad", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>reset this quad, removing items and sub-quads</h2>", 
        "name": "resetQuad", 
        "param": [], 
        "pname": ""
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "SamplePoints": {
    "cls": "SamplePoints", 
    "description": "<h3>Point sampling using Best Candidate and Poisson methods.</h3>", 
    "extend": "PointSet", 
    "file": "SamplePoints.coffee", 
    "funcs": [
      {
        "description": "<h2>Construct a point sampler</h2>", 
        "name": "SamplePoints", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Add a bound.</h2>", 
        "name": "setBounds", 
        "param": [
          "<p><code>b</code> the bounding box</p>", 
          "<p><code>anchor</code> a boolean value. If set to <code>true</code>, then current position is set to bound's position</p>"
        ], 
        "pname": "b, anchor=false", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Initiate a best candidate sampler</h2>", 
        "name": "bestCandidateSampler", 
        "param": [], 
        "pname": "", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Initiate a poisson sampler using Bridson's algorithm</h2><p>Based on http://bl.ocks.org/mbostock/19168c663618b7f07158</p>", 
        "name": "poissonSampler", 
        "param": [], 
        "pname": "radius", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Get a sample from poisson sampler or best-candidate sampler.</h2>", 
        "name": "sample", 
        "param": [
          "<p><code>numSamples</code> number of times to sample. Defaults to 10 times</p>", 
          "<p><code>type</code> sampling type, either \"poisson\" or \"bestcandidate\". Defaults to \"bestcandidate\".</p>"
        ], 
        "pname": "numSamples=10, type=false", 
        "return": "<p>a point, or false if no more sample can be found</p>"
      }
    ], 
    "props": [], 
    "statics": [
      {
        "description": "<h2>A static implementation of Mitchell's Best Neighor Algorithm to generate one sample. (Consider using <code>SamplePoints</code> object instead)</h2>", 
        "name": "bestCandidate", 
        "param": [
          "<p><code>bound</code> a Rectangle object to specify the bounding box</p>", 
          "<p><code>items</code> an array of existing items</p>", 
          "<p><code>samples</code> number of sampling. Default to 10.</p>"
        ], 
        "pname": "bound, items, samples=10", 
        "return": "<p>o Vector object which is best candidate</p>"
      }
    ]
  }, 
  "Shaping": {
    "cls": "Shaping", 
    "description": "<h3>Think of a shaping function as you turn the handle of your faucet. See: when you turn it to left the water gets colder, and hotter when you turn it to right. A shaping function is just that. It turns a value (say, angle of your faucet handle of 0-180 degrees) into another value (say, water temperature between 0-75). Shaping function has many uses, especially in shaping continuous values within a range such as easing in animation.</h3>", 
    "extend": "", 
    "file": "Shaping.coffee", 
    "funcs": [], 
    "props": [], 
    "statics": [
      {
        "demo": "shaping.linear", 
        "description": "<h2>Linear mapping</h2>", 
        "name": "linear", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Quadratic in, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "quadraticIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Quadratic out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "quadraticOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Quadratic in-out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "quadraticInOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Cubic in, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "cubicIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Cubic out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "cubicOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Cubic in-out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "cubicInOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Exponential ease In, adapted from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_poly/\">polynomial shapers</a></h2>", 
        "name": "exponentialIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> a value between 0 to 1 to control the curve. Default is 0.25.</p>"
        ], 
        "pname": "t, c=1, p=0.25"
      }, 
      {
        "description": "<h2>Exponential ease out, adapted from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_poly/\">polynomial shapers</a></h2>", 
        "name": "exponentialOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> a value between 0 to 1 to control the curve. Default is 0.25.</p>"
        ], 
        "pname": "t, c=1, p=0.25"
      }, 
      {
        "description": "<h2>Sinuous in, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "sineIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Sinuous out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "sineOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Sinuous in-out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "sineInOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>A faster way to approximate cosine ease in-out using Blinn-Wyvill Approximation. Adapated from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_poly/\">polynomial shaping</a></h2>", 
        "name": "cosineApprox", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Circular in, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "circularIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Circular out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "circularOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Circular in-out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "circularInOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Elastic in, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "elasticIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> elastic parmeter between 0 to 1. The lower the number, the more elastic it will be. Default is 0.7.</p>"
        ], 
        "pname": "t, c=1, p=0.7"
      }, 
      {
        "description": "<h2>Elastic out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "elasticOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> elastic parmeter between 0 to 1. The lower the number, the more elastic it will be. Default is 0.7.</p>"
        ], 
        "pname": "t, c=1, p=0.7"
      }, 
      {
        "description": "<h2>Elastic in-out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "elasticInOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> elastic parmeter between 0 to 1. The lower the number, the more elastic it will be. Default is 0.6.</p>"
        ], 
        "pname": "t, c=1, p=0.6"
      }, 
      {
        "description": "<h2>Bounce in, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "bounceIn", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Bounce out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "bounceOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Bounce in-out, adapted from Robert Penner's <a href=\"http://robertpenner.com/easing/\">easing functions</a></h2>", 
        "name": "bounceInOut", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>"
        ], 
        "pname": "t, c=1"
      }, 
      {
        "description": "<h2>Sigmoid curve changes its shape adapted from the input value, but always returns a value between 0 to 1.</h2>", 
        "name": "sigmoid", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> the larger the value, the \"steeper\" the curve will be. Default is 10.</p>"
        ], 
        "pname": "t, c=1, p=10"
      }, 
      {
        "description": "<h2>The Logistic Sigmoid is a useful curve. Adapted from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_exp/\">shaping function</a></h2>", 
        "name": "logSigmoid", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> a parameter between 0 to 1 to control the steepness of the curve. Higher is steeper. Default is 0.7.</p>"
        ], 
        "pname": "t, c=1, p=0.7"
      }, 
      {
        "description": "<h2>An exponential seat curve. Adapted from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_exp/\">shaping functions</a></h2>", 
        "name": "seat", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> a parameter between 0 to 1 to control the steepness of the curve. Higher is steeper. Default is 0.5.</p>"
        ], 
        "pname": "t, c=1, p=0.5"
      }, 
      {
        "description": "<h2>Quadratic bezier curve. Adapted from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_exp/\">shaping functions</a></h2>", 
        "name": "quadraticBezier", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p1</code> a Point object specifying the first control point, or a value specifying the control point's x position (its y position will default to 0.5). Default is <code>Point(0.95, 0.95)</code></p>"
        ], 
        "pname": "t, c=1, p=new Point(0.05, 0.95)"
      }, 
      {
        "description": "<h2>Cubic bezier curve. This reuses the bezier functions in Curve class.</h2>", 
        "name": "cubicBezier", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p1</code> a Point object specifying the first control point. Default is <code>Point(0.1, 0.7)</code>.</p>", 
          "<p><code>p2</code> a Point object specifying the second control point. Default is <code>Point(0.9, 0.2)</code>.</p>"
        ], 
        "pname": "t, c=1, p1=new Point(0.1, 0.7), p2=new Point(0.9, 0.2)"
      }, 
      {
        "description": "<h2>Give a point, draw a quadratic curve that will pass through that point as closely as possible. Adapted from Golan Levin's <a href=\"http://www.flong.com/texts/code/shapers_poly/\">shaping functions</a></h2>", 
        "name": "quadraticTarget", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p1</code> a Point object specifying the point to pass through. Default is <code>Point(0.2, 0.35)</code></p>"
        ], 
        "pname": "t, c=1, p1= new Point(0.2, 0.35)"
      }, 
      {
        "description": "<h2>Step function is a simple jump from 0 to 1 at a specific point in time</h2>", 
        "name": "cliff", 
        "param": [
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p</code> usually a value between 0 to 1, which specify the point to \"jump\". Default is 0.5 which is in the middle.</p>"
        ], 
        "pname": "t, c=1, p=0.5"
      }, 
      {
        "description": "<h2>Convert any shaping functions into a series of steps</h2>", 
        "name": "step", 
        "param": [
          "<p><code>fn</code> the original shaping function</p>", 
          "<p><code>steps</code> the number of steps</p>", 
          "<p><code>t</code> a value between 0 to 1</p>", 
          "<p><code>c</code> the value to shape, default is 1</p>", 
          "<p><code>p1</code> optional first paramter to pass to original function</p>", 
          "<p><code>p2</code> optional second paramter to pass to original function</p>"
        ], 
        "pname": "fn, steps, t, c, p1, p2"
      }
    ]
  }, 
  "StripeBound": {
    "cls": "StripeBound", 
    "description": "<h3>A Bound subdivided in horizontal and vertical stripes</h3>", 
    "extend": "Rectangle", 
    "file": "StripeBound.coffee", 
    "funcs": [
      {
        "description": "<h2>Determines the number of stripes by frequency, and change method to frequency</h2>", 
        "name": "setFrequency", 
        "param": [], 
        "pname": "x, y"
      }, 
      {
        "description": "<h2>Set number of strips by number, and change method to stripes</h2>", 
        "name": "setStripes", 
        "param": [], 
        "pname": "x, y"
      }, 
      {
        "description": "<h2>get stripes as boxes</h2>", 
        "name": "getStripes", 
        "param": [], 
        "pname": "", 
        "return": "<p>boxes of <code>{columns:[Pairs], rows:[Pairs]}</code></p>"
      }, 
      {
        "description": "<h2>get stripes as lines</h2>", 
        "name": "getStripeLines", 
        "param": [], 
        "pname": "", 
        "return": "<p>lines of <code>{columns:[Pairs], rows:[Pairs]}</code></p>"
      }, 
      {
        "description": "<h2>create a masking area for canvas clipping. Defaults to position in the center of the bound, unless anchor paramater is set</h2>", 
        "name": "setMask", 
        "param": [
          "<p><code>w, h</code> mask width and height</p>", 
          "<p><code>anchor</code> optional anchor point, or leave unset to default anchor position which is center of the bound.</p>"
        ], 
        "pname": "w, h, anchor=false"
      }, 
      {
        "description": "<h2>anchor mask to bound's origin position</h2>", 
        "name": "anchorMask", 
        "param": [], 
        "pname": ""
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "UI": {
    "cls": "UI", 
    "description": "<h3>(In progress) A simple handle that can be dragged by mouse</h3>", 
    "extend": "Rectangle", 
    "file": "UI.coffee", 
    "funcs": [], 
    "props": [], 
    "statics": []
  }
}