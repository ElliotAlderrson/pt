{
  "Delaunay": {
    "cls": "Delaunay", 
    "description": "<h3>Generate a set of triangles from a set of points, so that none of the points will be inside the circumcenter of any triangle.</h3>", 
    "extend": "PointSet", 
    "file": "Delaunay.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a new Delaunay which extends <code>PointSet</code>. The generated results are stored in <code>this.mesh</code>.</h2>", 
        "eg": "<p><code>new Delaunay()</code> <code>new Delaunay(1,2,3)</code> <code>new Delaunay([2,4])</code> <code>new Delaunay({x:3, y:6, z:9}).to(1,2,3)</code> <code>new Delaunay(1,2,3).to([p1, p2, p3, p4, p5])</code></p>", 
        "name": "Delaunay", 
        "param": [
          "<p><code>args</code> Similar to Point constructor, use comma-separated values, an array, or an object as parameters to specify the anchor point. Use <code>to()</code> to add points to the set.</p>"
        ], 
        "pname": "", 
        "return": "<p>a new Delaunay object</p>"
      }, 
      {
        "description": "<h2>Calculate delaunay triangulation and store the results in <code>this.mesh</code> array</h2>", 
        "name": "generate", 
        "param": [], 
        "pname": "", 
        "return": "<p>an array of {i, j, k, triangle, circle} which records the indices of the vertices, and the calculated triangles and circumcircles</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "Easing": {
    "cls": "Easing", 
    "description": "<h3>Simple easing functions based on Robert Penner's functions.</h3>", 
    "extend": "", 
    "file": "Easing.coffee", 
    "funcs": [], 
    "props": [], 
    "statics": [
      {
        "description": "<h2>Linear interpolation</h2>", 
        "name": "linear", 
        "param": [
          "<p><code>t</code> current time or iteration</p>", 
          "<p><code>b</code> start value</p>", 
          "<p><code>c</code> change in value</p>", 
          "<p><code>d</code> duration time or total iteration</p>"
        ], 
        "pname": "t, b, c, d", 
        "return": "<p>interpolated value</p>"
      }
    ]
  }, 
  "GridCascade": {
    "cls": "GridCascade", 
    "description": "<h3>(In progress) Like Grid, but expand the rows as needed to fit more items.</h3>", 
    "extend": "Grid", 
    "file": "GridCascade.coffee", 
    "funcs": [
      {
        "description": "<h2>Clear the layout and re-make the initial grid</h2><p>simplified because rows are auto-expanded in fit()</p>", 
        "name": "resetLayout", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Mark a certain area in the grid as occupied. This also checks for new rows, which is not checked in Grid</h2>", 
        "name": "occupy", 
        "param": [
          "<p><code>x</code> column index</p>", 
          "<p><code>y</code> row index</p>", 
          "<p><code>W</code> column width</p>", 
          "<p><code>h</code> row size</p>"
        ], 
        "pname": "x, y, w, h", 
        "return": "<p>this grid</p>"
      }, 
      {
        "description": "<h2>optimize the iteration by starting at a row that has free cells</h2>", 
        "name": "findStartRow", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>fit this area within the grid. This expands new rows to fit more items as needed.</h2>", 
        "name": "fit", 
        "param": [
          "<p><code>width</code> number of columns</p>", 
          "<p><code>height</code> number of rows</p>"
        ], 
        "pname": "cols, rows", 
        "return": "<p>an object with properties <code>row</code> and <code>column</code> to specify the top left position, <code>columnSize</code> and <code>rowSize</code> to specify the resulting size in grid units, and <code>bound</code> which is the actual area as a Rectangle object.</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "Noise": {
    "cls": "Noise", 
    "description": "<h3>Generate Perlin and Simplex2D noise.</h3>", 
    "extend": "Vector", 
    "file": "Noise.coffee", 
    "funcs": [
      {
        "description": "<h2>Generate a different noise by seeding</h2>", 
        "eg": "<p><code>noise.seed(0.1)</code>, <code>noise.seed(Math.random())</code></p>", 
        "name": "seed", 
        "param": [
          "<p><code>seed</code> a value between 0 to 1</p>"
        ], 
        "pname": "seed"
      }, 
      {
        "description": "<h2>Get a 2d perlin noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.</h2>", 
        "eg": "<p><code>noise.perlin2d()</code>, <code>noise.perlin2d(10.001, 0.1)</code></p>", 
        "name": "perlin2d", 
        "param": [
          "<p><code>x, y</code> optional x and y dimension, or leave empty to use this vector's x and y position</p>"
        ], 
        "pname": "xin=@x, yin=@y", 
        "return": "<p>a value between 0 to 1</p>"
      }, 
      {
        "description": "<h2>Get a 2d simplex noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.</h2>", 
        "eg": "<p><code>noise.simplex2d()</code>, <code>noise.simplex2d(10.001, 0.1)</code></p>", 
        "name": "simplex2d", 
        "param": [
          "<p><code>x, y</code> optional x and y dimension, or leave empty to use this vector's x and y position</p>"
        ], 
        "pname": "xin=@x, yin=@y", 
        "return": "<p>a value between -1 to 1</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "ParticleEmitter": {
    "cls": "ParticleEmitter", 
    "description": "<h3>(In progress)  A very basic particle emitter</h3>", 
    "extend": "Vector", 
    "file": "ParticleEmitter.coffee", 
    "funcs": [
      {
        "description": "<h2>Constructor</h2>", 
        "name": "ParticleEmitter", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Initiate with an instance of a <code>ParticleSystem</code></h2>", 
        "name": "init", 
        "param": [], 
        "pname": "system"
      }, 
      {
        "description": "<h2>Set frequency of emisson.</h2>", 
        "name": "frequency", 
        "param": [
          "<p><code>f</code> how many per second.</p>"
        ], 
        "pname": "f"
      }, 
      {
        "description": "<h2>emit a particle (abstract method)</h2>", 
        "name": "emit", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>animate function to be called by Space</h2>", 
        "name": "animate", 
        "param": [], 
        "pname": "time, frame, ctx"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "ParticleField": {
    "cls": "ParticleField", 
    "description": "<h3>(In progress) An area that influence force, velocity, etc of particles inside it</h3>", 
    "extend": "Rectangle", 
    "file": "ParticleField.coffee", 
    "funcs": [
      {
        "description": "<h2>check particles to work on</h2>", 
        "name": "check", 
        "param": [
          "<p>{particles} array of particles</p>", 
          "<p>{removal} if true and if particle within bound, then remove it from array</p>"
        ], 
        "pname": "particles, removal=false"
      }, 
      {
        "description": "<h2>apply the changes to a particle (abstract method), used in check()</h2>", 
        "name": "work", 
        "param": [
          "<p>{p} a particle</p>"
        ], 
        "pname": "p"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "QuadTree": {
    "cls": "QuadTree", 
    "description": "<h3>A basic quad tree implementation</h3>", 
    "extend": "Rectangle", 
    "file": "QuadTree.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a new QuadTree, which is a kind of Rectangle</h2>", 
        "name": "QuadTree", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Get a list of quads in which this point is contained</h2>", 
        "name": "getQuads", 
        "param": [
          "<p><code>p</code> is a Point</p>", 
          "<p><code>list</code> Optional existing list to append to</p>"
        ], 
        "pname": "p, list=[]"
      }, 
      {
        "description": "<h2>Get a list of items in this point's deepest quad</h2>", 
        "name": "getItems", 
        "param": [
          "<p><code>p</code>  a Point</p>"
        ], 
        "pname": "p"
      }, 
      {
        "description": "<h2>Add an item into this QuadTree. Split to sub quads if needed.</h2>", 
        "name": "addToQuad", 
        "param": [], 
        "pname": "item"
      }, 
      {
        "description": "<h2>Split this into 4 quads using Rectangle's <code>quadrant()</code></h2>", 
        "name": "splitQuad", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>reset this quad, removing items and sub-quads</h2>", 
        "name": "resetQuad", 
        "param": [], 
        "pname": ""
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "SVGForm": {
    "cls": "SVGForm", 
    "description": "", 
    "extend": "", 
    "file": "SVGForm.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a new Form which is based on SVG</h2>", 
        "name": "SVGForm", 
        "param": [
          "<p><code>space</code> A space that has a valid context for this form. In this case, the space should represent an <svg>.</p>"
        ], 
        "pname": "space", 
        "return": "<p>a new Form object</p>"
      }, 
      {
        "description": "<h2>Set current fill style</h2>", 
        "eg": "<p><code>form.fill(\"#F90\")</code> <code>form.fill(\"rgba(0,0,0,.5\")</code> <code>form.fill(false)</code></p>", 
        "name": "fill", 
        "param": [
          "<p><code>c</code> fill color. Default is <code>false</code> (transparent)</p>"
        ], 
        "pname": "c", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Set current stroke style</h2>", 
        "eg": "<p><code>form.stroke(\"#F90\")</code> <code>form.stroke(\"rgba(0,0,0,.5\")</code> <code>form.stroke(false)</code> <code>form.stroke(\"#000\", 0.5, 'round')</code></p>", 
        "name": "stroke", 
        "param": [
          "<p><code>c</code> stroke color. Default is false (transparent)</p>", 
          "<p><code>width</code> Optional value (can be floating point) to set line width</p>", 
          "<p><code>joint</code> Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".</p>"
        ], 
        "pname": "c, width, joint, cap", 
        "return": "<p>this Form</p>"
      }, 
      {
        "demo": "svgform.scope", 
        "description": "<h2>Set this form's group scope by an ID, and optionally define the group's parent element. A group scope keeps track of DOM elements by their generated IDs, and updates their properties as needed. See also <code>enterScope()</code>.</h2>", 
        "eg": "<p><code>form.scope(\"dot\")</code> <code>form.scope(\"dot\", elem)</code></p>", 
        "name": "scope", 
        "param": [
          "<p><code>group_id</code> a string to use as prefix for the group's id. For example, group_id \"hello\" will create elements with id like \"hello-1\", \"hello-2\", etc</p>", 
          "<p><code>group</code> optional dom element to define this group's parent element</p>"
        ], 
        "pname": "group_id, group=false", 
        "return": "<p>context object</p>"
      }, 
      {
        "description": "<h2>Set the current group scope to an item added into space, in order to keep track of any point, circle, etc created within it. The item must have an <code>animateID</code> property, so that elements created within the item will have generated IDs like \"item-{animateID}-{count}\".</h2>", 
        "name": "enterScope", 
        "param": [
          "<p><code>item</code> an item that's added to space (see <code>space.add(...)</code>) and has an <code>animateID</code> property</p>"
        ], 
        "pname": "item", 
        "return": "<p>context object</p>"
      }, 
      {
        "description": "<h2><code>getScope(...)</code> function is deprecated as of 0.2.0. Use <code>enterScope()</code> instead.</h2>", 
        "name": "getScope", 
        "param": [], 
        "pname": "item"
      }, 
      {
        "description": "<h2>Get next available id in the current group</h2>", 
        "name": "nextID", 
        "param": [], 
        "pname": "", 
        "return": "<p>an id string</p>"
      }, 
      {
        "description": "<h2>Draw a point</h2>", 
        "name": "point", 
        "param": [
          "<p><code>p</code> a Point object</p>", 
          "<p><code>halfsize</code> radius or half size of the point. Default is 2.</p>", 
          "<p><code>isCircle</code> a boolean value to specify if the point should be drawn as a circle. Default is false.</p>"
        ], 
        "pname": "p, halfsize=2, isCircle=false", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a series of points</h2>", 
        "name": "points", 
        "param": [
          "<p><code>ps</code> an array of Points</p>", 
          "<p><code>halfsize</code> radius or half size of the point. Default is 2.</p>", 
          "<p><code>isCircle</code> a boolean value to specify if the point should be drawn as a circle. Default is false.</p>"
        ], 
        "pname": "ps, halfsize=2, isCircle=false", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a line</h2>", 
        "name": "line", 
        "param": [
          "<p><code>p</code> a Pair object</p>"
        ], 
        "pname": "p", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a series of lines</h2>", 
        "name": "lines", 
        "param": [
          "<p><code>ps</code> an array of Lines</p>"
        ], 
        "pname": "ps", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a rectangle</h2>", 
        "name": "rect", 
        "param": [
          "<p><code>p</code> a Pair object</p>"
        ], 
        "pname": "p, checkBounds=true", 
        "return": "<p>this Form</p>"
      }, 
      {
        "demo": "svgform.circle", 
        "description": "<h2>Draw a circle</h2>", 
        "name": "circle", 
        "param": [
          "<p><code>c</code> a Circle object</p>"
        ], 
        "pname": "c", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a polygon</h2>", 
        "name": "polygon", 
        "param": [
          "<p><code>ps</code> an array of Points</p>", 
          "<p><code>closePath</code> a boolean value to specify if the path should be closed (joining last point with first point)</p>"
        ], 
        "pname": "ps, closePath", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a triangle</h2>", 
        "name": "triangle", 
        "param": [
          "<p><code>tri</code> a Triangle object</p>"
        ], 
        "pname": "tri", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a curve</h2>", 
        "name": "curve", 
        "param": [
          "<p><code>ps</code> an array of Points</p>"
        ], 
        "pname": "ps, closePath=false", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw text</h2>", 
        "name": "text", 
        "param": [
          "<p><code>p</code> a Point to specify anchor position</p>", 
          "<p><code>txt</code> a string of text</p>", 
          "<p><code>maxWidth</code> not applicable in svg</p>", 
          "<p><code>xoff, yoff</code> x and y positional offset values</p>"
        ], 
        "pname": "p, txt, maxWidth=1000, xoff, yoff"
      }, 
      {
        "description": "<h2>Set font size and font face</h2>", 
        "eg": "<p><code>form.font(24)</code> <code>form.font(12, \"Georgia\")</code></p>", 
        "name": "font", 
        "param": [
          "<p><code>size</code> an integer value to specify font size in pixels</p>", 
          "<p><code>face</code> optional name to change the font face, such as \"sans-serif\" or \"Helvetica\"</p>"
        ], 
        "pname": "size, face=false", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Draw a shape. Defaults to <code>sketch()</code>. Override this function to draw differently.</h2>", 
        "name": "draw", 
        "param": [], 
        "pname": "shape", 
        "return": "<p>this Form</p>"
      }, 
      {
        "description": "<h2>Default draw based on the types of shape (Point, Line, Circle, etc)</h2>", 
        "name": "sketch", 
        "param": [
          "<p><code>shape</code> any shape such as <code>Point</code> or <code>Line</code>, or an array of Points</p>"
        ], 
        "pname": "shape", 
        "return": "<p>this Form</p>"
      }
    ], 
    "props": [
      {
        "description": "<h2>a property to reference the space's rendering context</h2>", 
        "name": "cc", 
        "param": []
      }, 
      {
        "description": "<h2>a property to specify the current font size</h2>", 
        "name": "cc.fontSize", 
        "param": []
      }, 
      {
        "description": "<h2>a property to specify the current font face</h2>", 
        "name": "cc.fontFace", 
        "param": []
      }
    ], 
    "statics": [
      {
        "description": "<h2>A static function to context</h2>", 
        "name": "id", 
        "param": [], 
        "pname": "ctx"
      }, 
      {
        "description": "<h2>A static function to help adding style object to an element. This put all styles into <code>style</code> attribute instead of individual attributes, so that the styles can be parsed by Adobe Illustrator.</h2>", 
        "eg": "<p><code>SVGForm.style(elem, {fill: \"#f90\", stroke: false})</code></p>", 
        "name": "style", 
        "param": [
          "<p><code>elem</code> a dom element to add to</p>", 
          "<p><code>styles</code> an object of style properties</p>"
        ], 
        "pname": "elem, styles"
      }, 
      {
        "description": "<h2>A static function to draw a point</h2>", 
        "name": "point", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pt</code> a Point object</p>", 
          "<p><code>halfsize</code> radius or half size of the point. Default is 2.</p>", 
          "<p><code>fill</code> not used - already defined in ctx</p>", 
          "<p><code>stroke</code> not used - already defined in ctx</p>", 
          "<p><code>circle</code> a boolean value to specify if the points should be drawn as a circle. Default to false.</p>"
        ], 
        "pname": "ctx, pt, halfsize=2, fill=true, stroke=true, circle=false"
      }, 
      {
        "description": "<h2>A static function similar to <code>SVGForm.point()</code> but draw a series of points</h2>", 
        "name": "points", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pts</code> an array of Points</p>", 
          "<p><code>halfsize, fill, stroke, circle</code> same parameters as in <code>SVGForm.point()</code></p>"
        ], 
        "pname": "ctx, pts, halfsize=2, fill=true, stroke=true, circle=false"
      }, 
      {
        "description": "<h2>A static function to draw a line</h2>", 
        "name": "line", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pair</code> a Pair object</p>"
        ], 
        "pname": "ctx, pair"
      }, 
      {
        "description": "<h2>A static function to draw a line</h2>", 
        "name": "lines", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pairs</code> an array of Pair objects</p>"
        ], 
        "pname": "ctx, pairs"
      }, 
      {
        "description": "<h2>A static function to draw a rectangle</h2>", 
        "name": "rect", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pair</code> a Pair object</p>", 
          "<p><code>fill</code> not used - already defined in ctx</p>", 
          "<p><code>stroke</code> not used - already defined in ctx</p>"
        ], 
        "pname": "ctx, pair, fill=true, stroke=true"
      }, 
      {
        "description": "<h2>A static  function to draw a circle</h2>", 
        "name": "circle", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>c</code> a Circle object</p>", 
          "<p><code>fill</code> not used - already defined in ctx</p>", 
          "<p><code>stroke</code> not used - already defined in ctx</p>"
        ], 
        "pname": "ctx, c, fill=true, stroke=false"
      }, 
      {
        "description": "<h2>A static function to draw a polygon</h2>", 
        "name": "polygon", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pts</code> an array of Points</p>", 
          "<p><code>closePath</code> a boolean value to specify if the path should be closed (joining last point with first point)</p>", 
          "<p><code>fill</code> not used - already defined in ctx</p>", 
          "<p><code>stroke</code> not used - already defined in ctx</p>"
        ], 
        "pname": "ctx, pts, closePath=true, fill=true, stroke=true"
      }, 
      {
        "description": "<h2>A static function to draw a triangle</h2>", 
        "name": "triangle", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>tri</code> a Triangle object</p>", 
          "<p><code>fill</code> not used - already defined in ctx</p>", 
          "<p><code>stroke</code> not used - already defined in ctx</p>"
        ], 
        "pname": "ctx, tri, fill=true, stroke=false"
      }, 
      {
        "description": "<h2>A static function to draw a curve as straight polygon segments. In future, this should be converted to bezier curves.</h2>", 
        "name": "curve", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pts</code> an array of Points</p>"
        ], 
        "pname": "ctx, pts, closePath=false"
      }, 
      {
        "description": "<h2>A static function to draw text</h2>", 
        "name": "text", 
        "param": [
          "<p><code>ctx</code> rendering context object</p>", 
          "<p><code>pt</code> a Point object to specify the anchor point</p>", 
          "<p><code>txt</code> a string of text to draw</p>", 
          "<p><code>maxWidth</code> not applicable in svg</p>", 
          "<p><code>dx</code> optional shift in x position</p>", 
          "<p><code>dy</code> optional shift in y position</p>"
        ], 
        "pname": "ctx, pt, txt, maxWidth=0, dx=0, dy=0"
      }
    ]
  }, 
  "SVGSpace": {
    "cls": "SVGSpace", 
    "description": "<h3>SVGSpace is an extension of <code>DOMSpace</code> that represents an svg element in DOM.</h3>", 
    "extend": "DOMSpace", 
    "file": "SVGSpace.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a DOMSpace which represents a HTML DOM</h2>", 
        "name": "SVGSpace", 
        "param": [
          "<p><code>id</code> an id property which refers to the \"id\" attribute of the element in DOM.</p>", 
          "<p><code>callback</code> an optional callback function with parameters <code>function (boundingBox, spaceElement)</code> which will get called when svg is appended and ready. A \"ready\" event will also be fired from the space's element when it's appended, which you may track with <code>instance.space.addEventListener(\"ready\")</code></p>"
        ], 
        "pname": "id, callback"
      }, 
      {
        "demo": "svgspace.remove", 
        "description": "<h2>Remove an item from this Space</h2>", 
        "name": "remove", 
        "param": [
          "<p>an object with an auto-assigned <code>animateID</code> property</p>"
        ], 
        "pname": "item", 
        "return": "<p>this space</p>"
      }, 
      {
        "description": "<h2>Remove all items from this Space</h2>", 
        "name": "removeAll", 
        "param": [], 
        "pname": "", 
        "return": "<p>this space</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "SamplePoints": {
    "cls": "SamplePoints", 
    "description": "<h3>Point sampling using Best Candidate and Poisson methods.</h3>", 
    "extend": "PointSet", 
    "file": "SamplePoints.coffee", 
    "funcs": [
      {
        "description": "<h2>Construct a point sampler</h2>", 
        "name": "SamplePoints", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Add a bound.</h2>", 
        "name": "setBounds", 
        "param": [
          "<p><code>b</code> the bounding box</p>", 
          "<p><code>anchor</code> a boolean value. If set to <code>true</code>, then current position is set to bound's position</p>"
        ], 
        "pname": "b, anchor=false", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Initiate a best candidate sampler</h2>", 
        "name": "bestCandidateSampler", 
        "param": [], 
        "pname": "", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Initiate a poisson sampler using Bridson's algorithm</h2><p>Based on http://bl.ocks.org/mbostock/19168c663618b7f07158</p>", 
        "name": "poissonSampler", 
        "param": [], 
        "pname": "radius", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Get a sample from poisson sampler or best-candidate sampler.</h2>", 
        "name": "sample", 
        "param": [
          "<p><code>numSamples</code> number of times to sample. Defaults to 10 times</p>", 
          "<p><code>type</code> sampling type, either \"poisson\" or \"bestcandidate\". Defaults to \"bestcandidate\".</p>"
        ], 
        "pname": "numSamples=10, type=false", 
        "return": "<p>a point, or false if no more sample can be found</p>"
      }
    ], 
    "props": [], 
    "statics": [
      {
        "description": "<h2>A static implementation of Mitchell's Best Neighor Algorithm to generate one sample. (Consider using <code>SamplePoints</code> object instead)</h2>", 
        "name": "bestCandidate", 
        "param": [
          "<p><code>bound</code> a Rectangle object to specify the bounding box</p>", 
          "<p><code>items</code> an array of existing items</p>", 
          "<p><code>samples</code> number of sampling. Default to 10.</p>"
        ], 
        "pname": "bound, items, samples=10", 
        "return": "<p>o Vector object which is best candidate</p>"
      }
    ]
  }, 
  "StripeBound": {
    "cls": "StripeBound", 
    "description": "<h3>A Bound subdivided in horizontal and vertical stripes</h3>", 
    "extend": "Rectangle", 
    "file": "StripeBound.coffee", 
    "funcs": [
      {
        "description": "<h2>Determines the number of stripes by frequency, and change method to frequency</h2>", 
        "name": "setFrequency", 
        "param": [], 
        "pname": "x, y"
      }, 
      {
        "description": "<h2>Set number of strips by number, and change method to stripes</h2>", 
        "name": "setStripes", 
        "param": [], 
        "pname": "x, y"
      }, 
      {
        "description": "<h2>get stripes as boxes</h2>", 
        "name": "getStripes", 
        "param": [], 
        "pname": "", 
        "return": "<p>boxes of <code>{columns:[Pairs], rows:[Pairs]}</code></p>"
      }, 
      {
        "description": "<h2>get stripes as lines</h2>", 
        "name": "getStripeLines", 
        "param": [], 
        "pname": "", 
        "return": "<p>lines of <code>{columns:[Pairs], rows:[Pairs]}</code></p>"
      }, 
      {
        "description": "<h2>create a masking area for canvas clipping. Defaults to position in the center of the bound, unless anchor paramater is set</h2>", 
        "name": "setMask", 
        "param": [
          "<p><code>w, h</code> mask width and height</p>", 
          "<p><code>anchor</code> optional anchor point, or leave unset to default anchor position which is center of the bound.</p>"
        ], 
        "pname": "w, h, anchor=false"
      }, 
      {
        "description": "<h2>anchor mask to bound's origin position</h2>", 
        "name": "anchorMask", 
        "param": [], 
        "pname": ""
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "UI": {
    "cls": "UI", 
    "description": "<h3>(In progress) A simple handle that can be dragged by mouse</h3>", 
    "extend": "Rectangle", 
    "file": "UI.coffee", 
    "funcs": [], 
    "props": [], 
    "statics": []
  }
}