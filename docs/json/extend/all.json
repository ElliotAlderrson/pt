{
  "Easing": {
    "cls": "Easing", 
    "description": "<h3>Simple easing functions based on Robert Penner's functions.</h3>", 
    "extend": "", 
    "file": "Easing.coffee", 
    "funcs": [], 
    "props": [], 
    "statics": [
      {
        "description": "<h2>Linear interpolation</h2>", 
        "name": "linear", 
        "param": [
          "<p><code>t</code> current time or iteration</p>", 
          "<p><code>b</code> start value</p>", 
          "<p><code>c</code> change in value</p>", 
          "<p><code>d</code> duration time or total iteration</p>"
        ], 
        "pname": "t, b, c, d", 
        "return": "<p>interpolated value</p>"
      }
    ]
  }, 
  "GridCascade": {
    "cls": "GridCascade", 
    "description": "<h3>(In progress) Like Grid, but expand the rows as needed to fit more items.</h3>", 
    "extend": "Grid", 
    "file": "GridCascade.coffee", 
    "funcs": [
      {
        "description": "<h2>Clear the layout and re-make the initial grid</h2><p>simplified because rows are auto-expanded in fit()</p>", 
        "name": "resetLayout", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Mark a certain area in the grid as occupied. This also checks for new rows, which is not checked in Grid</h2>", 
        "name": "occupy", 
        "param": [
          "<p><code>x</code> column index</p>", 
          "<p><code>y</code> row index</p>", 
          "<p><code>W</code> column width</p>", 
          "<p><code>h</code> row size</p>"
        ], 
        "pname": "x, y, w, h", 
        "return": "<p>this grid</p>"
      }, 
      {
        "description": "<h2>optimize the iteration by starting at a row that has free cells</h2>", 
        "name": "findStartRow", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>fit this area within the grid. This expands new rows to fit more items as needed.</h2>", 
        "name": "fit", 
        "param": [
          "<p><code>width</code> number of columns</p>", 
          "<p><code>height</code> number of rows</p>"
        ], 
        "pname": "cols, rows", 
        "return": "<p>an object with properties <code>row</code> and <code>column</code> to specify the top left position, <code>columnSize</code> and <code>rowSize</code> to specify the resulting size in grid units, and <code>bound</code> which is the actual area as a Rectangle object.</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "Noise": {
    "cls": "Noise", 
    "description": "<h3>Generate Perlin and Simplex2D noise.</h3>", 
    "extend": "Vector", 
    "file": "Noise.coffee", 
    "funcs": [
      {
        "description": "<h2>Generate a different noise by seeding</h2>", 
        "eg": "<p><code>noise.seed(0.1)</code>, <code>noise.seed(Math.random())</code></p>", 
        "name": "seed", 
        "param": [
          "<p><code>seed</code> a value between 0 to 1</p>"
        ], 
        "pname": "seed"
      }, 
      {
        "description": "<h2>Get a 2d perlin noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.</h2>", 
        "eg": "<p><code>noise.perlin2d()</code>, <code>noise.perlin2d(10.001, 0.1)</code></p>", 
        "name": "perlin2d", 
        "param": [
          "<p><code>x, y</code> optional x and y dimension, or leave empty to use this vector's x and y position</p>"
        ], 
        "pname": "xin=@x, yin=@y", 
        "return": "<p>a value between 0 to 1</p>"
      }, 
      {
        "description": "<h2>Get a 2d simplex noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.</h2>", 
        "eg": "<p><code>noise.simplex2d()</code>, <code>noise.simplex2d(10.001, 0.1)</code></p>", 
        "name": "simplex2d", 
        "param": [
          "<p><code>x, y</code> optional x and y dimension, or leave empty to use this vector's x and y position</p>"
        ], 
        "pname": "xin=@x, yin=@y", 
        "return": "<p>a value between -1 to 1</p>"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "ParticleEmitter": {
    "cls": "ParticleEmitter", 
    "description": "<h3>(In progress)  A very basic particle emitter</h3>", 
    "extend": "Vector", 
    "file": "ParticleEmitter.coffee", 
    "funcs": [
      {
        "description": "<h2>Constructor</h2>", 
        "name": "ParticleEmitter", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Initiate with an instance of a <code>ParticleSystem</code></h2>", 
        "name": "init", 
        "param": [], 
        "pname": "system"
      }, 
      {
        "description": "<h2>Set frequency of emisson.</h2>", 
        "name": "frequency", 
        "param": [
          "<p><code>f</code> how many per second.</p>"
        ], 
        "pname": "f"
      }, 
      {
        "description": "<h2>emit a particle (abstract method)</h2>", 
        "name": "emit", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>animate function to be called by Space</h2>", 
        "name": "animate", 
        "param": [], 
        "pname": "time, frame, ctx"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "ParticleField": {
    "cls": "ParticleField", 
    "description": "<h3>(In progress) An area that influence force, velocity, etc of particles inside it</h3>", 
    "extend": "Rectangle", 
    "file": "ParticleField.coffee", 
    "funcs": [
      {
        "description": "<h2>check particles to work on</h2>", 
        "name": "check", 
        "param": [
          "<p>{particles} array of particles</p>", 
          "<p>{removal} if true and if particle within bound, then remove it from array</p>"
        ], 
        "pname": "particles, removal=false"
      }, 
      {
        "description": "<h2>apply the changes to a particle (abstract method), used in check()</h2>", 
        "name": "work", 
        "param": [
          "<p>{p} a particle</p>"
        ], 
        "pname": "p"
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "QuadTree": {
    "cls": "QuadTree", 
    "description": "<h3>A basic quad tree implementation</h3>", 
    "extend": "Rectangle", 
    "file": "QuadTree.coffee", 
    "funcs": [
      {
        "description": "<h2>Create a new QuadTree, which is a kind of Rectangle</h2>", 
        "name": "QuadTree", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Get a list of quads in which this point is contained</h2>", 
        "name": "getQuads", 
        "param": [
          "<p><code>p</code> is a Point</p>", 
          "<p><code>list</code> Optional existing list to append to</p>"
        ], 
        "pname": "p, list=[]"
      }, 
      {
        "description": "<h2>Get a list of items in this point's deepest quad</h2>", 
        "name": "getItems", 
        "param": [
          "<p><code>p</code>  a Point</p>"
        ], 
        "pname": "p"
      }, 
      {
        "description": "<h2>Add an item into this QuadTree. Split to sub quads if needed.</h2>", 
        "name": "addToQuad", 
        "param": [], 
        "pname": "item"
      }, 
      {
        "description": "<h2>Split this into 4 quads using Rectangle's <code>quadrant()</code></h2>", 
        "name": "splitQuad", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>reset this quad, removing items and sub-quads</h2>", 
        "name": "resetQuad", 
        "param": [], 
        "pname": ""
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "SamplePoints": {
    "cls": "SamplePoints", 
    "description": "<h3>Point sampling using Best Candidate and Poisson methods.</h3>", 
    "extend": "PointSet", 
    "file": "SamplePoints.coffee", 
    "funcs": [
      {
        "description": "<h2>Construct a point sampler</h2>", 
        "name": "SamplePoints", 
        "param": [], 
        "pname": ""
      }, 
      {
        "description": "<h2>Add a bound.</h2>", 
        "name": "setBounds", 
        "param": [
          "<p><code>b</code> the bounding box</p>", 
          "<p><code>anchor</code> a boolean value. If set to <code>true</code>, then current position is set to bound's position</p>"
        ], 
        "pname": "b, anchor=false", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Initiate a best candidate sampler</h2>", 
        "name": "bestCandidateSampler", 
        "param": [], 
        "pname": "", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Initiate a poisson sampler using Bridson's algorithm</h2><p>Based on http://bl.ocks.org/mbostock/19168c663618b7f07158</p>", 
        "name": "poissonSampler", 
        "param": [], 
        "pname": "radius", 
        "return": "<p>this sampler</p>"
      }, 
      {
        "description": "<h2>Get a sample from poisson sampler or best-candidate sampler.</h2>", 
        "name": "sample", 
        "param": [
          "<p><code>numSamples</code> number of times to sample. Defaults to 10 times</p>", 
          "<p><code>type</code> sampling type, either \"poisson\" or \"bestcandidate\". Defaults to \"bestcandidate\".</p>"
        ], 
        "pname": "numSamples=10, type=false", 
        "return": "<p>a point, or false if no more sample can be found</p>"
      }
    ], 
    "props": [], 
    "statics": [
      {
        "description": "<h2>A static implementation of Mitchell's Best Neighor Algorithm to generate one sample. (Consider using <code>SamplePoints</code> object instead)</h2>", 
        "name": "bestCandidate", 
        "param": [
          "<p><code>bound</code> a Rectangle object to specify the bounding box</p>", 
          "<p><code>items</code> an array of existing items</p>", 
          "<p><code>samples</code> number of sampling. Default to 10.</p>"
        ], 
        "pname": "bound, items, samples=10", 
        "return": "<p>o Vector object which is best candidate</p>"
      }
    ]
  }, 
  "StripeBound": {
    "cls": "StripeBound", 
    "description": "<h3>A Bound subdivided in horizontal and vertical stripes</h3>", 
    "extend": "Rectangle", 
    "file": "StripeBound.coffee", 
    "funcs": [
      {
        "description": "<h2>Determines the number of stripes by frequency, and change method to frequency</h2>", 
        "name": "setFrequency", 
        "param": [], 
        "pname": "x, y"
      }, 
      {
        "description": "<h2>Set number of strips by number, and change method to stripes</h2>", 
        "name": "setStripes", 
        "param": [], 
        "pname": "x, y"
      }, 
      {
        "description": "<h2>get stripes as boxes</h2>", 
        "name": "getStripes", 
        "param": [], 
        "pname": "", 
        "return": "<p>boxes of <code>{columns:[Pairs], rows:[Pairs]}</code></p>"
      }, 
      {
        "description": "<h2>get stripes as lines</h2>", 
        "name": "getStripeLines", 
        "param": [], 
        "pname": "", 
        "return": "<p>lines of <code>{columns:[Pairs], rows:[Pairs]}</code></p>"
      }, 
      {
        "description": "<h2>create a masking area for canvas clipping. Defaults to position in the center of the bound, unless anchor paramater is set</h2>", 
        "name": "setMask", 
        "param": [
          "<p><code>w, h</code> mask width and height</p>", 
          "<p><code>anchor</code> optional anchor point, or leave unset to default anchor position which is center of the bound.</p>"
        ], 
        "pname": "w, h, anchor=false"
      }, 
      {
        "description": "<h2>anchor mask to bound's origin position</h2>", 
        "name": "anchorMask", 
        "param": [], 
        "pname": ""
      }
    ], 
    "props": [], 
    "statics": []
  }, 
  "UI": {
    "cls": "UI", 
    "description": "<h3>(In progress) A simple handle that can be dragged by mouse</h3>", 
    "extend": "Rectangle", 
    "file": "UI.coffee", 
    "funcs": [], 
    "props": [], 
    "statics": []
  }
}