{
    "cls": "Grid", 
    "description": "<h3>Basic Grid implementation</h3>", 
    "extend": "Rectangle", 
    "file": "Grid.coffee", 
    "funcs": [
        {
            "description": "<h2>Create a new Grid. Like a Rectangle, a Grid's area are defined by two Vectors.</h2>", 
            "eg": "<p><code>new Grid()</code> <code>new Grid(1,2,3)</code> <code>new Grid([2,4])</code> <code>new Grid({x:3, y:6, z:9}).to(1,2,3)</code></p>", 
            "name": "Grid", 
            "param": [
                "<p><code>args</code> Similar to Pair constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to <code>to()</code>, you can also pass 4 or 6 values to set both anchor and <code>p1</code> points directly as a 2d or 3d vector.</p>"
            ], 
            "pname": "", 
            "return": "<p>a new Grid object</p>"
        }, 
        {
            "description": "<h2>Describe this grid as a text string</h2>", 
            "name": "toString", 
            "param": [], 
            "pname": "", 
            "return": "<p>\"Grid width, height, columns, rows, cell\" text</p>"
        }, 
        {
            "description": "<h2>Initiate a grid</h2>", 
            "eg": "<p><code>grid.create(100,50)</code> <code>grid.create( 10,10, \"stretch\",\"stretch\")</code> <code>grid.create( 20,20, \"flex\",\"fix\")</code></p>", 
            "name": "create", 
            "param": [
                "<p><code>x</code> a value to specify cell width (if <code>xtype</code> parameter is \"fix\" or \"flex\") or column count  (if <code>xtype</code> parameter is \"stretch\")</p>", 
                "<p><code>y</code> a value to specify cell height (if <code>ytype</code> parameter is \"fix\" or \"flex\") or row count (if <code>ytype</code> parameter is \"stretch\")</p>", 
                "<p><code>xtype, ytype</code> a string to specify how columns and rows should be calculated. Use \"fix\" to specify exact cell width or height in pixels, \"flex\" to specify ideal cell width or height in pixels (which allows for flexible rounding to rows or columns), \"stretch\" to specify number of rows or columns only</p>"
            ], 
            "pname": "x, y, xtype='fix', ytype='fix'", 
            "return": "<p>this grid</p>"
        }, 
        {
            "description": "<h2>Generate or draw cell contents with a callback function. This will loop through each cell in the grid and call the callback function.</h2>", 
            "name": "generate", 
            "param": [
                "<p><code>callback</code> a callback function with these parameters ( this_grid, cell_size, cell_position, cell_row, cell_column )</p>"
            ], 
            "pname": "callback", 
            "return": "<p>this grid</p>"
        }, 
        {
            "description": "<h2>Reset the layout and its cell states</h2>", 
            "name": "resetLayout", 
            "param": [
                "<p><code>callback</code> a function with these parameters ( this_grid, cell_row, cell_column ). This will get called after each cell's reset.</p>"
            ], 
            "pname": "callback", 
            "return": "<p>this grid</p>"
        }, 
        {
            "description": "<h2>Mark a certain area in the grid layout as occupied</h2>", 
            "eg": "<p><code>grid.occupy(0,0, 5,3)</code></p>", 
            "name": "occupy", 
            "param": [
                "<p><code>x</code> column index</p>", 
                "<p><code>y</code> row index</p>", 
                "<p><code>w</code> column width</p>", 
                "<p><code>h</code> row size</p>"
            ], 
            "pname": "x, y, w, h", 
            "return": "<p>this grid</p>"
        }, 
        {
            "description": "<h2>Fit this area as much as possible within the grid's free ceels</h2>", 
            "name": "fit", 
            "param": [
                "<p><code>cols</code> number of columns</p>", 
                "<p><code>rows</code> number of rows</p>"
            ], 
            "pname": "cols, rows", 
            "return": "<p>an object with properties <code>row</code> and <code>column</code> to specify the top left position, <code>columnSize</code> and <code>rowSize</code> to specify the resulting size in grid units, and <code>bound</code> which is the actual area as a Rectangle object.</p>"
        }
    ], 
    "props": [
        {
            "description": "<h2>grid cell settings as an object with <code>.type</code> property which defines the grid type such as \"fix-fix\", and <code>.size</code> property which stores the cell size as a Vector object.</h2>", 
            "name": "cell", 
            "param": []
        }, 
        {
            "description": "<h2>property to specify number of rows in the grid</h2>", 
            "name": "rows", 
            "param": []
        }, 
        {
            "description": "<h2>property to specify number of columns in the grid</h2>", 
            "name": "columns", 
            "param": []
        }, 
        {
            "description": "<h2>property to store layout and cell states</h2>", 
            "name": "layout", 
            "param": []
        }
    ], 
    "statics": []
}