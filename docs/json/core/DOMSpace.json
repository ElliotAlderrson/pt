{
    "cls": "DOMSpace", 
    "description": "<h3>DOMSpace is a space that represents a html dom. It is similar to CanvasSpace but usually used as a space for SVG or HTML.</h3>", 
    "extend": "Space", 
    "file": "DOMSpace.coffee", 
    "funcs": [
        {
            "description": "<h2>Create a DOMSpace which represents a HTML DOM</h2>", 
            "name": "DOMSpace", 
            "param": [
                "<p><code>elem</code> Either a string which refers to the \"id\" attribute of a DOM element, or the DOM element itself.</p>", 
                "<p><code>callback</code> an optional callback <code>function(boundingBox, spaceElement)</code> to be called when element is appended and ready. A \"ready\" event will also be fired from the space's element when it's appended, which can be tracked with <code>spaceInstance.space.addEventListener(\"ready\")</code></p>", 
                "<p><code>spaceElement</code> an optional string of space's dom element name, such as <code>\"div\"</code> or <code>\"svg\"</code> or . Default is <code>\"div\"</code></p>"
            ], 
            "pname": "elem, callback, spaceElement=\"div\""
        }, 
        {
            "description": "<h2><code>display(...)</code> is deprecated as of 0.2.0. You can now set the DOM element directly in the constructor, and customize it using <code>setup()</code>.</h2>", 
            "name": "display", 
            "param": [], 
            "pname": ""
        }, 
        {
            "description": "<h2>Set up various options for DOMSpace. The <code>opt</code> parameter is an object with the following fields. This is usually set during instantiation, eg <code>new DOMSpace(...).setup( { opt } )</code></h2>", 
            "name": "setup", 
            "param": [
                "<p><code>opt.bgcolor</code> a hex or rgba string to set initial background color of the element, or use <code>false</code> or \"transparent\" to set a transparent background.</p>", 
                "<p><code>opt.resize</code> a boolean to set whether th element's size should auto resize to match its container's size. You can also set it manually with <code>autoSize()</code></p>"
            ], 
            "pname": "opt", 
            "return": "<p>this DOMSpace</p>"
        }, 
        {
            "description": "<h2>This overrides Space's <code>resize</code> function. It's a callback function for window's resize event when <code>autoResize</code> is true. Keep track of this with <code>onSpaceResize(w,h,evt)</code> callback in your added objects.</h2>", 
            "name": "resize", 
            "param": [], 
            "pname": "w, h, evt", 
            "return": "<p>this DOMSpace</p>"
        }, 
        {
            "description": "<h2>Set whether the svg element should resize when its container is resized.</h2>", 
            "name": "autoResize", 
            "param": [
                "<p><code>auto</code> a boolean value indicating if auto size is set. Default is <code>true</code>.</p>"
            ], 
            "pname": "auto=true", 
            "return": "<p>this CanvasSpace</p>"
        }, 
        {
            "description": "<h2>Clear the space. This removes all the child nodes inside <code>space</code></h2>", 
            "name": "clear", 
            "param": [
                "<p><code>bg</code> Optional parameter. If defined, this will change the css background-color on the svg element. Specify a custom background color in hex or rgba string, or \"transparent\".</p>"
            ], 
            "pname": "bg", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Set background color. This will change the css background-color on the svg element.</h2>", 
            "name": "setBackground", 
            "param": [
                "<p><code>bg</code> Specify a custom background color in hex or rgba string, or \"transparent\".</p>"
            ], 
            "pname": "bg"
        }, 
        {
            "description": "<h2>Overrides Space's <code>animate</code> function</h2>", 
            "name": "animate", 
            "param": [
                "<p><code>time</code> current time</p>"
            ], 
            "pname": "time", 
            "return": "<p>this CanvasSpace</p>"
        }
    ], 
    "props": [
        {
            "description": "<h2>A property to store the DOM element</h2>", 
            "name": "space", 
            "param": []
        }
    ], 
    "statics": []
}