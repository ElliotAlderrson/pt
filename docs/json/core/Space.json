{
    "cls": "Space", 
    "description": "<h3>Fishes forget their rivers and lakes, said Chuang Tzu. Spaces or contexts give meanings to ideas and lives, but are often overlooked. In Pt, space represents an abstract context in which a point can be made visible in one form or another, and can be specified as an html canvas, a soundscape, or a graffiti robot on a wall. Space is where a concept meets its expression.</h3>", 
    "extend": "", 
    "file": "Space.coffee", 
    "funcs": [
        {
            "description": "<h2>Create a Space which is the context for displaying and animating elements. Extend this to create specific Spaces, for example, a space for HTML Canvas or SVG.</h2>", 
            "name": "Space", 
            "param": [
                "<p><code>id</code> an id property to identify this space</p>"
            ], 
            "pname": "id"
        }, 
        {
            "demo": "space.refresh", 
            "description": "<h2>set whether the rendering should be repainted on each frame</h2>", 
            "name": "refresh", 
            "param": [
                "<p><code>b</code> a boolean value to set whether to repaint each frame</p>"
            ], 
            "pname": "b", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>set custom render function (on resize and other events)</h2>", 
            "name": "render", 
            "param": [], 
            "pname": "context", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>resize the space. (not implemented)</h2>", 
            "name": "resize", 
            "param": [], 
            "pname": "w, h"
        }, 
        {
            "description": "<h2>clear all contents in the space (not implemented)</h2>", 
            "name": "clear", 
            "param": [], 
            "pname": ""
        }, 
        {
            "demo": "space.add", 
            "description": "<h2>Add an item to this space. An item must define a callback function <code>animate( time, fps, context )</code> and will be assigned a property <code>animateID</code> automatically. An item can also optionally define a callback function <code>onSpaceResize( w, h, evt )</code>. Subclasses of Space may define other callback functions.</h2>", 
            "name": "add", 
            "param": [
                "<p>an object with an <code>animate( time, fps, context )</code> function, and optionall a <code>onSpaceResize( w, h, evt )</code> function</p>"
            ], 
            "pname": "item", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Remove an item from this Space</h2>", 
            "name": "remove", 
            "param": [
                "<p>an object with an auto-assigned <code>animateID</code> property</p>"
            ], 
            "pname": "item", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Remove all items from this Space</h2>", 
            "name": "removeAll", 
            "param": [], 
            "pname": "", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Main play loop. This implements window.requestAnimationFrame and calls it recursively. Override this <code>play()</code> function to implemenet your own animation loop.</h2>", 
            "name": "play", 
            "param": [
                "<p><code>time</code> current time</p>"
            ], 
            "pname": "time=0", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Pause the animation</h2>", 
            "name": "pause", 
            "param": [
                "<p><code>toggle</code> a boolean value to set if this function call should be a toggle (between pause and resume)</p>"
            ], 
            "pname": "toggle=false", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Resume the paused animation</h2>", 
            "name": "resume", 
            "param": [], 
            "pname": "", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Specify when the animation should stop: immediately, after a time period, or never stops.</h2>", 
            "name": "stop", 
            "param": [
                "<p><code>t</code> a value in millisecond to specify a time period to play before stopping, or <code>-1</code> to play forever, or <code>0</code> to end immediately. Default is 0 which will stop the animation immediately.</p>"
            ], 
            "pname": "t=0", 
            "return": "<p>this space</p>"
        }, 
        {
            "description": "<h2>Play animation loop, and then stop after <code>duration</code> time has passed.</h2>", 
            "name": "playTime", 
            "param": [
                "<p><code>duration</code> a value in millisecond to specify a time period to play before stopping, or <code>-1</code> to play forever</p>"
            ], 
            "pname": "duration=5000"
        }, 
        {
            "description": "<h2>Bind event listener in canvas element, for events such as mouse events</h2>", 
            "name": "bindCanvas", 
            "param": [
                "<p><code>evt</code> Event object</p>", 
                "<p><code>callback</code> a callback function for this event</p>"
            ], 
            "pname": "evt, callback"
        }, 
        {
            "demo": "canvasspace.bindMouse", 
            "description": "<h2>A convenient method to bind (or unbind) all mouse events in canvas element. All item added to <code>items</code> property that implements an <code>onMouseAction</code> callback will receive mouse event callbacks. The types of mouse actions are: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".</h2>", 
            "name": "bindMouse", 
            "param": [
                "<p><code>bind</code> a boolean value to bind mouse events if set to <code>true</code>. If <code>false</code>, all mouse events will be unbound. Default is true.</p>"
            ], 
            "pname": "_bind=true"
        }, 
        {
            "description": "<h2>A convenient method to bind (or unbind) all mobile touch events in canvas element. All item added to <code>items</code> property that implements an <code>onTouchAction</code> callback will receive touch event callbacks. The types of touch actions are the same as the mouse actions: \"up\", \"down\", \"move\", and \"out\".</h2>", 
            "name": "bindTouch", 
            "param": [
                "<p><code>bind</code> a boolean value to bind touch events if set to <code>true</code>. If <code>false</code>, all touch events will be unbound. Default is true.</p>"
            ], 
            "pname": "_bind=true"
        }, 
        {
            "description": "<h2>A convenient method to convert the touch points in a touch event to an array of <code>Vectors</code>.</h2>", 
            "name": "touchesToPoints", 
            "param": [
                "<p>evt a touch event which contains touches, changedTouches, and targetTouches list.</p>", 
                "<p>which a string to select a touches list: \"touches\", \"changedTouches\", or \"targetTouches\". Default is \"touches\"</p>"
            ], 
            "pname": "evt, which=\"touches\"", 
            "return": "<p>an array of Vectors, whose origin position (0,0) is offset to the top-left of this space.</p>"
        }
    ], 
    "props": [
        {
            "description": "<h2>A property to identify this space by name</h2>", 
            "name": "id", 
            "param": []
        }, 
        {
            "description": "<h2>A property to indicate the size of this space as a Vector</h2>", 
            "name": "size", 
            "param": []
        }, 
        {
            "description": "<h2>A property to indicate the center of this space as a Vector</h2>", 
            "name": "center", 
            "param": []
        }, 
        {
            "description": "<h2>A set of items in this space. An item should implement a function <code>animate()</code> and optionally another callback <code>onSpaceResize(w,h,evt)</code>, and will be assigned a property <code>animateID</code> automatically. (See <code>add()</code>)</h2>", 
            "name": "items", 
            "param": []
        }
    ], 
    "statics": []
}