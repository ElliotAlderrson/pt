// Generated by CoffeeScript 1.3.1
(function() {
  var Docs;

  Docs = (function() {

    Docs.name = 'Docs';

    function Docs(template_id) {
      this.flatTree = [];
      this.json = {};
      this.elems = {};
      this.sortedElems = [];
      this.tree = {};
      this.resizeTimeout = -1;
      this.scrollTimeout = -1;
      this.uiTimerID = -1;
      this.activeDemo = {
        elem: null,
        script: null,
        path: "demo/"
      };
      this.dom = {
        frame: document.querySelector("body"),
        cover: document.querySelector("#cover"),
        head: document.querySelector("#head"),
        overview: document.querySelector("#overview"),
        page: document.querySelector("#page"),
        menu: document.querySelector("#menu"),
        submenu: document.querySelector("#submenu"),
        content: document.querySelector("#content"),
        demo: document.querySelector("#pt"),
        template: _.template(document.querySelector(template_id).innerHTML)
      };
      this.layout = {
        sticky: [
          {
            name: "step1",
            y: 1500,
            passed: false
          }
        ]
      };
      this.inited = false;
      window.addEventListener("scroll", this.onScroll.bind(this), false);
      window.addEventListener("touchmove", this.onScroll.bind(this), false);
      window.addEventListener("resize", (function(evt) {
        var _this = this;
        clearTimeout(this.resizeTimeout);
        return setTimeout((function() {
          return _this.resize(evt);
        }), 200);
      }).bind(this));
    }

    Docs.prototype.ready = function() {
      return this.getMembers("Space");
    };

    Docs.prototype.getJSON = function(url) {
      var request,
        _this = this;
      request = new XMLHttpRequest();
      request.open('GET', url, true);
      request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
          _this.json = JSON.parse(request.responseText);
          _this.getList();
          _this.tree = _this.getTree();
          _this.buildMenu(_this.tree, _this.dom.menu);
          _this.buildContent();
          return _this.ready();
        } else {
          return showError("Cannot get contents");
        }
      };
      request.onerror = function() {
        return showError("Error loading contents");
      };
      return request.send();
    };

    Docs.prototype.getList = function() {
      var _this = this;
      return _.each(this.json, function(v, k) {
        var ext;
        ext = v.extend.length > 0 ? [v.extend] : [];
        return _this.elems[v.cls] = {
          name: v.cls,
          extend: ext
        };
      });
    };

    Docs.prototype.buildContent = function() {
      var k, n, pa, parents, sec, v, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.flatTree;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        v = this.json[k];
        sec = document.createElement("section");
        sec.classList.add("element");
        sec.setAttribute("id", "elem" + k);
        this.dom.content.appendChild(sec);
        parents = [];
        _ref1 = this.elems[v.cls].extend;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          n = _ref1[_j];
          pa = {
            cls: n,
            funcs: this.elems[n].funcs,
            props: this.elems[n].props
          };
          //pa.funcs.shift();
          parents.push(pa);
        }
        v.parents = parents;
        _results.push(sec.innerHTML = this.dom.template(v));
      }
      return _results;
    };

    Docs.prototype.buildMenu = function(tree, node, depth) {
      var sec,
        _this = this;
      if (depth == null) {
        depth = 0;
      }
      if (Object.keys(tree).length > 0) {
        sec = document.createElement("ul");
        sec.classList.add("depth-" + depth);
        node.appendChild(sec);
        return _.each(tree, function(v, k) {
          var li;
          li = document.createElement("li");
          li.setAttribute("data-name", k);
          _this.bindSubMenu(li);
          li.innerHTML = "<a href='#elem" + k + "'>" + k + "</a>";
          sec.appendChild(li);
          _this.flatTree.push(k);
          _this.elems[k].funcs = _.pluck(_this.json[k].funcs, 'name');
          _this.elems[k].props = _.pluck(_this.json[k].props, 'name');
          _this.elems[k].statics = _.pluck(_this.json[k].statics, 'name');
          _this.elems[k].inherited = depth > 0;
          return _this.buildMenu(v, li, depth + 1);
        });
      }
    };

    Docs.prototype.bindSubMenu = function(elem) {
      var _this = this;
      return elem.addEventListener("click", function(evt) {
        var k;
        k = evt.currentTarget.getAttribute("data-name");
        if (k) {
          _this.getMembers(k);
        }
        return evt.stopPropagation();
      });
    };

    Docs.prototype.getMembers = function(k) {
      var _createSub,
        _this = this;
      console.log(this.elems[k]);
      if (this.elems[k]) {
        this.dom.submenu.innerHTML = "";
        _createSub = function(list, name, key) {
          var item, li, sub, subtitle, _i, _len;
          if (!list || list.length <= 0) {
            return false;
          }
          sub = document.createElement("div");
          sub.classList.add("subsection");
          subtitle = document.createElement("h4");
          subtitle.innerText = name;
          sub.appendChild(subtitle);
          _this.dom.submenu.appendChild(sub);
          if (list === "inherited") {
            item = document.createElement("a");
            item.setAttribute("href", "#" + key + "-" + k);
            item.innerText = name;
            return sub.appendChild(item);
          } else {
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              li = list[_i];
              item = document.createElement("a");
              item.setAttribute("href", "#" + key + "-" + k + "-" + li);
              item.innerText = li;
              item.classList.add("subitem");
              sub.appendChild(item);
            }
            return sub;
          }
        };
        _createSub(this.elems[k].funcs, "Functions", "func");
        _createSub(this.elems[k].props, "Properties", "prop");
        _createSub(this.elems[k].statics, "Statics", "static");
        if (this.elems[k].inherited) {
          return _createSub("inherited", "Inherited", "inherited");
        }
      }
    };

    Docs.prototype.getTree = function() {
      var c, elemTree, findPath, getParent, parent, sortedLevels, _i, _len,
        _this = this;
      elemTree = {};
      findPath = function(parents) {
        var el;
        if (!parents || parents.length === 0) {
          return parents;
        }
        el = _this.elems[parents[0]];
        if (el && el.extend.length > 0) {
          return findPath(el.extend.concat(parents));
        } else {
          return parents;
        }
      };
      getParent = function(parents, target, depth) {
        var v, _i, _len;
        for (_i = 0, _len = parents.length; _i < _len; _i++) {
          v = parents[_i];
          if (target[v]) {
            return getParent(parents, target[v], depth + 1);
          }
          if (depth > 20) {
            return target;
          }
        }
        return target;
      };
      sortedLevels = [];
      _.each(this.elems, function(v, k) {
        v.extend = findPath(v.extend);
        return sortedLevels.push(v);
      });
      sortedLevels.sort(function(a, b) {
        var ai, bi, i;
        i = a.name > b.name ? 0.1 : -0.1;
        ai = a.extend.length;
        bi = b.extend.length;
        if (a.name === "Space") {
          ai = -100;
        }
        if (a.name === "Form") {
          ai = -99;
        }
        if (a.name === "Point") {
          ai = -98;
        }
        if (b.name === "Space") {
          bi = -100;
        }
        if (b.name === "Form") {
          bi = -99;
        }
        if (b.name === "Point") {
          bi = -98;
        }
        return (ai - bi) + i;
      });
      this.sortedElems = sortedLevels;
      for (_i = 0, _len = sortedLevels.length; _i < _len; _i++) {
        c = sortedLevels[_i];
        if (c.extend.length === 0) {
          elemTree[c.name] = {};
        } else {
          parent = getParent(c.extend, elemTree, 0, this.flatTree);
          parent[c.name] = {};
        }
      }
      return elemTree;
    };

    Docs.prototype.showError = function(err) {
      return console.error(err);
    };

    Docs.prototype.scrollTo = function(evt, elem) {
      var toElem, ypos,
        _this = this;
      if (evt && elem) {
        toElem = elem.getAttribute("data-to");
        if (toElem) {
          ypos = document.querySelector(toElem).offsetTop;
          clearInterval(this.uiTimerID);
          this.uiTimerID = setInterval((function() {
            var d;
            d = ypos - window.scrollY;
            if (Math.abs(d) <= 1) {
              clearInterval(_this.uiTimerID);
              return;
            }
            return window.scrollBy(0, Math.ceil(d / 3));
          }), 40);
          evt.preventDefault();
          return evt.stopPropagation();
        }
      }
    };

    Docs.prototype.resize = function(evt) {
      //this.dom.head.style.height = window.innerHeight + "px";
      this.layout.sticky[0].y = window.innerHeight;
      return this.syncScroll();
    };

    Docs.prototype.isInView = function(elem) {
      var rect;
      rect = elem.getBoundingClientRect();
      return rect.top >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight);
    };

    Docs.prototype.loadDemo = function() {
      var d, demos, _i, _len,
        _this = this;
      demos = document.querySelectorAll(".demo");
      for (_i = 0, _len = demos.length; _i < _len; _i++) {
        d = demos[_i];
        if (this.isInView(d)) {
          console.log("in view", d);
          this.activeDemo.elem = d;
          this.activeDemo.script = document.createElement('script');
          this.activeDemo.script.type = "text/javascript";
          this.activeDemo.script.src = this.activeDemo.path + d.getAttribute("data-demo") + ".js";
          this.activeDemo.script.onload = function(evt) {
            _this.dom.demo.classList.add("active");
            return console.log("loaded");
          };
          document.querySelector("body").appendChild(this.activeDemo.script);
          return;
        }
      }
    };

    Docs.prototype.unloadDemo = function() {
      if (this.activeDemo.elem && !this.isInView(this.activeDemo.elem)) {
        this.dom.demo.classList.remove("active");
        document.querySelector("body").removeChild(this.activeDemo.script);
        this.dom.demo.removeChild(this.dom.demo.querySelector("canvas"));
        return this.activeDemo.elem = null;
      }
    };

    Docs.prototype.onScroll = function(evt) {
      var st, _i, _j, _len, _len1, _ref, _ref1, _step, _step1, _stick,
        _this = this;
      _stick = function(t) {
        if (t.passed) {
          _this.dom.frame.classList.add("sticky-" + t.name);
        } else {
          _this.dom.frame.classList.remove("sticky-" + t.name);
        }
        if (!_this.inited && t.passed) {
          return _this.inited = true;
        }
      };
      _ref = this.layout.sticky;
      for (_i = 0, _len = _ref.length, _step = 1; _i < _len; _i += _step) {
        st = _ref[_i];
        if (window.scrollY > st.y && !st.passed) {
          st.passed = true;
          _stick(st);
        } else if (window.scrollY < st.y && st.passed) {
          st.passed = false;
          _stick(st);
        }
      }
      if (window.scrollY <= 0) {
        _ref1 = this.layout.sticky;
        for (_j = 0, _len1 = _ref1.length, _step1 = 1; _j < _len1; _j += _step1) {
          st = _ref1[_j];
          this.dom.frame.classList.remove("sticky-" + st.name);
        }
      }
      this.syncScroll();
      this.unloadDemo();
      clearTimeout(this.scrollTimeout);
      return this.scrollTimeout = setTimeout((function() {
        return _this.loadDemo();
      }), 500);
    };

    Docs.prototype.syncScroll = function() {};

    return Docs;

  })();

  window.Docs = Docs;

}).call(this);
