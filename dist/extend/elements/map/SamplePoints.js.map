{"version":3,"sources":["SamplePoints.coffee"],"names":[],"mappings":"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","file":"SamplePoints.js","sourceRoot":"/source/","sourcesContent":["\r\nclass SamplePoints extends PointSet\r\n\r\n  # ## Constructor\r\n  constructor: () ->\r\n    super\r\n\r\n    @bestcandidate = null\r\n    @poisson = null\r\n    @bound = null\r\n    @boundsize = null\r\n\r\n  # ## Add a bound.\r\n  # if anchor is true, then current position is set to bound's position\r\n  setBounds: ( b, anchor=false ) ->\r\n    if anchor then @set( b )\r\n    @bound = new Rectangle(@).size( b.size() )\r\n\r\n\r\n  # ## Initiate a best candidate sampler\r\n  bestCandidateSampler: () ->\r\n\r\n    @points = []\r\n\r\n    # set boundary if @bound if not set\r\n    if !@bound then @bound = new Rectangle().size(500,500)\r\n    @boundsize = @bound.size()\r\n\r\n    @bestcandidate = {\r\n      halfsize: @boundsize.$divide(2)\r\n      quartersize: @boundsize.$divide(4)\r\n      maxDist: @boundsize.x*@boundsize.x + @boundsize.y*@boundsize.y\r\n    }\r\n\r\n    return @\r\n\r\n\r\n  # ## Initiate a poisson sampler using Bridson's algorithm\r\n  # Based on http://bl.ocks.org/mbostock/19168c663618b7f07158\r\n  poissonSampler: (radius) ->\r\n\r\n    @points = []\r\n\r\n    # set boundary if @bound if not set\r\n    if !@bound then @bound = new Rectangle().size(500,500)\r\n    @boundsize = @bound.size()\r\n\r\n    cellsize = radius * Math.SQRT1_2\r\n\r\n    @poisson = {\r\n      grid: []\r\n      gridWidth: Math.ceil( @boundsize.x / cellsize )\r\n      gridHeight: Math.ceil( @boundsize.y / cellsize )\r\n      cellSize: cellsize\r\n      radius: radius\r\n      radius2: radius * radius\r\n      R: 3 * radius * radius\r\n      queue: []\r\n      queueSize: 0\r\n      sampleSize: 0\r\n      sincos: Util.sinCosTable()\r\n    }\r\n\r\n    return @\r\n\r\n  # ## Get a sample from poisson sampler or best-candidate sampler.\r\n  # return false if no more sample can be found\r\n  sample: ( numSamples=10, type=false ) ->\r\n\r\n    # Poisson\r\n    if @poisson and type=='poisson'\r\n\r\n      # check if it's done\r\n      if @poisson.sampleSize > 0 and @poisson.queueSize == 0 then return false\r\n\r\n      # create first sample\r\n      if !@poisson.sampleSize then return @_poissonSample( @bound.x+@boundsize.x/2, @bound.y+@boundsize.y/2 )\r\n\r\n      while (@poisson.queueSize)\r\n        i = Math.floor( Math.random() * @poisson.queueSize )\r\n        s = @poisson.queue[i];\r\n\r\n        for j in [0...numSamples] by 1\r\n          a = Math.floor(360 * Math.random())\r\n          r = Math.sqrt(Math.random() * @poisson.R + @poisson.radius2)\r\n          x = s.x + r * @poisson.sincos.cos[a]\r\n          y = s.y + r * @poisson.sincos.sin[a]\r\n\r\n          if (x >= @bound.x && x < @boundsize.x && y >= @bound.y && y < @boundsize.y && @_poissonCheck(x, y))\r\n            return @_poissonSample(x, y) # point is stored in @poisson.grid instead of @points\r\n\r\n        @poisson.queue[i] = @poisson.queue[--@poisson.queueSize];\r\n        @poisson.queue.length = @poisson.queueSize;\r\n\r\n      return true\r\n\r\n    # Best candidate\r\n    else if @bestcandidate\r\n\r\n      best = null\r\n      bestDist = -1\r\n\r\n      for i in [0...numSamples] by 1\r\n\r\n        # create sample\r\n        p = new Vector( @bound.x + @boundsize.x * Math.random(), @bound.y + @boundsize.y * Math.random() )\r\n        if @points.length == 0\r\n          best = p\r\n          break\r\n        else\r\n          # best point is the one that has the \"largest\" nearest distance\r\n          nearest = @_bestCandidateCheck( p )\r\n          if nearest > bestDist\r\n            best = p\r\n            bestDist = nearest\r\n\r\n      if best then @points.push( best )\r\n\r\n      return best\r\n\r\n\r\n  # find nearest distance of best candidate sample\r\n  _bestCandidateCheck: (p) ->\r\n    _dist = @bestcandidate.maxDist\r\n\r\n    # rough optimization. Only search for points in the quarter bound area of this point\r\n    halfbound = new Rectangle( p.x-@bestcandidate.quartersize.x, p.y-@bestcandidate.quartersize.y).size( @bestcandidate.halfsize.x, @bestcandidate.halfsize.y )\r\n    matches = (it for it in @points when halfbound.intersectPoint( it ))\r\n\r\n    for w in matches\r\n      dx = (w.x-p.x)\r\n      dy = (w.y-p.y)\r\n      dist = dx*dx + dy*dy\r\n      if dist < _dist\r\n        _dist = dist\r\n\r\n    return _dist\r\n\r\n\r\n  # create a poisson sample\r\n  _poissonSample: (x, y) ->\r\n    s = new Point(x, y)\r\n    @poisson.queue.push(s);\r\n    @poisson.grid[ @poisson.gridWidth * (y / @poisson.cellSize | 0) + (x / @poisson.cellSize | 0)] = s\r\n    @poisson.sampleSize++\r\n    @poisson.queueSize++\r\n    return s\r\n\r\n  # check if poisson sample is too far\r\n  _poissonCheck: (x, y) ->\r\n    i = Math.floor( x / @poisson.cellSize )\r\n    j = Math.floor( y / @poisson.cellSize )\r\n    i0 = Math.max(i - 2, 0)\r\n    j0 = Math.max(j - 2, 0)\r\n    i1 = Math.min(i + 3, @poisson.gridWidth)\r\n    j1 = Math.min(j + 3, @poisson.gridHeight)\r\n\r\n    for j in [j0...j1] by 1\r\n      o = j *  @poisson.gridWidth\r\n      for i in [i0...i1] by 1\r\n        s = @poisson.grid[o + i]\r\n        if s\r\n          dx = s.x - x\r\n          dy = s.y - y\r\n          if (dx * dx + dy * dy < @poisson.radius2) then return false\r\n\r\n    return true\r\n\r\n  # ## A static implementation of Mitchell's Best Neighor Algorithm to generate one sample. (Consider using `SamplePoints` object instead)\r\n  # @param `bound` a Rectangle object to specify the bounding box\r\n  # @param `items` an array of existing items\r\n  # @param `samples` number of sampling. Default to 10.\r\n  # @return o Vector object which is best candidate\r\n  @bestCandidate: ( bound, items, samples=10 ) ->\r\n\r\n    # bound\r\n    size = bound.size()\r\n    halfsize = size.$divide(2)\r\n    quartersize = size.$divide(4)\r\n    maxDist = size.x*size.x + size.y*size.y\r\n\r\n    # find nearest distance\r\n    _nearest = ( p ) ->\r\n      _dist = maxDist\r\n\r\n      # rough optimization. Only search for points in the quarter bound area of this point\r\n      halfbound = new Rectangle( p.x-quartersize.x, p.y-quartersize.y).size( halfsize.x, halfsize.y )\r\n      matches = (it for it in items when halfbound.intersetPoint( it ))\r\n\r\n      for w in matches\r\n        dx = (w.x-p.x)\r\n        dy = (w.y-p.y)\r\n        dist = dx*dx + dy*dy\r\n        if dist < _dist\r\n          _dist = dist\r\n\r\n      return _dist\r\n\r\n\r\n    # find best point by going through a number of random samples\r\n    best = null\r\n    bestDist = -1\r\n\r\n    for i in [0...samples]\r\n\r\n      # create sample\r\n      p = new Vector( bound.x + size.x * Math.random(), bound.y + size.y * Math.random() )\r\n      if items.length == 0\r\n        return p\r\n      else\r\n        # best point is the one that has the \"largest\" nearest distance\r\n        nearest = _nearest( p )\r\n        if nearest > bestDist\r\n          best = p\r\n          bestDist = nearest\r\n\r\n    return best\r\n\r\n# namespace\r\nthis.SamplePoints = SamplePoints"]}