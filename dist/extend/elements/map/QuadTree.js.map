{"version":3,"sources":["QuadTree.coffee"],"names":[],"mappings":"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","file":"QuadTree.js","sourceRoot":"/source/","sourcesContent":["class QuadTree extends Rectangle\r\n\r\n  constructor: () ->\r\n    super\r\n\r\n    # when split, this is an object with topLeft, topRight, bottomLeft, and bottomRight\r\n    @quads = false\r\n\r\n    @items = []\r\n\r\n    @depth = 0\r\n    @max_depth = 6\r\n    @max_items = 2\r\n\r\n\r\n  # ## Get a list of quads in which this point is contained\r\n  # param: p is a Point\r\n  getQuads: ( p, list=[] ) ->\r\n\r\n    if @intersectPoint( p )\r\n\r\n      list.push( @ )\r\n\r\n      if @quads\r\n        for k, q of @quads\r\n          if q.intersectPoint( p )\r\n            q.getQuads( p, list )\r\n\r\n    return list\r\n\r\n  # ## Get a list of items in this point's deepest quad\r\n  # p is a Point\r\n  getItems: ( p ) ->\r\n\r\n    if @intersectPoint( p )\r\n\r\n      if !@quads then return @items\r\n\r\n      if @quads\r\n        for k, q of @quads\r\n          if q.intersectPoint( p )\r\n            return q.getItems( p )\r\n\r\n    return []\r\n\r\n  # ## Add an item into this QuadTree. Split to sub quads if needed.\r\n  addToQuad: (item) ->\r\n\r\n    if !item then return -1\r\n\r\n    # if this has subs quads\r\n    if @quads\r\n      for k, q of @quads\r\n        _depth = q.addToQuad( item )\r\n        if _depth > 0 then return _depth # return depth if it's added\r\n\r\n      # otherwise return -1\r\n      return -1\r\n\r\n    # if this has no sub quads and it contains item\r\n    if !@quads and @intersectPoint( item )\r\n\r\n      # if max size is reached and depth is not max, then split to sub quads\r\n      if @items.length >= @max_items\r\n        if @depth < @max_depth\r\n          @splitQuad()\r\n          return @addToQuad( item )\r\n        else\r\n          return -1\r\n\r\n        # if not max size yet, just add item and return current depth\r\n      else\r\n        @items.push( item )\r\n        return @depth\r\n\r\n    # not contained in this quad\r\n    return -1\r\n\r\n\r\n  # Split this into 4 quads using Rectangle's quadrant()\r\n  splitQuad: () ->\r\n\r\n    # split to sub quads and increment depth\r\n    @quads = @quadrants()\r\n    for k, q of @quads\r\n      q.depth = @depth+1\r\n\r\n    # add current items to sub quads\r\n    for item, i in @items\r\n      _depth = @addToQuad( item )\r\n\r\n      # if it's added to sub quads, mark for removal\r\n      if _depth > @depth\r\n        @items[i] = null\r\n\r\n    # remove items that are marked null\r\n    for t in @items\r\n      if !t\r\n        @items.splice( t, 1 )\r\n\r\n\r\n  # ## reset this quad, removing items and sub-quads\r\n  resetQuad: () ->\r\n    @items = []\r\n    if @quads\r\n      for k, q of @quads\r\n        q.resetQuad()\r\n      @quads = false\r\n\r\n\r\n\r\n# namespace\r\nthis.QuadTree = QuadTree"]}