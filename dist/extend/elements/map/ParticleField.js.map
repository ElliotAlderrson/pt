{"version":3,"sources":["ParticleField.coffee"],"names":[],"mappings":"AACA,IAAA,aAAA;EAAA;;;AAAM;;;EAES,uBAAA;IACX,gDAAA,SAAA;IACA,IAAC,CAAA,MAAD,GAAU;EAFC;;0BAOb,KAAA,GAAO,SAAC,SAAD,EAAY,OAAZ;AACL,QAAA;;MADiB,UAAQ;;IACzB,IAAA,GAAO;AACP,SAAA,2CAAA;;MACE,IAAG,IAAC,CAAA,YAAD,CAAe,CAAf,CAAH;QACE,IAAC,CAAA,IAAD,CAAO,CAAP,EADF;OAAA,MAAA;QAGE,IAAI,CAAC,IAAL,CAAW,CAAX,EAHF;;AADF;AAMA,WAAO,CAAK,OAAH,GAAgB,IAAhB,GAA0B,SAA5B;EARF;;0BAYP,IAAA,GAAM,SAAC,CAAD,GAAA;;;;GArBoB;;AA2B5B,IAAI,CAAC,aAAL,GAAqB","file":"ParticleField.js","sourceRoot":"/source/","sourcesContent":["# # An area that influence force, velocity, etc of particles inside it\r\nclass ParticleField extends Rectangle\r\n\r\n  constructor: ()->\r\n    super\r\n    @system = undefined\r\n\r\n  # ## check particles to work on\r\n  # @param {particles} array of particles\r\n  # @param {removal} if true and if particle within bound, then remove it from array\r\n  check: (particles, removal=false) ->\r\n    temp = []\r\n    for p in particles\r\n      if @hasIntersect( p ) # within\r\n        @work( p )\r\n      else\r\n        temp.push( p )\r\n\r\n    return ( if removal then temp else particles )\r\n\r\n  # ## apply the changes to a particle (abstract method), used in check()\r\n  # @param {p} a particle\r\n  work: (p) ->\r\n\r\n\r\n\r\n\r\n# namespace\r\nthis.ParticleField = ParticleField"]}