{"version":3,"sources":["GridCascade.coffee"],"names":[],"mappings":"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","file":"GridCascade.js","sourceRoot":"/source/","sourcesContent":["\r\n\r\n# # Like Grid, but expand the rows as needed to fit more items\r\nclass GridCascade extends Grid\r\n  constructor : () ->\r\n    super\r\n\r\n    @startRow = 0\r\n\r\n  # ## clear the layout and re-make the initial grid\r\n  # simplified because rows are auto-expanded in fit()\r\n  resetLayout : () ->\r\n    @layout = []\r\n    @startRow = 0\r\n\r\n\r\n  # ## mark a certain area in the grid as occupied\r\n  # This also checks for new rows, which is not checked in Grid\r\n  # @param `x` column index\r\n  # @param `y` row index\r\n  # @param `W` column width\r\n  # @param `h` row size\r\n  occupy : ( x, y, w, h ) ->\r\n    for c in [x...(w+x)]\r\n      for r in [y...(h+y)]\r\n        if not @layout[r]? then @layout[r] = []\r\n        @layout[ r ][ c ] = 1\r\n\r\n    return @\r\n\r\n  # ## optimize the iteration by starting at a row that has free cells\r\n  findStartRow : () ->\r\n    index = @startRow\r\n    for r in [@startRow...@rows]\r\n      index = r\r\n      for c in [0...@columns]\r\n        if @layout[r]?\r\n          if !@layout[r][c]? or @layout[r][c] <= 0 then return index\r\n\r\n    return index\r\n\r\n  # ## fit this area within the grid. This expands new rows to fit more items as needed.\r\n  # @param `width` number of columns\r\n  # @param `height` number of rows\r\n  # @return an object with properties `row` and `column` to specify the top left position, `columnSize` and `rowSize` to specify the resulting size in grid units, and `bound` which is the actual area as a Rectangle object.\r\n  fit : ( cols, rows ) ->\r\n\r\n    # find column size, bound by maximum columns in the grid\r\n    colSize = Math.min( cols, @columns )\r\n\r\n    # go through each grid cell\r\n    # each row\r\n    for currRow in [@startRow...@rows]\r\n\r\n      colCount = colSize # counter to find available columns\r\n      freeCol = 0 # start position of first free column\r\n\r\n      # if this is the last row, create more rows to fit\r\n      if currRow+rows >= @rows then @rows += (rows)\r\n\r\n      # create new row if it does not exist\r\n      if not @layout[currRow]? then @layout[currRow] = []\r\n\r\n      # each column\r\n      for currCol in [0...@columns]\r\n        cell = @layout[currRow][currCol]\r\n\r\n        # if cell is filled\r\n        if cell? and cell > 0\r\n          freeCol = currCol+1 # this column is not free\r\n          colCount = colSize # reset colCount if it's counting\r\n\r\n        # if cell is not filled\r\n        else\r\n\r\n          # see if the next one fits\r\n          colCount--\r\n\r\n          # can fit all\r\n          if colCount is 0\r\n\r\n            # check for the edge case where subsequent rows are already occupied\r\n            allRowsFree = true\r\n            if rows > 1\r\n              for rc in [currRow...(currRow+rows)]\r\n                if rc <= @rows and @layout[rc]? and @layout[rc][freeCol] > 0\r\n                  allRowsFree = false\r\n                  break\r\n\r\n            # return cell only when rows and columns are free\r\n            if allRowsFree\r\n\r\n              # mark this area as occupied\r\n              @occupy( freeCol,  currRow, colSize, rows )\r\n\r\n              # optimize looping by finding next start row\r\n              if currRow > @startRow then @startRow = @findStartRow()\r\n\r\n              # calculate the bounding box\r\n              b = new Rectangle( @$add( @cell.size.$multiply( freeCol, currRow ) ) ) # top left\r\n              b.resizeTo( @cell.size.$multiply( colSize, rows ) ) # size\r\n\r\n              return {\r\n                row: currRow\r\n                column: freeCol\r\n                columnSize: colSize\r\n                rowSize: rows\r\n                bound: b\r\n              }\r\n\r\n    # cannot fit\r\n    console.error( \"cannot fit #{currRow} #{freeCol} #{cols} #{rows}\" )\r\n    return false\r\n\r\n\r\n# namespace\r\nthis.GridCascade = GridCascade"]}