{"version":3,"sources":["Noise.coffee"],"names":[],"mappings":"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","file":"Noise.js","sourceRoot":"/source/","sourcesContent":["class Noise extends Vector\r\n\r\n  # Perlin noise implementation based on Stefan Gustavson's java implementation\r\n  # http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\r\n  # http://webstaff.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java\r\n  # coffeescript based on sj26's simplex port: https://gist.github.com/sj26/6145489\r\n\r\n  grad3: [\r\n    [1,1, 0], [-1,1, 0], [1,-1,0], [-1,-1,0],\r\n    [1,0, 1], [-1, 0, 1], [1,0,-1], [-1,0,-1],\r\n    [0, 1,1], [ 0,-1,1], [0,1,-1], [ 0,-1,-1]\r\n  ]\r\n\r\n  simplex: [\r\n    [0,1,2,3], [0,1,3,2], [0,0,0,0], [0,2,3,1], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [1,2,3,0], [0,2,1,3], [0,0,0,0], [0,3,1,2], [0,3,2,1]\r\n    [0,0,0,0], [0,0,0,0], [0,0,0,0], [1,3,2,0], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [1,2,0,3], [0,0,0,0], [1,3,0,2], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [2,3,0,1], [2,3,1,0], [1,0,2,3], [1,0,3,2], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [2,0,3,1], [0,0,0,0], [2,1,3,0], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [2,0,1,3], [0,0,0,0], [0,0,0,0], [0,0,0,0], [3,0,1,2], [3,0,2,1]\r\n    [0,0,0,0], [3,1,2,0], [2,1,0,3], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [3,1,0,2], [0,0,0,0], [3,2,0,1], [3,2,1,0]\r\n  ]\r\n\r\n  constructor: () ->\r\n    super\r\n\r\n    @p = [151,160,137,91,90,15,\r\n         131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\r\n         190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\r\n         88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,\r\n         77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\r\n         102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,\r\n         135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,\r\n         5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\r\n         223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,\r\n         129,22,39,253,9,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,\r\n         251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\r\n         49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\r\n         138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\r\n    ]\r\n\r\n    # To remove the need for index wrapping, double the permutation table length\r\n    @perm = (@p[i & 255] for i in [0...512])\r\n\r\n\r\n  # ## Generate a different noise by seeding\r\n  # @param `seed` a value between 0 to 1\r\n  # @eg `noise.seed(0.1)`, `noise.seed(Math.random())`\r\n  seed: ( seed ) ->\r\n    if(seed > 0 && seed < 1)\r\n      seed *= 65536\r\n\r\n    seed = Math.floor(seed)\r\n    if(seed < 256)\r\n      seed |= seed << 8\r\n\r\n    for i in [0..255]\r\n      v = if (i & 1) then @p[i] ^ (seed & 255) else @p[i] ^ ((seed>>8) & 255)\r\n      @perm[i] = @perm[i + 256] = v\r\n\r\n\r\n  _dot: (g, x, y) ->\r\n    g[0] * x + g[1] * y\r\n\r\n\r\n  # ## Get a 2d perlin noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.\r\n  # @param `x, y` optional x and y dimension, or leave empty to use this vector's x and y position\r\n  # @eg `noise.perlin2d()`, `noise.perlin2d(10.001, 0.1)`\r\n  # @return a value between 0 to 1\r\n  perlin2d: (xin=@x, yin=@y) ->\r\n\r\n    _fade = (f) -> f*f*f*(f*(f*6-15)+10)\r\n\r\n    i = Math.floor( xin ) % 255\r\n    j = Math.floor( yin ) % 255\r\n    x = xin - i\r\n    y = yin - j\r\n\r\n    n00 = @_dot(@grad3[ (i+@perm[j]) % 12 ], x, y )\r\n    n01 = @_dot(@grad3[ (i+@perm[j+1]) % 12 ], x, y-1 )\r\n    n10 = @_dot(@grad3[ (i+1+@perm[j]) % 12 ], x-1, y )\r\n    n11 = @_dot(@grad3[ (i+1+@perm[j+1]) % 12 ], x-1, y-1 )\r\n\r\n    tx = _fade(x);\r\n    return Util.lerp( Util.lerp(n00, n10, tx), Util.lerp(n01, n11, tx), _fade(y) )\r\n\r\n\r\n  # ## Get a 2d simplex noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.\r\n  # @param `x, y` optional x and y dimension, or leave empty to use this vector's x and y position\r\n  # @eg `noise.simplex2d()`, `noise.simplex2d(10.001, 0.1)`\r\n  # @return a value between -1 to 1\r\n  simplex2d: (xin=@x, yin=@y) ->\r\n\r\n    # Skew the input space to determine which simplex cell we're in\r\n    F2 = 0.5*(Math.sqrt(3.0)-1.0)\r\n    s = (xin+yin)*F2 # Hairy factor for 2D\r\n    i = Math.floor(xin+s)\r\n    j = Math.floor(yin+s)\r\n    G2 = (3.0-Math.sqrt(3.0))/6.0\r\n    t = (i+j)*G2\r\n\r\n    # Unskew the cell origin back to (x,y) space\r\n    X0 = i-t\r\n    Y0 = j-t\r\n\r\n    # The x,y distances from the cell origin\r\n    x0 = xin-X0\r\n    y0 = yin-Y0\r\n\r\n    # For the 2D case, the simplex shape is an equilateral triangle.\r\n    # Determine which simplex we are in.\r\n    # Offsets for second (middle) corner of simplex in (i,j) coords\r\n    if x0 > y0\r\n      # lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n      i1=1\r\n      j1=0\r\n    else\r\n      # upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n      i1=0\r\n      j1=1\r\n\r\n    # A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n    # a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n    # c = (3-Math.sqrt(3))/6\r\n\r\n    x1 = x0 - i1 + G2 # Offsets for middle corner in (x,y) unskewed coords\r\n    y1 = y0 - j1 + G2\r\n    x2 = x0 - 1.0 + 2.0 * G2 # Offsets for last corner in (x,y) unskewed coords\r\n    y2 = y0 - 1.0 + 2.0 * G2\r\n\r\n    # Work out the hashed gradient indices of the three simplex corners\r\n    ii = i & 255\r\n    jj = j & 255\r\n    gi0 = @perm[ii+@perm[jj]] % 12\r\n    gi1 = @perm[ii+i1+@perm[jj+j1]] % 12\r\n    gi2 = @perm[ii+1+@perm[jj+1]] % 12\r\n\r\n    # Calculate the contribution from the three corners\r\n    t0 = 0.5 - x0*x0-y0*y0\r\n    if t0 < 0\r\n      n0 = 0.0\r\n    else\r\n      t0 *= t0\r\n      n0 = t0 * t0 * @_dot(@grad3[gi0], x0, y0)  # (x,y) of grad3 used for 2D gradient\r\n\r\n    t1 = 0.5 - x1*x1-y1*y1\r\n    if t1 < 0\r\n      n1 = 0.0\r\n    else\r\n      t1 *= t1\r\n      n1 = t1 * t1 * @_dot(@grad3[gi1], x1, y1)\r\n\r\n    t2 = 0.5 - x2*x2-y2*y2\r\n    if t2 < 0\r\n      n2 = 0.0\r\n    else\r\n      t2 *= t2\r\n      n2 = t2 * t2 * @_dot(@grad3[gi2], x2, y2)\r\n\r\n    # Add contributions from each corner to get the final noise value.\r\n    # The result is scaled to return values in the interval [-1,1].\r\n    return 70.0 * (n0 + n1 + n2)\r\n\r\n"]}