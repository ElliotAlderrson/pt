{"version":3,"sources":["StripeBound.coffee"],"names":[],"mappings":"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","file":"StripeBound.js","sourceRoot":"/source/","sourcesContent":["# # A Bound subdivided in horizontal and vertical stripes\r\nclass StripeBound extends Rectangle\r\n\r\n  constructor: () ->\r\n    super\r\n\r\n    @frequency = new Point()\r\n    @stripes = new Point()\r\n    @method = 'frequency'\r\n\r\n    @mask = null\r\n\r\n  # ## Determines the number of stripes by frequency, and change method to frequency\r\n  setFrequency: (x, y) ->\r\n    @frequency = new Vector(x, y)\r\n    @method = 'frequency'\r\n\r\n  # ## Set number of strips by number, and change method to stripes\r\n  setStripes: (x, y) ->\r\n    @stripes = new Point(x,y)\r\n    @method = 'stripes'\r\n\r\n  # ## get stripes as boxes of {columns:[Pairs], rows:[Pairs]}\r\n  getStripes: () ->\r\n    size = @size()\r\n    result = {columns: [], rows: []}\r\n\r\n    # calculate frequency and spacing\r\n    freq = if @method == 'frequency' then @frequency.clone() else size.$divide( @stripes ).floor()\r\n    diff = size.$divide( freq )\r\n\r\n    # rows\r\n    for d in [0..freq.y-1]\r\n      dy = diff.y*d\r\n      p = new Pair(0, dy).connect(size.x, dy+diff.y).add(@)\r\n      p.p1.add(@)\r\n      result.rows.push( p )\r\n\r\n    # columns\r\n    for d in [0..freq.x-1]\r\n      dx = diff.x*d\r\n      p = new Pair(dx, 0).connect(dx+diff.x+0.5, size.y).add(@)\r\n      p.p1.add(@)\r\n      result.columns.push( p )\r\n\r\n    return result\r\n\r\n  # ## get stripes as lines {columns:[Pairs], rows:[Pairs]}\r\n  getStripeLines: () ->\r\n    size = @size()\r\n    result = {columns: [], rows: []}\r\n\r\n    # calculate frequency and spaci   ng\r\n    freq = if @method == 'frequency' then @frequency.clone() else size.$divide( @stripes ).floor()\r\n    diff = size.$divide( freq )\r\n\r\n    # rows\r\n    for d in [0..freq.y]\r\n      dy = diff.y*d\r\n      p = new Pair(0, dy).connect(size.x, dy).add(@)\r\n      p.p1.add(@)\r\n      result.rows.push( p )\r\n\r\n    # columns\r\n    for d in [0..freq.x]\r\n      dx = diff.x*d\r\n      p = new Pair(dx, 0).connect(dx, size.y).add(@)\r\n      p.p1.add(@)\r\n      result.columns.push( p )\r\n\r\n    return result\r\n\r\n\r\n  # ## create a masking area for canvas clipping\r\n  # defaults to position in the center of the bound, unless anchor paramater is set\r\n  setMask: (w, h, anchor=false) ->\r\n    @mask = new Rectangle(@x, @y)\r\n    sz = @size()\r\n\r\n    # center it if no anchor point is set\r\n    if !anchor\r\n      diff = sz.$subtract( w, h ).divide(2)\r\n      anchor = new Point(@x+diff.x, @y+diff.y)\r\n    else\r\n      anchor = @.$add(anchor)\r\n\r\n    # position and set size\r\n    @mask.set( anchor.x, anchor.y).size(w, h)\r\n\r\n\r\n  # ## anchor mask to bound's origin position\r\n  anchorMask: () ->\r\n    d = @.$subtract( @mask)\r\n    @.moveBy(d)\r\n    @mask.moveBy(d)\r\n\r\n# namespace\r\nthis.StripeBound = StripeBound"]}