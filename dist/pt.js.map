{"version":3,"sources":["pt.coffee"],"names":[],"mappings":"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","file":"pt.js","sourceRoot":"/source/","sourcesContent":["# ### A list of useful constant values for calculations and labeling.\r\nclass Const\r\n\r\n  # ## represents the xy plane\r\n  @xy = 'xy'\r\n\r\n  # ## represents the yz plane\r\n  @yz = 'yz'\r\n\r\n  # ## reporesents the xz plane\r\n  @xz = 'xz'\r\n\r\n  # ## represents xyz space\r\n  @xyz = 'xyz'\r\n\r\n  # ## represents identical point or value\r\n  @identical = -1\r\n\r\n  # ## represents right position or direction\r\n  @right = 3\r\n\r\n  # ## represents bottom right position or direction\r\n  @bottom_right = 4\r\n\r\n  # ## represents bottom position or direction\r\n  @bottom = 5\r\n\r\n  # ## represents bottom left position or direction\r\n  @bottom_left = 6\r\n\r\n  # ## represents left position or direction\r\n  @left = 7\r\n\r\n  # ## represents top left position or direction\r\n  @top_left = 0\r\n\r\n  # ## represents top position or direction\r\n  @top = 1\r\n\r\n  # ## represents top right position or direction\r\n  @top_right = 2\r\n\r\n  # ## an array of strings to label position constants above. Eg, `Const.sideLabels[ Const.top_left]` will return the string \"top left\"\r\n  @sideLabels = [\"identical\", \"right\", \"bottom right\", \"bottom\", \"bottom left\", \"left\", \"top left\", \"top\", \"top right\"]\r\n\r\n  # ## represents an arbitrary very small number. It is set as 0.0001 here.\r\n  @epsilon  = 0.0001\r\n\r\n  # ## pi radian (180 deg)\r\n  @pi = Math.PI\r\n\r\n  # ## two pi radian (360deg)\r\n  @two_pi  = 6.283185307179586\r\n\r\n  # ## half pi radian (90deg)\r\n  @half_pi  = 1.5707963267948966\r\n\r\n  # ## pi/4 radian (45deg)\r\n  @quarter_pi  = 0.7853981633974483\r\n\r\n  # ## pi/180 = 1 degree in radian\r\n  @one_degree = 0.017453292519943295\r\n\r\n  # ## multiply this constant with a radian to get a degree\r\n  @rad_to_deg = 57.29577951308232\r\n\r\n  # ## multiply this constant with a degree to get a radian\r\n  @deg_to_rad = 0.017453292519943295\r\n\r\n  # ## Gravity acceleration (unit = m/s^2) and gravity force (unit = Newton) on 1kg of mass.\r\n  @gravity = 9.81\r\n\r\n  # ## 1 Newton = 0.10197 Kilogram-force\r\n  @newton = 0.10197\r\n\r\n  # ## Gaussian constant (1 / Math.sqrt(2 * Math.PI))\r\n  @gaussian = 0.3989422804014327;\r\n\r\n\r\n\r\n\r\n# namespace\r\nthis.Const = Const\n# ### Functions to calculate various Matrix transformations\r\nclass Matrix\r\n\r\n  # ## Get a 3x3 matrix for 2D rotation around an anchor point\r\n  # @param `radian` rotation angle in radian\r\n  # @param `anchor` anchor point of rotation\r\n  # @return an array representing a 3x3 matrix. Apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @rotateAnchor2D: ( radian, anchor, axis=Const.xy ) ->\r\n    a = anchor.get2D( axis )\r\n    cosA = Math.cos( radian )\r\n    sinA = Math.sin( radian )\r\n    return [\r\n      cosA, sinA, 0\r\n      -sinA, cosA, 0\r\n      a.x*(1-cosA) + a.y*sinA, a.y*(1-cosA)-a.x*sinA, 1\r\n    ]\r\n\r\n\r\n  # ## Get a 3x3 matrix to reflect a point along a line. See also `Line.reflect()` for a potentially simpler calculation\r\n  # @param `line` the path to define the reflection\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @reflectAnchor2D: ( line, axis=Const.xy ) ->\r\n    inc = line.intercept( axis )\r\n    ang2 = Math.atan( inc.slope ) * 2\r\n    cosA = Math.cos( ang2 )\r\n    sinA = Math.sin( ang2 )\r\n    return [\r\n      cosA, sinA, 0\r\n      sinA, -cosA, 0\r\n      -inc.yi*sinA, inc.yi + inc.yi*cosA, 1\r\n    ]\r\n\r\n\r\n  # ## Get a 3x3 matrix for 2D shear from an anchor point\r\n  # @param `sx, sy` shear scale values, usually between -1 to 1, where 0 means no change in shear.\r\n  # @param `anchor` anchor point of shearing\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @shearAnchor2D: (sx, sy, anchor, axis=Const.xy  ) ->\r\n    a = anchor.get2D( axis )\r\n    tx = Math.tan( sx )\r\n    ty = Math.tan( sy )\r\n\r\n    return [\r\n      1, tx, 0\r\n      ty, 1, 0\r\n      -a.y*ty, -a.x*tx, 1\r\n    ]\r\n\r\n\r\n  # ## Get a 3x3 matrix for 2D scale from an anchor point\r\n  # @param `sx, sy` horizontal and vertical scale values, which are usually between 0 to N, where 1 means no change in scale.\r\n  # @param `anchor` anchor point of scaling\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @scaleAnchor2D: (sx, sy, anchor, axis=Const.xy ) ->\r\n    a = anchor.get2D( axis )\r\n    return [\r\n      sx, 0, 0,\r\n      0, sy, 0,\r\n      -a.x*sx + a.x, -a.y*sy + a.y, 1\r\n    ]\r\n\r\n\r\n  # ## Get a 3x3 scale matrix\r\n  # @param `x, y` horizontal and vertical scale values, which are usually between 0 to N, where 1 means no change in scale.\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @scale2D: ( x, y ) ->\r\n    return [\r\n      x, 0, 0,\r\n      0, y, 0,\r\n      0, 0, 1\r\n    ]\r\n\r\n\r\n  # ## Get a 3x3 shear matrix\r\n  # @param `x, y` shear scale values, usually between -1 to 1, where 0 means no change in shear.\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @shear2D: (x, y ) ->\r\n    return [\r\n      1, Math.tan(x), 0\r\n      Math.tan(y), 1, 0\r\n      0, 0, 1\r\n    ]\r\n\r\n  # ## Get a 3x3 rotate matrix\r\n  # @param `cosA, sinA` cosine and sine of the rotation angle.\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @rotate2D: ( cosA, sinA ) ->\r\n    return [\r\n      cosA, sinA, 0,\r\n      -sinA, cosA, 0,\r\n      0, 0, 1\r\n    ]\r\n\r\n\r\n  # ## Get a 3x3 translate matrix.\r\n  # @param `x, y` horizontal and vertical offsets to move by\r\n  # @return an array representing a 3x3 matrix. apply this matrix to a homongeneous vector (x,y,1) to rotate it.\r\n  @translate2D: ( x, y ) ->\r\n    return [\r\n      1, 0, 0\r\n      0, 1, 0\r\n      x, y, 1\r\n    ]\r\n\r\n\r\n  # ## Calculate a 2D transform by applying matrix to a homogeneous vector\r\n  # @param `pt` a Point to transform\r\n  # @param `m` an array representing 3x3 matrix\r\n  # @param `byValue` a boolean value to update the values of `pt` parameter directly if set to true. If false, returns a new Vector object instead. Default is false.\r\n  # @return a Vector object, or the `pt` object if `byValue` is true\r\n  @transform2D: (pt, m, axis=Const.xy, byValue=false) ->\r\n    v = pt.get2D( axis )\r\n    x = v.x * m[0] + v.y * m[3] + m[6];\r\n    y = v.x * m[1] + v.y * m[4] + m[7];\r\n    # z = v.x * m[2] + v.y * m[5] + m[8];\r\n    v.x = x\r\n    v.y = y\r\n    # v.z = z\r\n    v = v.get2D(axis, true)\r\n\r\n    if !byValue\r\n      pt.set(v)\r\n      return pt\r\n\r\n    return v\r\n\r\n\r\n# namescope\r\nthis.Matrix = Matrix\n# ### A collection of static methods and helper classes to get things done.\r\nclass Util\r\n\r\n  # ## A static function to convert degrees to radian\r\n  # @param `degree` angle in degrees. ie, 180 degrees = Math.PI radian\r\n  @toRadian : ( angle ) -> angle * Const.deg_to_rad\r\n\r\n\r\n  # ## A static function to convert radian to degrees\r\n  # @param `radian` angle in radian. ie, Math.PI radian = 180 degrees\r\n  @toDegree : ( radian ) -> radian * Const.rad_to_deg\r\n\r\n\r\n  # ## A static function to convert a color value (0-255) to hex \"FF\". See also `Color.hex()` and `Color.rgba()`\r\n  # @param `number` a value between 0 to 255\r\n  # @return a string with 2 hex digits, such as \"FF\" or \"00\"\r\n  @toHexColor: (number) ->\r\n    h = Math.floor(number).toString(16)\r\n    return if h.length is 1 then \"0\"+h else h\r\n\r\n\r\n  # ## A static function to convert a hex string to rgb value or string. See also `Color.parseHex()`\r\n  # @param hexString hex string such as \"FF9900\" or \"#FF9900\"\r\n  # @param asRGBA a boolean value to set if the return value should be `rgba(...)` string\r\n  # @param opacity optional opacity value between 0 to 1 for `rgba(...)` output\r\n  # @eg `Util.toRGBColor(\"\")`\r\n  @toRGBColor: (hexString, asRGBA=false, opacity=1) ->\r\n    if hexString[0] == \"#\" then hexString = hexString.substr(1)\r\n\r\n    if hexString.length == 3\r\n      r = parseInt( hexString[0]+hexString[0], 16 )\r\n      g = parseInt( hexString[1]+hexString[1], 16 )\r\n      b = parseInt( hexString[2]+hexString[2], 16 )\r\n    else if hexString.length >= 6\r\n      r = parseInt( hexString[0]+hexString[1], 16 )\r\n      g = parseInt( hexString[2]+hexString[3], 16 )\r\n      b = parseInt( hexString[4]+hexString[5], 16 )\r\n    else\r\n      r = 0\r\n      g = 0\r\n      b = 0\r\n\r\n    return if asRGBA then \"rgba(#{r},#{g},#{b},#{opacity})\" else [r,g,b,opacity]\r\n\r\n\r\n  # ## A static function to limit a value (such as an angle, can be negative) as the modulus between 0 to max, or between -max/2 to max/2\r\n  # @param `val` the value to be bound\r\n  # @param `max` maximum value as boundary\r\n  # @param `positive` a boolean value. If set to `true`, the return value will be between 0 to max; if `false`, return value will be between -max/2 to max/2. Default is `false`.\r\n  # @return a value either (0 to max) or (-max/2 to max/2)\r\n  @bound : ( val, max, positive=false ) ->\r\n    a = val % max\r\n    half = max / 2\r\n\r\n    if a>half\r\n      a -= max\r\n    else if a < -half\r\n      a += max\r\n\r\n    if positive\r\n      if a<0 then return a+max else return a\r\n    else\r\n      return a\r\n\r\n\r\n  # ## A static function to limit an angle\r\n  # @param `ang` an angle to be bound\r\n  # @param `positive` a boolean value. If set to `true`, the return value will be between 0 to max; if `false`, return value will be between -max/2 to max/2. Default is `false`.\r\n  # @return an angle either between 0 to 360, or between -180 to 180 degrees\r\n  @boundAngle : ( ang, positive ) ->\r\n    Util.bound( ang, 360, positive)\r\n\r\n\r\n  # ## A static function similar to `Util.boundAngle` but limit a radian angle between 0 to 2*PI, or between -PI to PI\r\n  @boundRadian : ( radian, positive ) ->\r\n    Util.bound( radian, Const.two_pi, positive )\r\n\r\n\r\n  # ## A static function to get a bounding box for a list of points\r\n  # @param `points` an array of points\r\n  # @param `is3D` a boolean value to specify if the points are 3D. Default is false which means the points are 2D.\r\n  # @return an Rectangle object as bounding box\r\n  @boundingBox: ( points, is3D=false ) ->\r\n    minPt = new Point( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY)\r\n    maxPt = new Point( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY)\r\n    for p in points\r\n      if p.x < minPt.x then minPt.x = p.x\r\n      if p.y < minPt.y then minPt.y = p.y\r\n      if p.x > maxPt.x then maxPt.x = p.x\r\n      if p.y > maxPt.y then maxPt.y = p.y\r\n\r\n      if is3D\r\n        if p.z < minPt.z then minPt.z = p.z\r\n        if p.z > maxPt.z then maxPt.z = p.z\r\n\r\n    return new Rectangle( minPt ).to( maxPt )\r\n\r\n\r\n  # ## A static function to get linear interpolation between two values\r\n  # @param `a, b` first and second values\r\n  # @param `t` a value between 0 to 1\r\n  # return the interpolated value\r\n  @lerp: ( a, b, t ) -> return (1-t) * a + t * b\r\n\r\n\r\n  # ## Get a centroid point which is the averge positions of a list of points.\r\n  # @param `points` an array of points\r\n  # @return the centroid point as Vector\r\n  @centroid: (points) ->\r\n      c = new Vector()\r\n      for p in points\r\n        c.add( p )\r\n      return c.divide( points.length )\r\n\r\n\r\n  # ## Check if two numbers are equal within a threshold\r\n  # @param `a, b` two numbers to compare\r\n  # @param `threshold` the smallest difference allowed to be considered as same. Default is `Const.epsilon`.\r\n  # @return a boolean value where `true` means they are the same\r\n  @same : (a, b, threshold=Const.epsilon ) ->\r\n    ( Math.abs( a - b ) < threshold )\r\n\r\n\r\n  # ## Check is a number is within the range of two number\r\n  # @param `p` the number to check\r\n  # @param `a, b` two numbers to set the range\r\n  # @return a boolean value where `true` means the number is within range\r\n  @within: ( p, a, b) ->\r\n    return p >= Math.min(a, b) and p <= Math.max(a, b)\r\n\r\n\r\n  # ## Get a random value in between a range\r\n  # @param `a, b` two numbers to set a range. `b` is optional and defaults to 0.\r\n  # @return a random number within the range\r\n  @randomRange : (a, b=0) ->\r\n    r = if a > b then ( a - b ) else ( b - a )\r\n    return a + Math.random() * r\r\n\r\n\r\n  # ## Simple mixin implementataion\r\n  # @param `klass` the class to inject\r\n  # @param `mix` is the source mixin object\r\n  # @return the klass with mixin\r\n  @mixin : ( klass, mix ) ->\r\n    for k,v of mix\r\n      if mix.hasOwnProperty( k )\r\n        klass.prototype[k] = mix[k]\r\n    return klass\r\n\r\n\r\n  # ## A helper function to extend a class\r\n  # @param `klass` constructor function\r\n  # @param `parent` class to inherit\r\n  # @eg `function V() { Vector.call(this, arguments); }; Util.extend(V, Vector);`\r\n  # @return the extended class\r\n  @extend: (klass, parent) ->\r\n    klass.prototype = Object.create(parent.prototype)\r\n    klass.prototype.constructor = klass\r\n    return klass\r\n\r\n\r\n  # ## Given an array of Points (eg, in results of toArray() ), return an array of the points as copy\r\n  @clonePoints: (array) -> ( p.clone() for p in array )\r\n\r\n\r\n  # ## Rotate from an origin using canvas rendering context\r\n  # @param `ctx` canvas rendering context\r\n  # @param `bound` the bounding box as Rectangle object\r\n  # @param `radian` the angle in radian to rotate\r\n  # @param `origin` an optional Point object to specify the anchor point of rotation. If origin is false or not set, the anchor is at the center of the `bound` bounding box\r\n  # @param `mask` an optional Rectangle object as mask\r\n  @contextRotateOrigin : (ctx, bound, radian, origin=false, mask) ->\r\n\r\n    size =  bound.size()\r\n\r\n    if !origin\r\n      origin = size.$multiply(0.5)\r\n      origin.add(bound)\r\n\r\n    if mask\r\n      msz = mask.size()\r\n      Form.rect(ctx, mask)\r\n      ctx.clip()\r\n\r\n    ctx.translate( origin.x, origin.y )\r\n    ctx.rotate( radian )\r\n    ctx.translate( -origin.x, -origin.y)\r\n\r\n\r\n  # ## A static function to pre-calculate a sine and cosine table. To use this, convert radian to angle as an integer, and then get table index by finding modulus `angle%360`\r\n  # @return an object with `{sin, cos}` properties.\r\n  @sinCosTable: () ->\r\n    cos = []\r\n    sin = []\r\n    for i in [0..360] by 1\r\n        cos[i] = Math.cos( i * Math.PI / 180 )\r\n        sin[i] = Math.sin( i * Math.PI / 180 )\r\n    return {sin: sin, cos: cos}\r\n\r\n\r\n  # ## A static function which check if a random number from 0 to 1 is smaller than a user defined number\r\n  # @param `p` a value between 0 to 1\r\n  # @return a boolean value where true means a random number is smaller than the supplied parameter\r\n  @chance: (p) -> return (Math.random() < p);\r\n\r\n\r\n  # ## A static function to calculate Gaussian curve\r\n  @gaussian: (x, mean=0, sigma=1) ->\r\n    x = (x - mean) / sigma\r\n    return Const.gaussian * Math.exp( -0.5 * x * x) / sigma\r\n\r\n\r\n# namespace\r\nthis.Util = Util;\r\n\r\n\r\n    #    for i in [0...candidateCount]\r\n#      p = new Vector( bound.x + size.x * Math.random(), bound.y + size.y * Math.random() )\r\n#      candidates.push( {\r\n#        pt: p\r\n#        inner: new Rectangle( p.x-size.x/4, p.y-size.y/4).size( size.x/2, size.y/2 )\r\n#      })\r\n#\r\n#    best = null\r\n#    for c in candidates\r\n#      matches = (it for it in items when c.inner.intersectPoint( it ))\r\n##\r\n##        if matches.length == 0\r\n##          matches = (it for it in items when !c.inner.intersectPoint( it ))\r\n##\r\n#\r\n#\r\n#      if matches.length == 0\r\n#        best = c\r\n#\r\n#      _dist = -1\r\n#\r\n#      for w in matches\r\n#        dx = (w.x-c.pt.x)\r\n#        dy = (w.y-c.pt.y)\r\n#        dist = dx*dx + dy*dy\r\n#        if dist > _dist\r\n#          best = c\r\n#          _dist = dist\r\n\r\n#    return best\r\n\r\n\r\n\r\n\r\n#  @RK4Velocity: (c1, d1, func, dt, t) ->\r\n#\r\n#    a1 = func( c1, d1, 0, t)\r\n#\r\n#    c2 = _map( c1, d1, 0.5 )\r\n#    d2 = _map( d1, a1, 0.5 )\r\n#    a2 = func( c2, d2, dt/2, t)\r\n#\r\n#    c3 = _map( c1, d2, 0.5 )\r\n#    d3 = _map( d1, a2, 0.5 )\r\n#    a3 = func( c3, d3, dt/2, t)\r\n#\r\n#    c4 = _map( c1, d3, 1 )\r\n#    d4 = _map( d1, a3, 1 )\r\n#\r\n#    dc_dt = _map2( c1, c2, c3, c4).multiply( dt )\r\n#    dd_dt = _map2( d1, d2, d3, d4).multiply( dt )\r\n#\r\n#    _map = ( mc, md, f) ->\r\n#      new Vector(\r\n#        mc.x + f * md.x * dt,\r\n#        mc.y + f * md.y * dt,\r\n#        mc.z + f * md.z * dt\r\n#      )\r\n#\r\n#    _map2 = (m1, m2, m3, m4) ->\r\n#      new Vector(\r\n#        (m1.x + 2*(m2.x+m3.x) + m4.x) / 6\r\n#        (m1.y + 2*(m2.y+m3.y) + m4.y) / 6\r\n#        (m1.z + 2*(m2.z+m3.z) + m4.z) / 6\r\n#      )\r\n#\r\n#    return { c: dc_dt.add( c1 ), d: dd_dt.add( d1 ) }\r\n\r\n#  @RK4Particle: (p dt, t) ->\r\n#\r\n#    a1 = func( c1, d1, 0, t)\r\n#\r\n#    c2 = _map( c1, d1, 0.5 )\r\n#    d2 = _map( d1, a1, 0.5 )\r\n#    a2 = func( c2, d2, dt/2, t)\r\n#\r\n#    c3 = _map( c1, d2, 0.5 )\r\n#    d3 = _map( d1, a2, 0.5 )\r\n#    a3 = func( c3, d3, dt/2, t)\r\n#\r\n#    c4 = _map( c1, d3, 1 )\r\n#    d4 = _map( d1, a3, 1 )\r\n#\r\n#    dc_dt = _map2( c1, c2, c3, c4).multiply( dt )\r\n#    dd_dt = _map2( d1, d2, d3, d4).multiply( dt )\r\n#\r\n#    _map = ( mc, md, f) ->\r\n#      new Vector(\r\n#        mc.x + f * md.x * dt,\r\n#        mc.y + f * md.y * dt,\r\n#        mc.z + f * md.z * dt\r\n#      )\r\n#\r\n#    _map2 = (m1, m2, m3, m4) ->\r\n#      new Vector(\r\n#        (m1.x + 2*(m2.x+m3.x) + m4.x) / 6\r\n#        (m1.y + 2*(m2.y+m3.y) + m4.y) / 6\r\n#        (m1.z + 2*(m2.z+m3.z) + m4.z) / 6\r\n#      )\r\n#\r\n#    return { c: dc_dt.add( c1 ), d: dd_dt.add( d1 ) }\r\n\r\n#    x1 = x\r\n#    v1= v\r\n#    a1 = run(x1, v1, 0, t)\r\n#\r\n#    x2 = x.$add( v1.$multiply( dt / 2 ))\r\n#    v2 = v.$add( a1.$multiply( dt / 2 ))\r\n#    a2 = run(x2, v2, dt/2, t)\r\n#\r\n#    x3 = x.$add( v2.$multiply( dt / 2 ))\r\n#    v3 = v.$add( a2.$multiply( dt / 2 ))\r\n#    a3 = run(x3, v3, dt/2, t)\r\n#\r\n#    x4 = x.$add( v3.$multiply( dt ) )\r\n#    v4 = v.$add( a3.$multiply( dt ))\r\n#\r\n#    dxdt = x1.$add( x2.add(x3).multiply(2) ).add( x4 )\r\n#    dxdt.divide( 6 ).multiply( dt )\r\n#\r\n#    dvdt = v1.$add( v2.add(v3).multiply(2) ).add( v4 )\r\n#    dvdt.divide( 6 ).multiply( dt )\r\n#\r\n#    return { a: x.$add( dxdt ), b: v.$add( dvdt ) }\r\n\r\n\r\n  # ## Modified Euler (adopted from traer physics library)\r\n  # the derivative of c is d. If c is position, then d is velocity.\r\n  # dt = change in time, t = current time\r\n  # run = acceleration function(x, v, dt)\r\n#  @integrateEuler: (c, d, func, dt, t) ->\r\n#\r\n#    tt = 0.5*dt*dt\r\n#    a = func( c, d, dt, t)\r\n#\r\n#    c += d/dt\r\n#    c += a * tt\r\n#    d += a/dt\r\n#\r\n#    return { c: c, d: d }\r\n\n# ### Use a timer not to measure time, but to introduce rhythm. The conceptual hums of \"one two three, one two three\", when transfigured into patterns of sounds or words or dances, gives rise to various forms of aesthetic experiences. If time is a river, then timers are the mills we build along its banks.\r\nclass Timer\r\n\r\n  # ## Create a Timer\r\n  # @param `d` duration of the timer in milliseconds\r\n  constructor: ( d=1000 ) ->\r\n    @duration = d\r\n    @_time = 0\r\n    @_ease = (t,b,c,d) -> t/d\r\n    @_intervalID = -1\r\n\r\n\r\n  # ## Start or restart the timer\r\n  # @param `reset` a boolean value to restart the timer from the beginning if set to `true`.\r\n  start: (reset) ->\r\n    diff = Math.min( Date.now() - @_time, @duration)\r\n\r\n    if reset or diff >= @duration\r\n      @_time = Date.now()\r\n\r\n\r\n  # set an easing function to use in `check()`. See `Easing` class for a set of predefined easing functions\r\n  # @param `ease` an easing function with 4 parameters `(current_time, start_value, change_in_value, duration_time)` and must return a number between 0 to 1\r\n  setEasing: (ease) ->\r\n    @_ease = ease\r\n\r\n\r\n  # ## Check % of time that has elapsed currently.\r\n  # @return a number between 0 to 1\r\n  check: () ->\r\n    diff = Math.min( Date.now() - @_time, @duration)\r\n    return @_ease( diff, 0, 1, @duration )\r\n\r\n\r\n  # Track time (using `setInterval()`)\r\n  # @param `callback` a callback function which may include a `(t)` parameter to get current elapsed percentage (value between 0 to 1)\r\n  # @return the intervalID from `setInterval()`\r\n  track: ( callback ) ->\r\n    clearInterval( @_intervalID )\r\n    @start(true)\r\n    me = @\r\n    @_intervalID = setInterval( ( () ->\r\n      t = me.check()\r\n      callback( t )\r\n      if t >= 1 then clearInterval( me._intervalID )\r\n    ), 25 )\r\n    return @_intervalID\r\n\r\n\r\n\r\n# namespace\r\nthis.Timer = Timer\n# ### Fishes forget their rivers and lakes, said Chuang Tzu. Spaces or contexts give meanings to ideas and lives, but are often overlooked. In Pt, space represents an abstract context in which a point can be made visible in one form or another, and can be specified as an html canvas, a soundscape, or a graffiti robot on a wall. Space is where a concept meets its expression.\r\n\r\nclass Space\r\n\r\n  # ## Create a Space which is the context for displaying and animating elements. Extend this to create specific Spaces, for example, a space for HTML Canvas or SVG.\r\n  # @param `id` an id property to identify this space\r\n  constructor : ( id='space' ) ->\r\n\r\n    # ## A property to identify this space by name\r\n    @id = id\r\n\r\n    # ## A property to indicate the size of this space as a Vector\r\n    @size = new Vector()\r\n\r\n    # ## A property to indicate the center of this space as a Vector\r\n    @center = new Vector()\r\n\r\n    # animation properties\r\n    @_timePrev = 0 # record prev time\r\n    @_timeDiff = 0 # record prev time difference\r\n    @_timeEnd = -1 # end in milliseconds, -1 to play forever, 0 to end immediately\r\n\r\n    # ## A set of items in this space. An item should implement a function `animate()` and optionally another callback `onSpaceResize(w,h,evt)`, and will be assigned a property `animateID` automatically. (See `add()`)\r\n    @items = {}\r\n\r\n    # item properties\r\n    @_animID = -1\r\n    @_animCount = 0 # player key as increment\r\n    @_animPause = false\r\n    @_refresh = true # refresh on each frame\r\n\r\n\r\n  # ## set whether the rendering should be repainted on each frame\r\n  # @param `b` a boolean value to set whether to repaint each frame\r\n  # @demo space.refresh\r\n  # @return this space\r\n  refresh: (b) ->\r\n    @_refresh = b\r\n    return @\r\n\r\n\r\n  # ## set custom render function (on resize and other events)\r\n  # @return this space\r\n  render: ( context ) ->\r\n    return @\r\n\r\n\r\n  # ## resize the space. (not implemented)\r\n  resize: (w, h) ->\r\n\r\n\r\n  # ## clear all contents in the space (not implemented)\r\n  clear: () ->\r\n\r\n\r\n  # ## Add an item to this space. An item must define a callback function `animate( time, fps, context )` and will be assigned a property `animateID` automatically. An item can also optionally define a callback function `onSpaceResize( w, h, evt )`. Subclasses of Space may define other callback functions.\r\n  # @param an object with an `animate( time, fps, context )` function, and optionall a `onSpaceResize( w, h, evt )` function\r\n  # @demo space.add\r\n  # @return this space\r\n  add : (item) ->\r\n    if item.animate? and typeof item.animate is 'function'\r\n      k = @_animCount++\r\n      @items[k] = item\r\n      item.animateID = k\r\n\r\n      # if player has onSpaceResize defined, call the function\r\n      if item.onSpaceResize? then item.onSpaceResize(@size.x, @size.y)\r\n    else\r\n      throw \"a player object for Space.add must define animate()\"\r\n\r\n    return @\r\n\r\n\r\n  # ## Remove an item from this Space\r\n  # @param an object with an auto-assigned `animateID` property\r\n  # @return this space\r\n  remove : (item) ->\r\n    delete @items[ item.animateID ]\r\n    return @\r\n\r\n\r\n  # ## Remove all items from this Space\r\n  # @return this space\r\n  removeAll : () ->\r\n    @items = {}\r\n    return @\r\n\r\n\r\n  # ## Main play loop. This implements window.requestAnimationFrame and calls it recursively. Override this `play()` function to implemenet your own animation loop.\r\n  # @param `time` current time\r\n  # @return this space\r\n  play : (time=0) ->\r\n\r\n    # use fat arrow here, because rAF callback will change @ to window\r\n    @_animID = requestAnimationFrame( (t) => @play(t) )\r\n\r\n    # if pause\r\n    if @_animPause then return\r\n\r\n    # calc time passed since prev frame\r\n    @_timeDiff = time - @_timePrev\r\n\r\n    # animate this frame\r\n    try\r\n      @_playItems( time )\r\n    catch err\r\n      cancelAnimationFrame( @_animID )\r\n      console.error( err.stack )\r\n      throw err\r\n\r\n\r\n    # store time\r\n    @_timePrev = time\r\n\r\n    return @\r\n\r\n\r\n  # Main animate function. This calls all the items to perform\r\n  # @param `time` current time\r\n  # @return this space\r\n  _playItems : (time) ->\r\n\r\n    # clear before draw if refresh is true\r\n    if @_refresh then @clear()\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    return @\r\n\r\n\r\n  # ## Pause the animation\r\n  # @param `toggle` a boolean value to set if this function call should be a toggle (between pause and resume)\r\n  # @return this space\r\n  pause: ( toggle=false) ->\r\n    @_animPause = if toggle then !@_animPause else true\r\n    return @\r\n\r\n\r\n  # ## Resume the paused animation\r\n  # @return this space\r\n  resume: () ->\r\n    @_animPause = false\r\n    return @\r\n\r\n\r\n  # ## Specify when the animation should stop: immediately, after a time period, or never stops.\r\n  # @param `t` a value in millisecond to specify a time period to play before stopping, or `-1` to play forever, or `0` to end immediately. Default is 0 which will stop the animation immediately.\r\n  # @return this space\r\n  stop : ( t=0 ) ->\r\n    @_timeEnd = t\r\n    return @\r\n\r\n\r\n  # ## Play animation loop, and then stop after `duration` time has passed.\r\n  # @param `duration` a value in millisecond to specify a time period to play before stopping, or `-1` to play forever\r\n  playTime: (duration=5000) ->\r\n    @play()\r\n    @stop( duration )\r\n\r\n\r\n\r\n# namespace\r\nthis.Space = Space\r\n\r\n\n# ### CanvasSpace is a space that represents a html canvas. It creates a new canvas or get an existing one in DOM by its `id` attribute. It also provide methods specific to html canvas, such as tracking resize and mouse position.\r\n\r\nclass CanvasSpace extends Space\r\n\r\n  # ## Create a CanvasSpace which represents a HTML Canvas Space\r\n  # @param `id` an id property which refers to the \"id\" attribute of the canvas element in DOM. If no canvas element with this id is found, a new canvas element will be created.\r\n  # @param `bgcolor` a background color string to specify the canvas background. Default is `false` which shows a transparent background.\r\n  # @param `context` a string of canvas context type, such as \"2d\" or \"webgl\". Default is \"2d\"\r\n  constructor : ( id='pt_space', bgcolor=false, context='2d' ) ->\r\n    super\r\n\r\n    # ## A property to store canvas DOM element\r\n    @space = document.querySelector(\"#\"+@id)\r\n\r\n    # ## A boolean property to track if the canvas element is added to dom or not\r\n    @appended = true\r\n\r\n    # either get existing one in the DOM or create a new one\r\n    if !@space\r\n      @space = document.createElement(\"canvas\")\r\n      @space.setAttribute(\"id\", @id)\r\n      @appended = false\r\n\r\n    # Track mouse dragging\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n    # A property to store canvas background color\r\n    @bgcolor = bgcolor\r\n\r\n    # A property to store canvas rendering contenxt\r\n    @ctx = @space.getContext( context )\r\n\r\n\r\n  # ## Place a new canvas element into a container dom element. When canvas is ready, a \"ready\" event will be fired. Track this event with `space.canvas.addEventListener(\"ready\")`\r\n  # @param `parent_id` the DOM element into which the canvas element should be appended\r\n  # @param `readyCallback` a callback function with parameters `width`, `height`, and `canvas_element`, which will get called when canvas is appended and ready.\r\n  # @return this CanvasSpace\r\n  display: ( parent_id=\"#pt\", readyCallback ) ->\r\n    if not @appended\r\n\r\n      # frame\r\n      frame = document.querySelector(parent_id)\r\n      frame_rect = frame.getBoundingClientRect()\r\n\r\n      if frame\r\n        # resize to fit frame\r\n        @resize( frame_rect.width, frame_rect.height )\r\n\r\n        # listen for window resize event and callback\r\n        window.addEventListener( 'resize',\r\n          ((evt) ->\r\n            frame_rect = frame.getBoundingClientRect()\r\n            @resize( frame_rect.width, frame_rect.height, evt ) ).bind(this)\r\n        )\r\n\r\n        # add to parent dom if not existing\r\n        if @space.parentNode != frame\r\n          frame.appendChild( @space )\r\n\r\n        @appended = true\r\n\r\n        # fire ready event\r\n        setTimeout( (\r\n            () ->\r\n              @space.dispatchEvent( new Event('ready') )\r\n              if readyCallback\r\n                readyCallback( frame_rect.width, frame_rect.height,  @space )\r\n\r\n          ).bind(@)\r\n        )\r\n\r\n\r\n      else\r\n        throw 'Cannot add canvas to element '+parent_id\r\n\r\n    return this\r\n\r\n\r\n  # ## This overrides Space's `resize` function. It's a callback function for window's resize event. Keep track of this with `onSpaceResize(w,h,evt)` callback in your added objects.\r\n  # @demo canvasspace.resize\r\n  # @return this CanvasSpace\r\n  resize: (w, h, evt) ->\r\n\r\n    @size.set(w, h)\r\n    @center = new Vector( w/2, h/2 )\r\n    @space.setAttribute( 'width', Math.floor(w) )\r\n    @space.setAttribute( 'height', Math.floor(h) )\r\n\r\n    # player resize callback\r\n    for k, p of @items\r\n      if p.onSpaceResize? then p.onSpaceResize(w, h, evt)\r\n\r\n    # repaint canvas\r\n    @render( @ctx )\r\n\r\n    return @\r\n\r\n\r\n  # ## Clear the canvas with its background color. Overrides Space's `clear` function.\r\n  # @param `bg` Optionally specify a custom background color. If evaluated to false, it will use its `bgcolor` property as background color.\r\n  # @return this CanvasSpace\r\n  clear: ( bg ) ->\r\n\r\n    if bg then @bgcolor = bg\r\n\r\n    lastColor = @ctx.fillStyle\r\n\r\n    if @bgcolor\r\n      @ctx.fillStyle = @bgcolor;\r\n      @ctx.fillRect( 0, 0, @size.x, @size.y )\r\n    else\r\n      @ctx.clearRect( 0, 0, @size.x, @size.y )\r\n\r\n    @ctx.fillStyle = lastColor\r\n\r\n    return @\r\n\r\n\r\n\r\n  # ## Overrides Space's `animate` function for canvas\r\n  # @param `time` current time\r\n  # @return this CanvasSpace\r\n  animate : (time) ->\r\n\r\n\r\n    @ctx.save()\r\n\r\n    if @_refresh then @clear()\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    @ctx.restore()\r\n\r\n    return @\r\n\r\n\r\n  # ## Bind event listener in canvas element, for events such as mouse events\r\n  # @param `evt` Event object\r\n  # @param `callback` a callback function for this event\r\n  bindCanvas: ( evt, callback ) ->\r\n    @space.addEventListener( evt, callback )\r\n\r\n\r\n  # ## A convenient method to bind (or unbind) all mouse events in canvas element. All item added to `items` property that implements an `onMouseAction` callback will receive mouse event callbacks. The types of mouse actions are: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".\r\n  # @param `bind` a boolean value to bind mouse events if set to `true`. If `false`, all mouse events will be unbound. Default is true.\r\n  # @demo canvasspace.bindMouse\r\n  bindMouse: ( _bind=true ) ->\r\n    if _bind\r\n      @space.addEventListener( \"mousedown\", @_mouseDown.bind(@) )\r\n      @space.addEventListener( \"mouseup\", @_mouseUp.bind(@) )\r\n      @space.addEventListener( \"mouseover\", @_mouseOver.bind(@) )\r\n      @space.addEventListener( \"mouseout\", @_mouseOut.bind(@) )\r\n      @space.addEventListener( \"mousemove\", @_mouseMove.bind(@) )\r\n    else\r\n      @space.removeEventListener( \"mousedown\", @_mouseDown.bind(@) )\r\n      @space.removeEventListener( \"mouseup\", @_mouseUp.bind(@) )\r\n      @space.removeEventListener( \"mouseover\", @_mouseOver.bind(@) )\r\n      @space.removeEventListener( \"mouseout\", @_mouseOut.bind(@) )\r\n      @space.removeEventListener( \"mousemove\", @_mouseMove.bind(@) )\r\n\r\n    \r\n\r\n  # go through all item in `items` and call its onMouseAction callback function\r\n  _mouseAction: (type, evt) ->\r\n    for k, v of @items\r\n      px = evt.offsetX || evt.layerX;\r\n      py = evt.offsetY || evt.layerY;\r\n      if v.onMouseAction? then v.onMouseAction( type, px, py, evt )\r\n\r\n\r\n  # mouse down action\r\n  _mouseDown: (evt) ->\r\n    @_mouseAction( \"down\", evt )\r\n    @_mdown = true\r\n\r\n\r\n  # mouse up action\r\n  _mouseUp: (evt) ->\r\n    @_mouseAction( \"up\", evt )\r\n    if @_mdrag then @_mouseAction( \"drop\", evt )\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n\r\n  # mouse move action\r\n  _mouseMove: (evt) ->\r\n    @_mouseAction( \"move\", evt )\r\n    if @_mdown\r\n      @_mdrag = true\r\n      @_mouseAction( \"drag\", evt )\r\n\r\n\r\n  # mouse over action\r\n  _mouseOver: (evt) ->\r\n    @_mouseAction( \"over\", evt )\r\n\r\n\r\n  # mouse out action\r\n  _mouseOut: (evt) ->\r\n    @_mouseAction( \"out\", evt )\r\n    if @_mdrag then @_mouseAction( \"drop\", evt )\r\n    @_mdrag = false\r\n\r\n\r\n# namescape\r\nthis.CanvasSpace = CanvasSpace\n\r\nclass DOMSpace extends Space\r\n\r\n  constructor: ( id='pt_space', bgcolor=false, context='html' ) ->\r\n    super\r\n\r\n    # ## A property to store the DOM element\r\n    @space = document.querySelector(\"#\"+@id)\r\n    @css = {width: \"100%\", height: \"100%\"};\r\n\r\n    # ## A boolean property to track if the element is added to container or not\r\n    @appended = true\r\n\r\n    # either get existing one in the DOM or create a new one\r\n    if !@space then @_createSpaceElement()\r\n\r\n    # Track mouse dragging\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n    # A property to store canvas background color\r\n    @bgcolor = bgcolor\r\n\r\n    # A property to store rendering contenxt\r\n    @ctx = {}\r\n\r\n\r\n  # A private function to create the canvas element. By default this will create a <div>. Override to create a different element.\r\n  _createSpaceElement: () ->\r\n    @space = document.createElement(\"div\")\r\n    @space.setAttribute(\"id\", @id)\r\n    @appended = false\r\n\r\n\r\n  setCSS: ( key, val, isPx=false) ->\r\n    @css[key] = (if isPx then \"#{val}px\" else val)\r\n    return this\r\n\r\n\r\n  updateCSS: () ->\r\n    for k,v of @css\r\n      @space.style[k] = v\r\n\r\n\r\n  # ## Place a new canvas element into a container dom element. When canvas is ready, a \"ready\" event will be fired. Track this event with `space.canvas.addEventListener(\"ready\")`\r\n  # @param `parent_id` the DOM element into which the canvas element should be appended\r\n  # @param `readyCallback` a callback function with parameters `width`, `height`, and `canvas_element`, which will get called when canvas is appended and ready.\r\n  # @return this CanvasSpace\r\n  display: ( parent_id=\"#pt\", readyCallback ) ->\r\n    if not @appended\r\n\r\n      # frame\r\n      frame = document.querySelector(parent_id)\r\n      frame_rect = frame.getBoundingClientRect()\r\n\r\n      if frame\r\n        # resize to fit frame\r\n        @resize( frame_rect.width, frame_rect.height )\r\n\r\n        # listen for window resize event and callback\r\n        window.addEventListener( 'resize',\r\n          ((evt) ->\r\n            frame_rect = frame.getBoundingClientRect()\r\n            @resize( frame_rect.width, frame_rect.height, evt ) ).bind(this)\r\n        )\r\n\r\n        # add to parent dom if not existing\r\n        if @space.parentNode != frame\r\n          frame.appendChild( @space )\r\n\r\n        @appended = true\r\n\r\n        # fire ready event\r\n        setTimeout( (\r\n            () ->\r\n              @space.dispatchEvent( new Event('ready') )\r\n              if readyCallback\r\n                readyCallback( frame_rect.width, frame_rect.height,  @space )\r\n\r\n          ).bind(@)\r\n        )\r\n\r\n      else\r\n        throw 'Cannot add canvas to element '+parent_id\r\n\r\n    return this\r\n\r\n\r\n  # ## This overrides Space's `resize` function. It's a callback function for window's resize event. Keep track of this with `onSpaceResize(w,h,evt)` callback in your added objects.\r\n  # @demo canvasspace.resize\r\n  # @return this CanvasSpace\r\n  resize: (w, h, evt) ->\r\n\r\n    @size.set(w, h)\r\n    @center = new Vector( w/2, h/2 )\r\n\r\n    # player resize callback\r\n    for k, p of @items\r\n      if p.onSpaceResize? then p.onSpaceResize(w, h, evt)\r\n\r\n    return @\r\n\r\n\r\n  clear: () ->\r\n    @space.innerHML = \"\"\r\n\r\n\r\n  # ## Overrides Space's `animate` function\r\n  # @param `time` current time\r\n  # @return this CanvasSpace\r\n  animate : (time) ->\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    return @\r\n\r\n\r\n  # ## Bind event listener in canvas element, for events such as mouse events\r\n  # @param `evt` Event object\r\n  # @param `callback` a callback function for this event\r\n  bindCanvas: ( evt, callback ) ->\r\n    @space.addEventListener( evt, callback )\r\n\r\n\r\n  # ## A convenient method to bind (or unbind) all mouse events in canvas element. All item added to `items` property that implements an `onMouseAction` callback will receive mouse event callbacks. The types of mouse actions are: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".\r\n  # @param `bind` a boolean value to bind mouse events if set to `true`. If `false`, all mouse events will be unbound. Default is true.\r\n  # @demo canvasspace.bindMouse\r\n  bindMouse: ( _bind=true ) ->\r\n    if _bind\r\n      @space.addEventListener( \"mousedown\", @_mouseDown.bind(@) )\r\n      @space.addEventListener( \"mouseup\", @_mouseUp.bind(@) )\r\n      @space.addEventListener( \"mouseover\", @_mouseOver.bind(@) )\r\n      @space.addEventListener( \"mouseout\", @_mouseOut.bind(@) )\r\n      @space.addEventListener( \"mousemove\", @_mouseMove.bind(@) )\r\n    else\r\n      @space.removeEventListener( \"mousedown\", @_mouseDown.bind(@) )\r\n      @space.removeEventListener( \"mouseup\", @_mouseUp.bind(@) )\r\n      @space.removeEventListener( \"mouseover\", @_mouseOver.bind(@) )\r\n      @space.removeEventListener( \"mouseout\", @_mouseOut.bind(@) )\r\n      @space.removeEventListener( \"mousemove\", @_mouseMove.bind(@) )\r\n\r\n\r\n\r\n  # go through all item in `items` and call its onMouseAction callback function\r\n  _mouseAction: (type, evt) ->\r\n    for k, v of @items\r\n      px = evt.offsetX || evt.layerX;\r\n      py = evt.offsetY || evt.layerY;\r\n      if v.onMouseAction? then v.onMouseAction( type, px, py, evt )\r\n\r\n\r\n  # mouse down action\r\n  _mouseDown: (evt) ->\r\n    @_mouseAction( \"down\", evt )\r\n    @_mdown = true\r\n\r\n\r\n  # mouse up action\r\n  _mouseUp: (evt) ->\r\n    @_mouseAction( \"up\", evt )\r\n    if @_mdrag then @_mouseAction( \"drop\", evt )\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n\r\n  # mouse move action\r\n  _mouseMove: (evt) ->\r\n    @_mouseAction( \"move\", evt )\r\n    if @_mdown\r\n      @_mdrag = true\r\n      @_mouseAction( \"drag\", evt )\r\n\r\n\r\n  # mouse over action\r\n  _mouseOver: (evt) ->\r\n    @_mouseAction( \"over\", evt )\r\n\r\n\r\n  # mouse out action\r\n  _mouseOut: (evt) ->\r\n    @_mouseAction( \"out\", evt )\r\n    if @_mdrag then @_mouseAction( \"drop\", evt )\r\n    @_mdrag = false\r\n\r\n\r\n\r\n  @attr: (elem, data) ->\r\n    for k, v of data\r\n      elem.setAttribute( k, v );\r\n\r\n\r\n  @css: (data) ->\r\n    str = \"\"\r\n    for k, v of data\r\n      if (v) then str += \"#{k}: #{v}; \"\r\n    return str;\r\n\r\n\r\n# namescape\r\nthis.DOMSpace = DOMSpace\n# ### Form makes visible the invisible. It transforms a point into an inkblot, or an arrow, or a musical note. By separating forms from its concepts, we may create a myriad of expressions on a single concept, or apply a unified style to various concepts. The Form class provides basic method to draw points, lines, and other primitives on CanvasSpace. Extend this class to visualize in different ways in different contexts.\r\nclass Form\r\n\r\n  # ## Create a new Form which is based on HTML Canvass\r\n  # @param `space` A space that has a valid context for this form. In this case, the space should represent an html canvas.\r\n  # @return a new Form object\r\n  constructor: ( space ) ->\r\n\r\n    # ## a property to reference the canvas rendering context\r\n    @cc = space.ctx\r\n\r\n    # default style\r\n    @cc.fillStyle = '#999'\r\n    @cc.strokeStyle = '#666'\r\n    @cc.lineWidth = 1\r\n    @cc.font = \"11px sans-serif\"\r\n\r\n    # ## a boolean property to set if the next drawing should be filled with current fill style\r\n    @filled = true\r\n\r\n    # ## a boolean property to set if the next drawing should be stroked with current stroke style\r\n    @stroked = true\r\n\r\n    # ## a property to specify the current font size\r\n    @fontSize = 11\r\n\r\n    # ## a property to specify the current font face\r\n    @fontFace = \"sans-serif\"\r\n\r\n\r\n  # ## A static function to get 2d context from a canvas element in the DOM\r\n  # @param `canvas_id` the id attribute of the canvas element\r\n  # @eg `Form.context('my_canvas')`\r\n  # @return a canvas rendering context object\r\n  @context : ( canvas_id ) ->\r\n    # get canvas and its 2d context\r\n    elem = document.getElementById( canvas_id )\r\n    cc = if elem and elem.getContext then elem.getContext('2d') else false\r\n    if !cc then throw \"Cannot initiate canvas 2d context\"\r\n    cc\r\n\r\n\r\n  # ## A static function to draw a line\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pair` a Pair object\r\n  @line: (ctx, pair) ->\r\n    if !pair.p1 then throw \"#{pair.toString()} is not a Pair\"\r\n    ctx.beginPath()\r\n    ctx.moveTo( pair.x, pair.y )\r\n    ctx.lineTo( pair.p1.x, pair.p1.y )\r\n    ctx.stroke()\r\n\r\n\r\n\r\n  # ## A static function to draw a line\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pairs` an array of Pair objects\r\n  @lines: (ctx, pairs) ->\r\n    for ln in pairs\r\n      Form.line( ctx, ln )\r\n\r\n\r\n  # ## A static function to draw a rectangle\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pair` a Pair object\r\n  # @param `fill` a boolean value to specify if the points should be filled. Default to true.\r\n  # @param `stroke` a boolean value to specify if the points should be stroked. Default to false.\r\n  @rect: (ctx, pair, fill=true, stroke=false) ->\r\n    if !pair.p1 then throw \"#{pair.toString() is not a Pair}\"\r\n    ctx.beginPath()\r\n    ctx.moveTo( pair.x, pair.y )\r\n    ctx.lineTo( pair.x, pair.p1.y )\r\n    ctx.lineTo( pair.p1.x, pair.p1.y )\r\n    ctx.lineTo( pair.p1.x, pair.y )\r\n    ctx.closePath()\r\n    if stroke then ctx.stroke()\r\n    if fill then ctx.fill()\r\n\r\n\r\n  # ## A static  function to draw a circle\r\n  # @param `ctx` canvas rendering context\r\n  # @param `c` a Circle object\r\n  # @param `fill` a boolean value to specify if the points should be filled. Default to true.\r\n  # @param `stroke` a boolean value to specify if the points should be stroked. Default to false.\r\n  @circle: (ctx, c, fill=true, stroke=false) ->\r\n    ctx.beginPath()\r\n    ctx.arc( c.x, c.y, c.radius, 0, Const.two_pi, false )\r\n    if fill then ctx.fill()\r\n    if stroke then ctx.stroke()\r\n    return\r\n\r\n\r\n  # ## A static function to draw a triangle\r\n  # @param `ctx` canvas rendering context\r\n  # @param `tri` a Triangle object\r\n  # @param `fill` a boolean value to specify if the points should be filled. Default to true.\r\n  # @param `stroke` a boolean value to specify if the points should be stroked. Default to false.\r\n  @triangle: ( ctx, tri, fill=true, stroke=false) ->\r\n    ctx.beginPath()\r\n    ctx.moveTo( tri.x, tri.y )\r\n    ctx.lineTo( tri.p1.x, tri.p1.y )\r\n    ctx.lineTo( tri.p2.x, tri.p2.y )\r\n    ctx.closePath()\r\n    if fill then ctx.fill()\r\n    if stroke then ctx.stroke()\r\n    return\r\n\r\n\r\n  # ## A static function to draw a point\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pt` a Point object\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `fill` a boolean value to specify if the points should be filled. Default to true.\r\n  # @param `stroke` a boolean value to specify if the points should be stroked. Default to false.\r\n  # @param `circle` a boolean value to specify if the points should be drawn as a circle. Default to false.\r\n  @point: (ctx, pt, halfsize=2, fill=true, stroke=false, circle=false ) ->\r\n\r\n    if circle\r\n      ctx.beginPath()\r\n      ctx.arc( pt.x, pt.y, halfsize, 0, Const.two_pi, false )\r\n\r\n    else\r\n      x1 = pt.x-halfsize\r\n      y1 = pt.y-halfsize\r\n      x2 = pt.x+halfsize\r\n      y2 = pt.y+halfsize\r\n\r\n      ctx.beginPath()\r\n      ctx.moveTo( x1, y1 )\r\n      ctx.lineTo( x1, y2 )\r\n      ctx.lineTo( x2, y2 )\r\n      ctx.lineTo( x2, y1 )\r\n      ctx.closePath()\r\n\r\n    if fill then ctx.fill()\r\n    if stroke then ctx.stroke()\r\n    return pt\r\n\r\n\r\n  # ## A static function similar to `Form.point()` but draw a series of points\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pts` an array of Points\r\n  # @param `halfsize, fill, stroke, circle` same parameters as in `Form.point()`\r\n  @points: (ctx, pts, halfsize=2, fill=true, stroke=false, circle=false ) ->\r\n    for p in pts\r\n      Form.point( ctx, p, halfsize, fill, stroke, circle )\r\n\r\n\r\n  # ## A static function to draw a polygon\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pts` an array of Points\r\n  # @param `closePath` a boolean value to specify if the path should be closed (joining last point with first point)\r\n  # @param `fill` a boolean value to specify if the points should be filled. Default to true.\r\n  # @param `stroke` a boolean value to specify if the points should be stroked. Default to true.\r\n  @polygon: ( ctx, pts, closePath=true, fill=true, stroke=true) ->\r\n    if pts.length <= 1 then return;\r\n    ctx.beginPath()\r\n    ctx.moveTo( pts[0].x, pts[0].y )\r\n    for i in [1...pts.length] by 1\r\n      ctx.lineTo( pts[i].x, pts[i].y )\r\n\r\n    if closePath then ctx.closePath()\r\n    if fill then ctx.fill()\r\n    if stroke then ctx.stroke()\r\n    return\r\n\r\n  # ## A static function to draw a curve\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pts` an array of Points\r\n  @curve: ( ctx, pts ) ->\r\n    Form.polygon( ctx, pts, false, false, true )\r\n\r\n\r\n  # ## A static function to draw text\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pt` a Point object to specify the anchor point\r\n  # @param `txt` a string of text to draw\r\n  # @param `maxWidth` specify a maximum width per line\r\n  @text: ( ctx, pt, txt, maxWidth ) ->\r\n    ctx.fillText( txt, pt.x, pt.y, maxWidth )\r\n\r\n\r\n\r\n  # ## Set current fill style\r\n  # @param `c` fill color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)) Default is `false` (transparent)\r\n  # @eg `form.fill(\"#F90\")` `form.fill(\"rgba(0,0,0,.5\")` `form.fill(false)`\r\n  # @demo form.fill\r\n  # @return this Form\r\n  fill: (c) ->\r\n    @cc.fillStyle = if c then c else \"transparent\"\r\n    @filled =  !!c\r\n    return @\r\n\r\n\r\n  # ## Set current stroke style\r\n  # @param `c` stroke color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)) Default is false (transparent)\r\n  # @param `width` Optional value (can be floating point) to set line width\r\n  # @param `joint` Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".\r\n  # @eg `form.stroke(\"#F90\")` `form.stroke(\"rgba(0,0,0,.5\")` `form.stroke(false)` `form.stroke(\"#000\", 0.5, 'round')`\r\n  # @return this Form\r\n  stroke: (c, width, joint) ->\r\n    @cc.strokeStyle = if c then c else \"transparent\"\r\n    @stroked = !!c\r\n    if width then @cc.lineWidth = width\r\n    if joint then @cc.lineJoin = joint\r\n    return @\r\n\r\n\r\n  # ## Set font size and font face\r\n  # @param `size` an integer value to specify font size in pixels\r\n  # @param `face` optional name to change the font face, such as \"sans-serif\" or \"Helvetica\"\r\n  # @eg `form.font(24)` `form.font(12, \"Georgia\")`\r\n  # @demo form.font\r\n  # @return this Form\r\n  font: (size, face=@fontFace) ->\r\n    @fontSize = size\r\n    @cc.font = \"#{size}px #{face}\"\r\n    return @\r\n\r\n\r\n  # ## Draw a shape. Defaults to `sketch()`. Override this function to draw differently.\r\n  # @return this Form\r\n  draw: ( shape ) ->\r\n    @sketch( shape )\r\n\r\n\r\n  # ## Default draw based on the types of shape (Point, Line, Circle, etc)\r\n  # @param `shape` any shape such as `Point` or `Line`, or an array of Points\r\n  # @return this Form\r\n  sketch: ( shape ) ->\r\n    shape.floor()\r\n\r\n    if shape instanceof Circle\r\n      Form.circle(@cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Rectangle\r\n      Form.rect( @cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Triangle\r\n      Form.triangle( @cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Line or shape instanceof Pair\r\n      Form.line(@cc, shape)\r\n\r\n    else if shape instanceof PointSet\r\n      Form.polygon(@cc, shape.points )\r\n\r\n    else if shape instanceof Vector or shape instanceof Point\r\n      Form.point(@cc, shape)\r\n\r\n\r\n    return @\r\n\r\n\r\n  # ## Draw a point\r\n  # @param `p` a Point object\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `isCircle` a boolean value to specify if the point should be drawn as a circle. Default is false.\r\n  # @return this Form\r\n  point: (p, halfsize=2, isCircle=false) ->\r\n    Form.point(@cc, p, halfsize, @filled, @stroked, isCircle )\r\n    return @\r\n\r\n  # ## Draw a series of points\r\n  # @param `ps` an array of Points\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `isCircle` a boolean value to specify if the point should be drawn as a circle. Default is false.\r\n  # @demo form.points\r\n  # @return this Form\r\n  points: (ps, halfsize=2, isCircle=false) ->\r\n    Form.points(@cc, ps, halfsize, @filled, @stroked, isCircle )\r\n    return @\r\n\r\n\r\n  # ## Draw a line\r\n  # @param `p` a Pair object\r\n  # @return this Form\r\n  line: (p) ->\r\n    Form.line(@cc, p)\r\n    return @\r\n\r\n  # ## Draw a series of lines\r\n  # @param `ps` an array of Lines\r\n  # @return this Form\r\n  lines: (ps) ->\r\n    Form.lines(@cc, ps)\r\n    return @\r\n\r\n\r\n  # ## Draw a rectangle\r\n  # @param `p` a Pair object\r\n  # @return this Form\r\n  rect: (p) ->\r\n    Form.rect( @cc, p, @filled, @stroked )\r\n    return @\r\n\r\n\r\n  # ## Draw a circle\r\n  # @param `p` a Circle object\r\n  # @return this Form\r\n  circle: (p) ->\r\n    Form.circle( @cc, p, @filled, @stroked )\r\n    return @\r\n\r\n\r\n  # ## Draw a triangle\r\n  # @param `p` a Triangle object\r\n  # @return this Form\r\n  triangle: (p) ->\r\n    Form.triangle( @cc, p, @filled, @stroked )\r\n    return @\r\n\r\n\r\n  # ## Draw a polygon\r\n  # @param `ps` an array of Points\r\n  # @param `closePath` a boolean value to specify if the path should be closed (joining last point with first point)\r\n  # @return this Form\r\n  polygon: (ps, closePath) ->\r\n    Form.polygon( @cc, ps, closePath, @filled, @stroked)\r\n    return @\r\n\r\n\r\n  # ## Draw a curve\r\n  # @param `ps` an array of Points\r\n  # @demo form.curve\r\n  # @return this Form\r\n  curve: (ps) ->\r\n    Form.curve( @cc, ps )\r\n    return @\r\n\r\n\r\n  # ## Draw text\r\n  # @param `p` a Point to specify anchor position\r\n  # @param `txt` a string of text\r\n  # @param `maxWidth` maximum width per line\r\n  # @param `xoff, yoff` x and y positional offset values\r\n  text: (p, txt, maxWidth=1000, xoff, yoff) ->\r\n    pos = new Vector(p)\r\n    if xoff then pos.add(xoff, 0)\r\n    if yoff then pos.add(0, yoff)\r\n    @cc.fillText(txt, pos.x, pos.y, maxWidth)\r\n    return @\r\n\r\n\r\n# namespace\r\nthis.Form = Form\n# ### A point is the smallest thing in a space. It defines a static position, an indivisible abstraction, and a creative beginning. Think of a point not as a dot, but as a potentiality, visible only to the mind's squinted eyes.\r\nclass Point\r\n\r\n  # ## Create a new point using optional parameters which can be a list of numeric values, or an array, or an object with x,y,z properties. If no parameter is specified, this will return a Point at (0,0,0) position.\r\n  # @param `args(x,y,z)` optional comma separated values to specify x, y, and z position\r\n  # @param `args([x,y,z])` optional array with 1 to 3 values to specify x, y, and z position\r\n  # @param `args(pt)` an optional object with `{x, y, z}` properties.\r\n  # @eg `new Point()` `new Point(1,2,3)` `new Point([2,4])` `new Point({x:3, y:6, z:9})`\r\n  # @return a new Point object\r\n  constructor: (args) ->\r\n\r\n    # parse arguments and copy to this.x,y,z\r\n    @copy( Point.get(arguments) )\r\n\r\n\r\n  # ## A static function `Point.get()` which converts arrays or objects to an object with `{x, y, z}` properties.\r\n  # @param `args` Similar to Point constructor, this accepts optional parameters which can be comma-separated values, or an array, or any object.\r\n  # @eg `Point.get([2,4])` `Point.get({x:3, y:6, z:9})`\r\n  # @return an Object with {x, y, z} properties\r\n  @get : ( args ) ->\r\n\r\n    if args.length > 0\r\n\r\n      if typeof args[0] is 'object'\r\n\r\n        # if it's Array or arguments (object with length property). Note that \"arguments\" is not considered as an Array by javascript.\r\n        if args[0] instanceof Array or args[0].length > 0\r\n\r\n          return {\r\n            x: args[0][0] || 0\r\n            y: args[0][1] || 0\r\n            z: args[0][2] || 0\r\n          }\r\n\r\n          # Point object\r\n        else\r\n          return {\r\n            x: args[0].x || 0\r\n            y: args[0].y || 0\r\n            z: args[0].z || 0\r\n          }\r\n\r\n        # multiple args for x, y, z\r\n      else\r\n\r\n        return {\r\n        x: args[0] || 0\r\n        y: args[1] || 0\r\n        z: args[2] || 0\r\n        }\r\n\r\n    else\r\n      # no argument return empty point\r\n      return { x: 0, y: 0, z: 0 }\r\n\r\n\r\n  # ## Given another point in relation to this point, this returns which side or quadrant the other point is at.\r\n  # @param `pt` a Point object\r\n  # @param `epsilon` an optional value to specify the minimum distance threshold. Default is Const.epsilon.\r\n  # @eg `p.quadrant( another_p )` `p.quadrant( another_p, 2 )`\r\n  # @demo point.quadrant\r\n  # @return a constant value such as Const.identical, Const.bottom, Const.top_right\r\n  quadrant: (pt, epsilon=Const.epsilon) ->\r\n\r\n    if pt.near(@) then return Const.identical\r\n\r\n    if (Math.abs(pt.x-@x) < epsilon)\r\n      return if pt.y < @y then Const.top else Const.bottom\r\n\r\n    if (Math.abs(pt.y-@y) < epsilon)\r\n      return if pt.x < @x then Const.left else Const.right\r\n\r\n    if (pt.y < @y && pt.x > @x)\r\n      return Const.top_right\r\n    else if (pt.y < @y && pt.x < @x)\r\n      return Const.top_left\r\n    else if (pt.y > @y && pt.x < @x)\r\n      return Const.bottom_left\r\n    else\r\n      return Const.bottom_right\r\n\r\n\r\n  # ## Set position of this point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg Eg, `p.set( x, y )` or `p.set( {x, y, z} )` or  `p.set( [x, y, z] )`\r\n  # @return this Point\r\n  set: (args) ->\r\n    p = Point.get(arguments)\r\n\r\n    # ## property for x position\r\n    @x = p.x\r\n\r\n    # ## property for y position\r\n    @y = p.y\r\n\r\n    # ## propoerty for z position\r\n    @z = p.z\r\n    return @\r\n\r\n\r\n  # ## Copy another point object to this point. Slightly faster than `set()`\r\n  # @param `p` a Point object to copy\r\n  # @return this Point\r\n  copy: (p) ->\r\n    @x = p.x\r\n    @y = p.y\r\n    @z = p.z\r\n    return @\r\n\r\n\r\n  # ## Clone this point\r\n  # @return a new Point that is identical to this point\r\n  clone: () -> return new Point( @ )\r\n\r\n\r\n  # ## Describe this point as a text string\r\n  # @return \"Point x, y, z\" text\r\n  toString: () -> \"Point #{ @x }, #{ @y }, #{ @z }\"\r\n\r\n  # ## Put this vector into an array\r\n  # @return an array with a single point object\r\n  toArray: () -> [@]\r\n\r\n\r\n\r\n  # ## When a point has 3 dimensions `(x,y,z)`, this function converts it to a new point `(x,y)` of a specific 2D plane (such as `yz`)\r\n  # @param `axis` an axis id such as `Const.yz`.\r\n  # @param `reverse` optional boolean value. If `true`, the mapping will be flipped. Default is false.\r\n  # @eg `p.get2D( Const.xy )` `p.get2D(Const.yz, true)`\r\n  # @return a new 2D Point\r\n  get2D: (axis, reverse=false) ->\r\n\r\n    if axis == Const.xy then return new this.__proto__.constructor( @ )\r\n    if axis == Const.xz then return new this.__proto__.constructor( @x, @z, @y ) # same flip in reverse\r\n    if axis == Const.yz\r\n      if reverse\r\n        return new this.__proto__.constructor( @z, @x, @y )\r\n      else\r\n        return new this.__proto__.constructor( @y, @z, @x )\r\n\r\n    return new this.__proto__.constructor( @ )\r\n\r\n\r\n\r\n  # ## Evaluate the minimum x,y,z of this point and another point, and get a minimum Point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg `p.min(1,2)` `p.min( another_p )`\r\n  # @return this Point\r\n  min: (args) ->\r\n    _p = Point.get(arguments)\r\n    @x = Math.min(@x, _p.x)\r\n    @y = Math.min(@y, _p.y)\r\n    @z = Math.min(@z, _p.z)\r\n    return @\r\n\r\n\r\n  # ## Similar to `min()` but returns a new instance\r\n  $min: (args) ->\r\n    _p = Point.get(arguments)\r\n    return new this.__proto__.constructor( Math.min(@x, _p.x), Math.min(@y, _p.y), Math.min(@z, _p.z) )\r\n\r\n\r\n  # ## Evaluate the minimum x,y,z of this point and another point, and get a maximum Point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg `p.max(1,2)` `p.max( another_p )`\r\n  # @demo point.max\r\n  # @return this Point\r\n  max: (args) ->\r\n    _p = Point.get(arguments)\r\n    @x = Math.max(@x, _p.x)\r\n    @y = Math.max(@y, _p.y)\r\n    @z = Math.max(@z, _p.z)\r\n    return @\r\n\r\n\r\n  # ## Similar to `max()` but returns a new instance\r\n  $max: (args) ->\r\n    _p = Point.get(arguments)\r\n    return new this.__proto__.constructor( Math.max(@x, _p.x), Math.max(@y, _p.y), Math.max(@z, _p.z) )\r\n\r\n\r\n  # ## Check if this point is at exactly the same position as the other point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg `p.equal(1,2)` `p.equal( another_p )`\r\n  # @return boolean, true if they are equal\r\n  equal: (args) ->\r\n    _p = Point.get(arguments)\r\n    return  (_p.x == @x) and (_p.y == @y) and (_p.z == @z)\r\n\r\n\r\n  # ## Check if this point is at exactly the same position as the other point\r\n  # @param `pt` a Point to check against\r\n  # @param `epsilon` an optional threshold value indicating the minimum distance that's near enough\r\n  # @eg `p.near(another_p)` `p.near( another_p, 2 )` `p.near( Point.get(1,2,3) )`\r\n  # @return boolean, true if they are near\r\n  near: ( pt, epsilon=Const.epsilon) ->\r\n    _p = Point.get(arguments)\r\n    return (Math.abs(_p.x-@x) < epsilon) and (Math.abs(_p.y-@y) < epsilon) and (Math.abs(_p.z-@z) < epsilon)\r\n\r\n\r\n  # ## Snap this point's position to the nearest integer by its floor\r\n  # @return this Point\r\n  floor: () ->\r\n    @x = Math.floor( @x )\r\n    @y = Math.floor( @y )\r\n    @z = Math.floor( @z )\r\n    return @\r\n\r\n\r\n  # ## Snap this point's position to the nearest integer by its ceiling\r\n  # @return this Point\r\n  ceil: () ->\r\n    @x = Math.ceil( @x )\r\n    @y = Math.ceil( @y )\r\n    @z = Math.ceil( @z )\r\n    return @\r\n\r\n\r\n# namespace\r\nthis.Point = Point\r\n\n# ### A vector points to a point. If a point represents a position on a conceptual plane, then a vector is the thought toward it. As a thought, it has direction and reach. A vector expresses the same concept in verb as a point does in noun.\r\nclass Vector extends Point\r\n\r\n  # ## Create a new Vector. A Vector extends a Point and includes functions for arithmetics.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or a Point object as parameters.\r\n  # @eg `new Vector()` `new Vector(1,2,3)` `new Vector([2,4])` `new Vector({x:3, y:6, z:9})`\r\n  # @return a new Vector object\r\n  constructor: () ->\r\n    super\r\n\r\n  # private function to get arguments based on argument types\r\n  _getArgs: (args) -> return if typeof args[0] is 'number' and args.length > 1 then args else args[0]\r\n\r\n  # ## Add another vector to this vector.\r\n  # @param `args` comma-separated values, or as an array, or a Point object.\r\n  # @eg `vec.add(1,2)` `vec.add([2,4])` `vec.add({x:3, y:6, z:9})`\r\n  # @demo vector.add\r\n  # @return this Vector\r\n  add: (args) ->\r\n    # add scalar\r\n    if typeof arguments[0] is 'number' and arguments.length is 1\r\n      @x += arguments[0]\r\n      @y += arguments[0]\r\n      @z += arguments[0]\r\n      # add point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x += _p.x\r\n      @y += _p.y\r\n      @z += _p.z\r\n\r\n    return @\r\n\r\n\r\n  # ## Same as `add()` but returns a new Vector. The values of this vector are not changed.\r\n  $add: (args) ->\r\n    a = @_getArgs( arguments )\r\n    new Vector( @ ).add( a )\r\n\r\n\r\n  # ## Subtract another vector from this vector.\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `vec.subtract(1,2)` `vec.subtract([2,4])` `vec.subtract({x:3, y:6, z:9})`\r\n  # @return this Vector\r\n  subtract: (args) ->\r\n    # subtract scalar\r\n    if typeof arguments[0] is 'number' and arguments.length is 1\r\n      @x -= arguments[0]\r\n      @y -= arguments[0]\r\n      @z -= arguments[0]\r\n      # subtract point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x -= _p.x\r\n      @y -= _p.y\r\n      @z -= _p.z\r\n\r\n    return @\r\n\r\n  # ## Same as `subtract()` but returns a new Vector. The values of this vector are not changed.\r\n  $subtract: (args) ->\r\n    a = @_getArgs( arguments )\r\n    return new Vector( @ ).subtract( a )\r\n\r\n\r\n  # ## Multiple this vector with a scalar or vector. If there's only one numberic value in the parameter, this vector will be multiplied by that scalar value. Otherwise, this vector's x,y,z values will be multiplied by the corresponding x,y,z in the parameters. Note that this is different to .dot and .cross products.\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `vec.multiply(4)` `vec.multiply(1,2,3)` `vec.multiply([2,4])` `vec.multiply({x:3, y:6, z:9})`\r\n  # @return this Vector\r\n  multiply: (args) ->\r\n    # multiply scalar\r\n    if arguments.length is 1 and (typeof arguments[0] is 'number' or (typeof arguments[0] is 'object' and arguments[0].length == 1) )\r\n      @x *= arguments[0]\r\n      @y *= arguments[0]\r\n      @z *= arguments[0]\r\n      # multiply point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x *= _p.x\r\n      @y *= _p.y\r\n      @z *= _p.z\r\n\r\n    return @\r\n\r\n  # ## Same as `multiply()` but returns a new Vector. The values of this vector is not changed.\r\n  $multiply: (args) ->\r\n    a = @_getArgs( arguments )\r\n    return new Vector( @ ).multiply( a )\r\n\r\n\r\n  # ## Similar as `multiply()` but easier to read semantically. `vec.divide(2,4,5)` is the same as `vec.multiply(0.5, 0.25, 0.2)`\r\n  # @eg `vec.divide(10)` `vec.divide(2,4,5)`\r\n  # @return this Vector\r\n  divide: (args) ->\r\n    # divide scalar\r\n    if arguments.length is 1 and (typeof arguments[0] is 'number' or (typeof arguments[0] is 'object' and arguments[0].length == 1) )\r\n      @x /= arguments[0]\r\n      @y /= arguments[0]\r\n      @z /= arguments[0]\r\n      # divide point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x /= _p.x\r\n      @y /= _p.y\r\n      @z /= _p.z\r\n\r\n    return @\r\n\r\n  # ## Same as `divide()` but returns a new Vector. The values of this vector is not changed.\r\n  $divide: (args) ->\r\n    a = @_getArgs( arguments )\r\n    return new Vector( @ ).divide( a )\r\n\r\n\r\n  # ## Apply a function to all points in the `toArray()` list. This is usually applied to `Pair`, `PointSet` and other objects to call a function to all its points.\r\n  # @param `name` a function of this class\r\n  # @param `args...` optional, comma-separated arguments to pass to the function\r\n  # @eg `pair.op(\"add\", 1,2,3)` `pointset.op(\"multiply\", 2)`\r\n  op: ( name, args... ) ->\r\n    pts = @toArray()\r\n    for p in pts\r\n      p[name]( args... )\r\n    return @\r\n\r\n\r\n  # ## Similar to `op()` but apply the function to a new instance.\r\n  $op: ( name, args... ) ->\r\n    instance = @clone()\r\n    pts = instance.toArray()\r\n    for p in pts\r\n      p[name]( args... )\r\n    return instance\r\n\r\n\r\n\r\n  # ## Get the angle of this vector on a plane, or get the angle from this vector to another point. If no parameter specified, this will return the angle on xy plane.\r\n  # @param `axis` single optional argument to specify axis id (eg, `Const.yz`) to specify a plane\r\n  # @param `pt` single optional argument to specify a Point object, to calculate the angle from this Point to another Point instead\r\n  # @param `axis, pt` 2 arguments in this sequence, as optional axis id and Point object, to get the angle to a Point on a specific plane\r\n  # @eg `vec.angle()` `vec.angle(Const.yz)` `vec.angle(another_pt)` `vec.angle(Const.xz, another_pt)`\r\n  # @return a radian value\r\n  angle: (args) ->\r\n\r\n    # no argument angle from origin\r\n    if arguments.length is 0\r\n      return Math.atan2( @y, @x )\r\n\r\n    # if first argument is axis\r\n    if typeof arguments[0] is 'string'\r\n      axis = arguments[0]\r\n      p = if arguments.length > 1 then @$subtract( arguments[1] ).multiply(-1) else undefined\r\n\r\n    # first argument is object or none\r\n    else\r\n      p = @$subtract( arguments[0]).multiply(-1)\r\n      axis = false\r\n\r\n    # if has point and no axis, find xy to another point\r\n    if p and !axis\r\n      return Math.atan2( p.y, p.x )\r\n\r\n      # has axis parameter\r\n    else if axis is Const.xy\r\n      return if p then Math.atan2( p.y, p.x ) else (Math.atan2( @y, @x ))\r\n\r\n    else if axis is Const.yz\r\n      return if p then Math.atan2( p.z, p.y ) else (Math.atan2( @z, @y ))\r\n\r\n    else if axis is Const.xz\r\n      return if p then Math.atan2( p.z, p.x ) else (Math.atan2( @z, @x ))\r\n\r\n\r\n  # ## Get the change in radian between this and another vector (from origin position)\r\n  # @param `vec` another Vector to compare against\r\n  # @param axis optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.angleBetween( another_pt )` `vec.angleBetween( another_pt, Const.yz )`\r\n  angleBetween: (vec, axis=Const.xy) ->\r\n    Util.boundRadian( @angle( axis ), true ) - Util.boundRadian( vec.angle( axis ), true )\r\n\r\n\r\n  # ## Get the mangnitude (ie, distance from origin) of this vector, or get the distance from this vector to another point. Default is to get the magnitude on xyz plane.\r\n  # @param `axis` single argument as optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @param `pt` single argument as optional Point object to calculate the distance from this Point to another Point instead\r\n  # @param `sqrt` single argument as optional boolean value to get distance-squared value if set to `false`. Default is true.\r\n  # @param `axis, pt, sqrt` 3 optional parameters can be used in this sequence to specify a plane, a Point, and whether to get squared value.\r\n  # @eg `vec.magnitude()` `vec.magnitude(false)` `vec.magnitude(Const.yz)` `vec.magnitude(another_pt)` `vec.magnitude(Const.xz, another_pt, false)`.\r\n  # @return magnitude value\r\n  magnitude: (args) ->\r\n\r\n    m = {x:@x*@x, y:@y*@y, z:@z*@z }\r\n\r\n    # if last argument is false, then don't use Math.sqrt\r\n    useSq = (arguments.length >= 1 and !arguments[ arguments.length-1 ])\r\n    _sq = if useSq then ( (x) -> x ) else Math.sqrt\r\n\r\n    # no argument angle from origin\r\n    if arguments.length is 0\r\n      return _sq( m.x + m.y + m.z )\r\n\r\n    # if first argument is axis\r\n    if typeof arguments[0] is 'string'\r\n      axis = arguments[0]\r\n      if arguments.length > 1 and arguments[1]\r\n        p = @$subtract( arguments[1] )\r\n      else\r\n        p = undefined\r\n\r\n      # first argument is object or none\r\n    else\r\n      p = @$subtract( arguments[0] )\r\n      axis = false\r\n\r\n    mag = if p then {x:p.x*p.x, y:p.y*p.y, z:p.z*p.z} else m\r\n\r\n    # if has point and no axis, find xyz to another point\r\n    if p and !axis\r\n      return _sq( mag.x + mag.y + mag.z )\r\n\r\n    # has axis parameter\r\n    else if axis is Const.xy\r\n      return _sq( mag.x + mag.y )\r\n\r\n    else if axis is Const.yz\r\n      return _sq( mag.y + mag.z )\r\n\r\n    else if axis is Const.xz\r\n        return _sq( mag.x + mag.z )\r\n\r\n\r\n  # ## Get the distance between this and another point. An alias of magnitude.\r\n  # @param `pt` another point\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return distance\r\n  distance: (pt, axis=Const.xy) -> @magnitude( axis, pt )\r\n\r\n  # ## Normalize this vector to a unit vector, which has magnitude of 1.\r\n  # @demo vector.normalize\r\n  # @return this vector\r\n  normalize: () ->\r\n    @set( @$normalize() )\r\n    return @\r\n\r\n\r\n  # ## Get a normalized unit vector which has magnitude of 1. The original vector is not changed.\r\n  # @return a new unit vector\r\n  $normalize: () ->\r\n    m = @magnitude()\r\n\r\n    if m is 0\r\n      return new Vector()\r\n    else\r\n      return new Vector( @x/m, @y/m, @z/m )\r\n\r\n  # ## Set this vector's values to its absolute value (always positive).\r\n  # @return this vector\r\n  abs: () ->\r\n    @x = Math.abs(@x)\r\n    @y = Math.abs(@y)\r\n    @z = Math.abs(@z)\r\n    return @\r\n\r\n\r\n  # ## Calculate the [dot product](http://en.wikipedia.org/wiki/Dot_product) of this and another vector.\r\n  # @param `p` a Point to calculate the dot product\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.dot( another_vec )` `vec.dot( another_vec, Const.xz )`\r\n  # @return the dot product which is a scalar (numeric) value\r\n  dot: ( p, axis=Const.xyz ) ->\r\n    if axis == Const.xyz\r\n      return @x*p.x + @y*p.y + @z*p.z\r\n    else if axis == Const.xy\r\n      return @x*p.x + @y*p.y\r\n    else if axis == Const.yz\r\n      return @y*p.y + @z*p.z\r\n    else if axis == Const.xz\r\n      return @x*p.x + @z*p.z\r\n    else\r\n      return @x*p.x + @y*p.y + @z*p.z\r\n\r\n  # ## Calculate [vector projection](http://en.wikipedia.org/wiki/Vector_projection). A vector projection has the same direction as this vector but a different length. So if you draw a line from the projection vector to the vector specified in the parameter, it will be perpendicular to this vector.\r\n  # @param `vec` a Vector to calculate the projection\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.projection( another_vec)` `vec.projection( another_vec, Const.xz )`\r\n  # @demo vector.projection\r\n  # @return the vector projection\r\n  projection: ( vec, axis=Const.xyz ) ->\r\n    m = vec.magnitude()\r\n    a = @$normalize()\r\n    b = new Vector( vec.x/m, vec.y/m, vec.z/m )\r\n    dot = a.dot( b, axis )\r\n    return a.$multiply( m * dot )\r\n\r\n  # ## Calculate the [cross product](http://en.wikipedia.org/wiki/Cross_product) of this and another vector.\r\n  # @param `p` a Point to calculate the cross product\r\n  # @eg `vec.cross( another_vec )`\r\n  # @return the cross product which is a vector\r\n  cross: ( p ) ->\r\n    new Vector( (@y*p.z - @z*p.y), (@z*p.x - @x*p.z), (@x*p.y - @y*p.x) )\r\n\r\n\r\n  # ## Get the middle vector between this and another vector\r\n  # @param `vec` a Vector to calculate the bisect\r\n  # @eg `vec.bisect( another_vec )`\r\n  # @return a vector in the middle\r\n  bisect: ( vec, isNormalized=false ) ->\r\n    if isNormalized\r\n      return @$add(vec).divide(2)\r\n    else\r\n      return @$normalize().add( vec.$normalize() ).divide(2)\r\n\r\n\r\n  # ## Get 2 vectors that are perpendicular to this vector\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.perpendicular()` `vec.perpendicular(Const.yz)`\r\n  # @return an array of two vectors\r\n  perpendicular: ( axis=Const.xy ) ->\r\n      switch axis\r\n        when Const.xy then return [new Vector( -@y, @x, @z ), new Vector( @y, -@x, @z )]\r\n        when Const.yz then return [new Vector( @x, -@z, @y ), new Vector( @x, @z, -@y )]\r\n        when Const.xz then return [new Vector( -@z, @y, @x ), new Vector( @z, -@y, @x )]\r\n        else return [new Vector( -@y, @x, @z ), new Vector( @y, -@x, @z )]\r\n\r\n\r\n  # ## Check if another vector is perpendicular to this vector\r\n  # @param `p` a Point to check against\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.isPerpendicular( another_vec )` `vec.isPerpendicular( another_vec, Const.yz )`\r\n  # @return a boolean (true or false)\r\n  isPerpendicular: ( p, axis=Const.xyz ) -> @dot(p, axis) == 0\r\n\r\n\r\n  # ## Get surface normal vector. A [normal](http://en.wikipedia.org/wiki/Normal_%28geometry%29) is a vector perpendicular to a plane or object.\r\n  # @param `p` a Point to calculate the surface normal\r\n  # @eg `vec.surfaceNormal( another_vec )`\r\n  # @return the normal vector\r\n  surfaceNormal: ( p ) ->\r\n    return @cross( p ).normalize(true)\r\n\r\n\r\n  # ## move origin to a new position. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will move all the points.\r\n  # @param `args` new position as 1-3 comma-separated values, or as an array, or a Point object.\r\n  moveTo: ( args ) ->\r\n    target = Point.get(arguments)\r\n    d = @$subtract( target )\r\n    pts = @toArray()\r\n    for p in pts\r\n      p.subtract( d )\r\n\r\n    return @\r\n\r\n  # ## move origin by a certain amount. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will move all the points.\r\n  # @param `args` move amount as 1-3 comma-separated values, or as an array, or a Point object.\r\n  moveBy: ( args ) ->\r\n    inc = Point.get(arguments)\r\n    pts = @toArray()\r\n    for p in pts\r\n      p.add( inc )\r\n\r\n    return @\r\n\r\n\r\n  # ## Rotate this vector around an anchor point on a 2D plane. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will rotate all the points.\r\n  # @param `radian` a radian value specifying the angle. (where 1 degree = PI / 180 radian)\r\n  # @param `anchor` a Point object specifying the anchor position\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.rotate2D( Math.PI/2, anchor_pt )` `vec.rotate2D( 30*Const.deg_to_rad, another_pt, Const.xz )`\r\n  # @demo vector.rotate2D\r\n  # @return this vector\r\n  rotate2D: (radian, anchor, axis=Const.xy) ->\r\n    if !anchor then anchor = new Point(0,0,0)\r\n    mx = Matrix.rotateAnchor2D( radian, anchor, axis )\r\n\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n\r\n  # ## Reflect this vector along a path. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will reflect all the points.\r\n  # @param `line` a Line object to specify the path\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.reflect2D( line )` `vec.reflect2D( line, Const.xz )`\r\n  # @return this vector\r\n  reflect2D: (line, axis=Const.xy) ->\r\n    mx = Matrix.reflectAnchor2D( line, axis )\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n\r\n  # ## Rescale this vector from an anchor point. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will scale all the points together.\r\n  # @param `sx` x scale value, where 1 = no change\r\n  # @param `sy` y scale value, where 1 = no change\r\n  # @param `anchor` a Point object specifying the anchor position to scale from\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.scale2D( 0.7, 1.2, anchor_pt )` `vec.scale2D( 1, 3, anchor_pt, Const.xz )`\r\n  # @demo vector.scale2D\r\n  # @return this vector\r\n  scale2D: (sx, sy, anchor, axis=Const.xy) ->\r\n    if !anchor then anchor = new Point(0,0,0)\r\n    mx = Matrix.scaleAnchor2D( sx, sy, anchor, axis )\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n\r\n  # ## Shear this vector from an anchor point. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will shear all the points together.\r\n  # @param `sx` x scale value, where 1 = no change\r\n  # @param `sy` y scale value, where 1 = no change\r\n  # @param `anchor` a Point object specifying the anchor position to scale from\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.scale2D( 0.7, 1.2, anchor_pt )` `vec.scale2D( 1, 3, anchor_pt, Const.xz )`\r\n  # @return this vector\r\n  shear2D: (sx, sy, anchor, axis=Const.xy) ->\r\n    if !anchor then anchor = new Point(0,0,0)\r\n    mx = Matrix.shearAnchor2D( sx, sy, anchor, axis )\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n  # ## Clone this vector\r\n  # @return a new vector identical to this vector\r\n  clone: () -> return new Vector(@)\r\n\r\n\r\n  # ## Describe this point as a text string\r\n  # @return \"Vector x, y, z\" text\r\n  toString: () -> \"Vector #{ @x }, #{ @y }, #{ @z }\"\r\n\r\n\r\n\r\n\r\n# namespace\r\nthis.Vector = Vector\r\n\n# ### Color is a sensation of electromagnetic radiation, but your mind interprets it with such obstinate attitude that your favorite color may be, god forbids, pink. Or perhaps color is more like music, whose harmony and rhythm evoke emotions, and can be organized in different sequences to create meaningful narratives.\r\n\r\nclass Color extends Vector\r\n\r\n  # ## Create a new Color. Color lets you define a color in a specific mode. [This article](https://software.intel.com/en-us/node/503873) from Intel has a good overview of different color models.\r\n  # @param `args` Set the three values of a color as comma-separated values, as an array, or as an object with `{x, y, z}` properties. Optionally set `alpha` in a 4th parameter, and color mode string in 5th parameter.\r\n  # @eg `new Color()` `new Color(255,100,20)` `new Color([2,4])` `new Color({x:3, y:6, z:9})` `new Color(360,1,1,0.5)`, `new Color(100,50,-50,1,'lab')`\r\n  # @return a new Color object\r\n  constructor: ( args ) ->\r\n    super\r\n\r\n    # ## alpha value from 0 to 1, where 0 is fully transparent, and 1 is fully opaque\r\n    @alpha = if arguments.length >=4 then Math.min( 1, Math.max( arguments[3], 0) ) else 1\r\n\r\n    # ## color mode id such as \"lab\" or \"rgb\"\r\n    @mode = if arguments.length >=5 then arguments[4] else 'rgb'\r\n\r\n\r\n  # ## A property to adject XYZ for Standard Observer 2deg, Daylight/sRGB illuminant D65\r\n  @XYZ = {\r\n    D65: {x: 95.047, y: 100, z: 108.883}\r\n  }\r\n\r\n  ## # A static function `Color.parseHex` to parse a hex string and a Color or rgb array\r\n  # @param `hex` hexadecial string with or without \"#\" in the beginning. It can be \"FF9900\", \"F90\", or \"FF9900CC\" with alpha.\r\n  # @param `asColor` Optional boolean value where the return value will be a `Color` object if set to `true`. Defaults to `false` which returns an array.\r\n  # @eg `Color.parseHex(\"#FF9900\")` `Color.parseHex(\"F90\")` `Color.parseHex(\"FF9900CC\")` `Color.parseHex(\"FF9900\", true)`\r\n  # @return a Color object, or an array [r, g, b]\r\n  @parseHex : (hex, asColor=false) ->\r\n    if hex.indexOf('#') == 0 then hex = hex.substr(1) # remove '#' if needed\r\n    if hex.length == 3 then hex = \"\"+hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]\r\n    if hex.length == 8\r\n      @alpha = hex.substr(6) & 0xFF / 255\r\n      hex = hex.substring(0,6)\r\n\r\n    hexValue = parseInt( hex, 16 )\r\n    rgb = [ hexValue >> 16, hexValue >> 8 & 0xFF, hexValue & 0xFF]\r\n    return if asColor then new Color( rgb[0], rgb[1], rgb[2] ) else rgb\r\n\r\n\r\n  # ## set a color mode and convert current color to new color mode\r\n  # @param `m` a string to specify color mode: 'hsl', 'hsb', 'rgb', 'lab', 'lch', 'xyz'\r\n  # @eg `color.setMode('lab')`\r\n  # @return this Color object with new color mode\r\n  setMode : ( m ) ->\r\n    m = m.toLowerCase()\r\n\r\n    if m != @mode\r\n      switch @mode\r\n        when 'hsl' then @copy( Point.get( Color.HSLtoRGB(@x, @y, @z) ) )\r\n        when 'hsb' then @copy( Point.get( Color.HSBtoRGB(@x, @y, @z) ) )\r\n        when 'lab' then @copy( Point.get( Color.LABtoRGB(@x, @y, @z) ) )\r\n        when 'lch' then @copy( Point.get( Color.LCHtoRGB(@x, @y, @z) ) )\r\n        when 'xyz' then @copy( Point.get( Color.XYZtoRGB(@x, @y, @z) ) )\r\n\r\n\r\n      switch m\r\n        when 'hsl' then @copy( Point.get( Color.RGBtoHSL(@x, @y, @z) ) )\r\n        when 'hsb' then @copy( Point.get( Color.RGBtoHSB(@x, @y, @z) ) )\r\n        when 'lab' then @copy( Point.get( Color.RGBtoLAB(@x, @y, @z) ) )\r\n        when 'lch' then @copy( Point.get( Color.RGBtoLCH(@x, @y, @z) ) )\r\n        when 'xyz' then @copy( Point.get( Color.RGBtoXYZ(@x, @y, @z) ) )\r\n\r\n#    if m != @mode\r\n#      if m is 'rgb' # to RGB\r\n#        if @mode is 'hsl' then @copy( Point.get( Color.HSLtoRGB(@x, @y, @z) ) )\r\n#        if @mode is 'hsb' then @copy( Point.get( Color.HSBtoRGB(@x, @y, @z) ) )\r\n#\r\n#      else if m is 'hsb' # to HSB\r\n#        if @mode is 'rgb' then @copy( Point.get( Color.RGBtoHSB(@x, @y, @z) ) )\r\n#        # # TODO: if @mode is 'hsl' then\r\n#\r\n#      else if m is 'hsl' # to HSL\r\n#        if @mode is 'rgb' then @copy( Point.get( Color.RGBtoHSL(@x, @y, @z) ) )\r\n#        # # TODO: if @mode is 'hsb' then\r\n#\r\n#      else if m is 'xyz'\r\n#        if @mode is 'rgb' then @copy( Point.get( Color.RGBtoXYZ(@x, @y, @z) ) )\r\n#        # # TODO: if @mode is 'hsb' then\r\n\r\n    @mode = m\r\n    return @\r\n\r\n\r\n  # ## Get rgb value as hex string such as '#123456'\r\n  hex: () ->\r\n    if @mode is 'rgb' then @floor() # make sure to get rgb as integer\r\n    cs = @values( (@mode != 'rgb') ) # convert to rgb if needed\r\n\r\n    # pad zero\r\n    _hexstring = (n) ->\r\n      n = n.toString(16)\r\n      if n.length < 2\r\n        return '0'+n\r\n      else\r\n        return n\r\n\r\n    ct = (_hexstring( n ) for n in cs)\r\n    return '#' + ct[0] + ct[1] + ct[2]\r\n\r\n\r\n  # ## Get rgb string such as 'rgb(12,34,56)'\r\n  rgb: () ->\r\n    if @mode is 'rgb' then @floor() # make sure to get rgb as integer\r\n    cs = @values( (@mode != 'rgb') ) # convert to rgb if needed\r\n    \"rgb(#{ cs[0] }, #{ cs[1] }, #{ cs[2] })\"\r\n\r\n\r\n  # ## Get rgba string such as 'rgba(12,34,56, 0.2)'\r\n  rgba: () ->\r\n    if @mode is 'rgb' then @floor() # make sure to get rgb as integer\r\n    cs = @values( (@mode != 'rgb') ) # convert to rgb if needed\r\n    \"rgba(#{ cs[0] }, #{ cs[1] }, #{ cs[2] }, #{ @alpha })\"\r\n\r\n\r\n  # ## Get color values (based on current color mode) as an array\r\n  # @param `toRGB` Optional boolean value to convert to rgb value if set to `true`. Default is false.\r\n  # @return an array of colro values\r\n  values: ( toRGB=false ) ->\r\n    cs = [@x, @y, @z]\r\n    if toRGB and @mode != 'rgb' # convert to rgb first\r\n      switch @mode\r\n        when 'hsl' then cs =  Color.HSLtoRGB(@x, @y, @z)\r\n        when 'hsb' then cs =  Color.HSBtoRGB(@x, @y, @z)\r\n        when 'lab' then cs =  Color.LABtoRGB(@x, @y, @z)\r\n        when 'lch' then cs =  Color.LCHtoRGB(@x, @y, @z)\r\n        when 'xyz' then cs =  Color.XYZtoRGB(@x, @y, @z)\r\n\r\n    return (Math.floor( v ) for v in cs)\r\n\r\n\r\n  # color conversion code ported to coffeescript\r\n  # http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n\r\n  # ## A static function `Color.RGBtoHSL` to convert RGB to HSL\r\n  # @param `r, g, b` red, green, blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.RGBtoHSL(255,70,0)` `Color.RGBtoHSL(1,0.3,0, true)`\r\n  # @return an array of [h, s, l] where h is from 0 to 360, s is from 0 to 1, and l is from 0 to 1.\r\n  @RGBtoHSL : (r, g, b, normalizedInput, normalizedOutput) ->\r\n    if not normalizedInput\r\n      r /= 255\r\n      g /= 255\r\n      b /= 255\r\n\r\n    max = Math.max(r, g, b)\r\n    min = Math.min(r, g, b)\r\n    h = (max + min) / 2\r\n    s = h\r\n    l = h\r\n\r\n    if max == min\r\n      h = 0\r\n      s = 0 # achromatic\r\n    else\r\n      d = max - min\r\n      s = if l > 0.5 then d / (2 - max - min) else d / (max + min)\r\n\r\n      switch max\r\n        when r then h = (g - b) / d + (if g < b then 6 else 0)\r\n        when g then h = (b - r) / d + 2\r\n        when b then h = (r - g) / d + 4\r\n        else h = 0\r\n\r\n    return if normalizedOutput then [h/60, s, l] else [ h*60, s, l]\r\n\r\n\r\n  # ## A static function `Color.HSLtoRGB` to convert HSL to RGB\r\n  # @param `h, s, l` hue, saturation, and lightness. hue value from 0 to 360, saturation and lightness values from 0 to 1\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.HSLtoRGB(360,0.7,0.9)` `Color.HSLtoRGB(1,0.3,0, true)`\r\n  # @demo color.HSLtoRGB\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @HSLtoRGB : ( h, s, l, normalizedInput, normalizedOutput) ->\r\n\r\n    if s == 0\r\n      return if normalizedOutput then [1,1,1] else [255,255,255]\r\n    else\r\n\r\n      if not normalizedInput\r\n        h /= 360 # normalize hue\r\n\r\n      q = if l <= 0.5 then l * (1 + s) else l + s - (l * s)\r\n      p = 2 * l - q;\r\n\r\n      hue2rgb = ( p, q, t ) ->\r\n\r\n        if t < 0\r\n          t += 1\r\n        else if t > 1\r\n          t -= 1\r\n\r\n        if t * 6 < 1\r\n          return p + (q - p) * t * 6\r\n        else if t * 2 < 1\r\n          return q\r\n        else if t * 3 < 2\r\n          return p + (q - p) * ((2 / 3) - t) * 6\r\n        else\r\n          return p\r\n\r\n      r = hue2rgb( p, q, ( h + 1/3 ) )\r\n      g = hue2rgb( p, q, h )\r\n      b = hue2rgb( p, q, ( h - 1/3 ) )\r\n\r\n      return if normalizedOutput then [ r, g, b ] else [r*255, g*255, b*255]\r\n\r\n\r\n  # ## A static function `Color.RGBtoHSB` to convert RGB to HSB\r\n  # @param `r, g, b` red, green, blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.RGBtoHSB(255,70,0)` `Color.RGBtoHSB(1,0.3,0, true)`\r\n  # @return an array of [h, s, b] where h is from 0 to 360, s is from 0 to 1, and b is from 0 to 1.\r\n  @RGBtoHSB : (r, g, b, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      r /= 255\r\n      g /= 255\r\n      b /= 255\r\n\r\n    max = Math.max(r, g, b)\r\n    min = Math.min(r, g, b)\r\n\r\n    d = max - min\r\n    s = if max is 0 then 0 else d / max\r\n    v = max\r\n\r\n    if max is min\r\n      h = 0\r\n    else\r\n      switch max\r\n        when r then h = (g - b) / d + ( if g < b then 6 else 0 )\r\n        when g then h = (b - r) / d + 2\r\n        when b then h = (r - g) / d + 4\r\n        else h = 0\r\n\r\n    return if normalizedOutput then [h / 60, s, v] else [h * 60, s, v]\r\n\r\n\r\n  # ## A static function `Color.HSBtoRGB` to convert HSB to RGB\r\n  # @param `h, s, b` hue, saturation, and brightness. hue value from 0 to 360, saturation and brightness values from 0 to 1\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.HSBtoRGB(360,0.7,0.9)` `Color.HSBtoRGB(1,0.3,0, true)`\r\n  # @demo color.HSBtoRGB\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @HSBtoRGB : (h, s, v, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      h /= 360\r\n\r\n    i = Math.floor(h * 6)\r\n    f = h * 6 - i\r\n    p = v * (1 - s)\r\n    q = v * (1 - f * s)\r\n    t = v * (1 - (1 - f) * s)\r\n\r\n    switch i % 6\r\n      when 0 then rgb = [v, t, p]\r\n      when 1 then rgb = [q, v, p]\r\n      when 2 then rgb = [p, v, t]\r\n      when 3 then rgb = [p, q, v]\r\n      when 4 then rgb = [t, p, v]\r\n      when 5 then rgb = [v, p, q]\r\n      else rgb = [0,0,0]\r\n\r\n    return if normalizedOutput then rgb else [ rgb[0]*255, rgb[1]*255, rgb[2]*255 ]\r\n\r\n\r\n  # ## Static function `Color.RGBtoLAB` transforms RGB to LAB\r\n  # @param `r, g, b` red, green, and blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [L, a, b] where lightness (L) is from 0 to 100, a and b component values are from -128 to 127. red/green colors are represented in a, and yellow/blue colors are represented in b.\r\n  @RGBtoLAB : (r, g, b, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      r *= 255\r\n      g *= 255\r\n      b *= 255\r\n\r\n    xyz = Color.RGBtoXYZ(r,g,b)\r\n    return Color.XYZtoLAB( xyz[0], xyz[1], xyz[2] )\r\n\r\n\r\n  # ## Static function `Color.LABtoRGB` transforms LAB to RGB\r\n  # @param `L, a, b` lightness (L) is from 0 to 100, a and b component values are from -128 to 127. red/green colors are represented in a, and yellow/blue colors are represented in b.\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @demo color.LABtoRGB\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @LABtoRGB : (L, a, b, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      L *= 100\r\n      a = (a-0.5) * 127\r\n      b = (b-0.5) * 127\r\n\r\n    xyz = Color.LABtoXYZ( L, a, b)\r\n    rgb = Color.XYZtoRGB( xyz[0], xyz[1], xyz[2] )\r\n    return if normalizedOutput then [ rgb[0]/255, rgb[1]/255, rgb[2]/255 ] else rgb\r\n\r\n  # ## Static function `Color.RGBtoLCH` transforms RGB to LCH (Cylindrical Lab)\r\n  # @param `r, g, b` red, green, and blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [L, c, h] where lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  @RGBtoLCH : (r, g, b, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      r *= 255\r\n      g *= 255\r\n      b *= 255\r\n\r\n    lab = Color.RGBtoLAB(r,g,b)\r\n    lch = Color.LABtoLCH( lab[0], lab[1], lab[2] )\r\n    return if normalizedOutput then [ lch[0]/100, lch[1]/100, lch[2]/360 ] else lch\r\n\r\n\r\n  # ## Static function `Color.LCHtoRGB` transforms LCH to RGB\r\n  # @param `L, c, h` lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @LCHtoRGB : (L, c, h, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      L *= 100\r\n      c *= 100\r\n      h *= 360\r\n\r\n    lab = Color.LCHtoLAB( L, c, h )\r\n    xyz = Color.LABtoXYZ( lab[0], lab[1], lab[2])\r\n    rgb = Color.XYZtoRGB( xyz[0], xyz[1], xyz[2] )\r\n    return if normalizedOutput then [ rgb[0]/255, rgb[1]/255, rgb[2]/255 ] else rgb\r\n\r\n\r\n  # ## Static function `Color.XYZtoRGB` to convert XYZ to RGB. This is usually used when converting between LAB and RGB.\r\n  # @param `x, y, z` x, y, z values from 0 to 100\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @XYZtoRGB : (x, y, z, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      x = x / 100\r\n      y = y / 100\r\n      z = z / 100\r\n\r\n    rgb = [\r\n      x *  3.2404542 + y * -1.5371385 + z * -0.4985314\r\n      x * -0.9692660 + y *  1.8760108 + z *  0.0415560\r\n      x *  0.0556434 + y * -0.2040259 + z *  1.0572252\r\n    ]\r\n\r\n    # convert xyz to rgb. Note that not all colors are visible in rgb, so here we bound rgb between 0 to 1\r\n    for c, i in rgb\r\n      if c < 0\r\n        rgb[i] = 0\r\n      else\r\n        rgb[i] = Math.min( 1, if ( c > 0.0031308 ) then 1.055 * ( Math.pow( c, 1/2.4 ) ) - 0.055 else 12.92 * c )\r\n\r\n#    r = if ( r > 0.0031308 ) then 1.055 * ( Math.pow( r, 1/2.4 ) ) - 0.055 else (if r < 0 then 0 else 12.92 * r)\r\n#    g = if ( g > 0.0031308 ) then 1.055 * ( Math.pow( g, 1/2.4 ) ) - 0.055 else (if g < 0 then 0 else 12.92 * g)\r\n#    b = if ( b > 0.0031308 ) then 1.055 * ( Math.pow( b, 1/2.4 ) ) - 0.055 else (if b < 0 then 0 else 12.92 * b)\r\n\r\n    return if normalizedOutput then rgb else [ Math.round(rgb[0] * 255), Math.round(rgb[1] * 255), Math.round(rgb[2] * 255) ]\r\n\r\n\r\n  # ## A static function `Color.RGBtoXYZ` to convert RGB to XYZ. This is usually used when converting between LAB and RGB.\r\n  # @param `r, g, b` red, green, blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [x, y, z] where each value is from 0 to 100\r\n  @RGBtoXYZ : (r, g, b, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      r = ( r / 255 )\r\n      g = ( g / 255 )\r\n      b = ( b / 255 )\r\n\r\n    r = if ( r > 0.04045 ) then Math.pow( ( r + 0.055 ) / 1.055, 2.4 ) else r / 12.92\r\n    g = if ( g > 0.04045 ) then Math.pow( ( g + 0.055 ) / 1.055, 2.4 ) else g / 12.92\r\n    b = if ( b > 0.04045 ) then Math.pow( ( b + 0.055 ) / 1.055, 2.4 ) else b / 12.92\r\n\r\n    if not normalizedOutput\r\n      r = r * 100\r\n      g = g * 100\r\n      b = b * 100\r\n\r\n    return [\r\n      r * 0.4124564 + g * 0.3575761 + b * 0.1804375\r\n      r * 0.2126729 + g * 0.7151522 + b * 0.0721750\r\n      r * 0.0193339 + g * 0.1191920 + b * 0.9503041\r\n    ]\r\n\r\n\r\n  # ## Static function `Color.XYZtoLAB` to convert XYZ to LAB.\r\n  # @param `x, y, z` x, y, z values from 0 to 100\r\n  # @return an array of [l, a, b] where lightness (L) is from 0 to 100, a and b values are from -128 to 127\r\n  @XYZtoLAB : (x, y, z) ->\r\n\r\n    # adjusted\r\n    x = x / Color.XYZ.D65.x\r\n    y = y / Color.XYZ.D65.y\r\n    z = z / Color.XYZ.D65.z\r\n\r\n    calc = (n) ->\r\n      return if ( n > 0.008856 ) then Math.pow(n, 1/3) else (7.787 * n) + 16/116\r\n\r\n    cy = calc( y )\r\n\r\n    return [\r\n      ( 116 * cy ) - 16\r\n      500 * ( calc(x) - cy )\r\n      200 * ( cy - calc(z) )\r\n    ]\r\n\r\n  # ## Static function `Color.LABtoXYZ` to convert LAB to XYZ.\r\n  # @param `L, a, b` lightness (L) is from 0 to 100, a and b component values are from -128 to 127\r\n  # @return an array of [x, y, z] where each value is from 0 to 100\r\n  @LABtoXYZ : (L, a, b) ->\r\n    y = ( L + 16 ) / 116\r\n    x = a / 500 + y\r\n    z = y - b / 200\r\n\r\n    calc = (n) ->\r\n      nnn = Math.pow(n,3)\r\n      return if ( nnn > 0.008856 ) then nnn else ( n - 16 / 116 ) / 7.787\r\n\r\n    # adjusted\r\n    xyz = [\r\n      Math.min( Color.XYZ.D65.x, Color.XYZ.D65.x * calc(x) )\r\n      Math.min( Color.XYZ.D65.y, Color.XYZ.D65.y * calc(y) )\r\n      Math.min( Color.XYZ.D65.y, Color.XYZ.D65.z * calc(z) )\r\n    ]\r\n\r\n    return xyz\r\n\r\n  # ## Static function `Color.XYZtoLUV` to convert XYZ to LUV.\r\n  # @param `x, y, z` x, y, z values from 0 to 100\r\n  # @return an array of [l, u, v] where lightness is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  @XYZtoLUV : (x, y, z) ->\r\n    u = ( 4 * x ) / ( x + ( 15 * y ) + ( 3 * z ) )\r\n    v = ( 9 * y ) / ( x + ( 15 * y ) + ( 3 * z ) )\r\n\r\n    y = y / 100\r\n    y = if ( y > 0.008856 ) then Math.pow( y, 1/3 ) else ( 7.787 * y + 16 / 116 )\r\n\r\n    refU = ( 4 * Color.XYZ.D65.x ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n    refV = ( 9 * Color.XYZ.D65.y ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n\r\n    L = ( 116 * y ) - 16\r\n    return [\r\n      L\r\n      13 * L * ( u - refU )\r\n      13 * L * ( v - refV )\r\n    ]\r\n\r\n  # ## Static function `Color.LUVtoXYZ` to convert LUV to XYZ.\r\n  # @param `L, u, v` lightness (L) is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  # @return an array of [x, y, z] where each value is from 0 to 100\r\n  @LUVtoXYZ : (L, u, v) ->\r\n    y = ( L + 16 ) / 116\r\n    cubeY = y*y*y\r\n    y = if ( cubeY > 0.008856 ) then cubeY else ( y - 16 / 116 ) / 7.787\r\n\r\n    refU = ( 4 * Color.XYZ.D65.x ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n    refV = ( 9 * Color.XYZ.D65.y ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n\r\n    u = u / ( 13 * L ) + refU\r\n    v = v / ( 13 * L ) + refV\r\n\r\n    y = y*100\r\n    x = -1 * (9 * y * u) / ( (u - 4) * v  - u * v )\r\n    return [ x, y,  ( 9 * y - (15 * v * y) - (v * x) ) / (3 * v ) ]\r\n\r\n\r\n  # ## Static function `Color.LABtoLCH` transforms LAB to Cylindrical LCH\r\n  # @param `L, a, b` lightness (L) is from 0 to 100, a and b component values are from -128 to 127\r\n  # @return an array of [l, c, h] where lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  @LABtoLCH : (L, a, b) ->\r\n    h = Math.atan2( b, a )  # Quadrant by signs\r\n    h = if ( h > 0 ) then (180 * h / Math.PI) else 360 - ( 180 * Math.abs( h ) / Math.PI )\r\n    return [L, Math.sqrt( a*a + b*b ), h]\r\n\r\n\r\n  # ## Static function `Color.LCHtoLAB` transforms Cylindrical LCH to LAB\r\n  # @param `L, c, h` lightness (L) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  # @return an array of [l, a, b] where lightness (L) is from 0 to 100, a and b values are from -128 to 127\r\n  @LCHtoLAB : (L, c, h) ->\r\n    radH = Math.PI * h / 180\r\n    return [\r\n      L\r\n      Math.cos( radH ) * c\r\n      Math.sin( radH ) * c\r\n    ]\r\n\r\n  # ## Static function `Color.LUVtoLCH` to convert LUV to LCH.\r\n  # @param `L, u, v` lightness (L) is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  # @return an array of [l, c, h] where lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  @LUVtoLCH : (L, u, v) -> LABtoLCH( L, u, v )\r\n\r\n  # ## Static function `Color.LCHtoLUV` transforms Cylindrical LCH to LUV\r\n  # @param `L, c, h` lightness (L) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  # @return an array of [l, u, v] where lightness is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  @LCHtoLUV : (L, c, h) -> LCHtoLAB( L, c, h )\r\n\r\n\r\n# namespace\r\nthis.Color = Color\n# ### Imagine this shape: find a point in space, and draw a curve around it so that the distance between the point you picked and any points on that curve is the same. So by remembering how a circle can be constructed, and by considering PI not as a number but as a ratio, we can start to recognize all the expressive potentials of a circle.\r\n\r\nclass Circle extends Vector\r\n\r\n  # ## Create a new Circle. A Circle is a Vector which defines its center position, with a `radius` property to define its radius.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or a Point object as parameters to specify the center of circle. Optionally include a 4th parameter to set the radius directly, or use `setRadius()` afterwards.\r\n  # @eg `new Circle()` `new Circle(1,2,3)` `new Circle(1,2,3,100)`\r\n  # @return a new Circle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## the radius property\r\n    @radius = if arguments[3]? then arguments[3] else 0 # radius as 4th argument\r\n\r\n  # ## set radius of the circle\r\n  # @param `r` radius value\r\n  # @return this Circle\r\n  setRadius: ( r ) ->\r\n    @radius = r\r\n    return @\r\n\r\n\r\n  # ## Check if a point is on this Circle on xy axis.\r\n  # @param `args` comma-separated values, or an array, or a Point object\r\n  # @eg `circle.intersectPoint(1,2,3)` `circle.intersectPoint(pt)`\r\n  # @demo circle.intersectPoint\r\n  # @return a boolean value to indicate if there is an intersection\r\n  intersectPoint: (args) ->\r\n    item = new Vector( Point.get(arguments) )\r\n    d = item.$subtract( @ )\r\n    return (d.x * d.x + d.y * d.y <  @radius * @radius )\r\n\r\n\r\n  # ## Check intersections between this Circle and an infinite Line on xy axis. Based on [this algorithm](http://stackoverflow.com/questions/13053061/circle-line-intersection-points).\r\n  # @param `path` a Pair or Line object to specify an infinite line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @demo circle.intersectPath\r\n  # @returns an Array of intersection points (zero, one, or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectPath: ( path, get_pts=true ) ->\r\n    if not path instanceof Pair then return false\r\n\r\n    d = path.direction()\r\n    f = @.$subtract( path )\r\n\r\n    a = d.dot(d, Const.xy)\r\n    b = f.dot(d, Const.xy)\r\n    c = f.dot(f, Const.xy) - ( @radius * @radius )\r\n    p = b / a\r\n    q = c / a\r\n    disc = p * p - q # discriminant\r\n\r\n    if disc < 0\r\n      return (if get_pts then [] else false)\r\n    else\r\n      if !get_pts then return true\r\n\r\n      discSqrt = Math.sqrt( disc )\r\n      t1 = -p + discSqrt\r\n      t2 = -p - discSqrt\r\n\r\n      p1 = new Point( path.x - d.x * t1, path.y - d.y * t1 )\r\n      p2 = new Point( path.x - d.x * t2, path.y - d.y * t2 )\r\n\r\n      return if disc == 0 then [p1] else [p1, p2]\r\n\r\n\r\n#    a = d.x * d.x + d.y * d.y\r\n#    b = d.x * f.x + d.y * f.y\r\n#    c = ( f.x * f.x + f.y * f.y ) - ( @radius * @radius )\r\n#    p = b / a\r\n#    q = c / a\r\n#    disc = p * p - q\r\n#\r\n#    if disc < 0\r\n#      return []\r\n#    else\r\n#      discSqrt = Math.sqrt( disc )\r\n#      t1 = -p + discSqrt\r\n#      t2 = -p - discSqrt\r\n#\r\n#      p1 = new Point( ray.x - d.x * t1, ray.y - d.y * t1 )\r\n#      p2 = new Point( ray.x - d.x * t2, ray.y - d.y * t2 )\r\n#\r\n#      return if disc == 0 then [p1] else [p1, p2]\r\n\r\n\r\n  # ## Check intersections between this Circle and a Line segment on xy axis.\r\n  # @param `line` a Pair or Line object to specify a line segment\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero, one, or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLine: ( line, get_pts=true ) ->\r\n\r\n    # check ray\r\n    pts = @intersectPath( line )\r\n    if pts and pts.length > 0\r\n\r\n      # check intersected point is within line bounding box\r\n      pi = []\r\n      bounds = line.bounds()\r\n      for p in pts\r\n        if Rectangle.contain( p, bounds, bounds.p1 )\r\n          if !get_pts then return true\r\n          pi.push( p )\r\n\r\n      return (if get_pts then pi else (pi.length>0) )\r\n    else\r\n      return (if get_pts then [] else false)\r\n\r\n\r\n  # ## Check if this cirlce intersects with a set of lines ( useful for polygon or polyline such as `rectangle.sides()` ) on xy axis.\r\n  # @param `lines` an array of Line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @eg `circle.intersectLines( rect.sides() )` `circle.intersectLines( pointset.sides(), true )`\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLines: (lines, get_pts=true) ->\r\n    return Line.intersectLines( @, lines, get_pts )\r\n\r\n\r\n  # ## Check if this circle intersects with another circle\r\n  # @param `circle` another Circle\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @demo circle.intersectCircle\r\n  # @returns an Array of intersection points (zero or two points) or a boolean value, based on `get_pts` parameter.\r\n  intersectCircle: (circle, get_pts=true) ->\r\n    dv = circle.$subtract( @ )\r\n    dr2 = dv.magnitude(false)\r\n    dr = Math.sqrt( dr2 )\r\n\r\n    ca_r2 = @radius * @radius\r\n    cb_r2 = circle.radius * circle.radius\r\n\r\n    if dr > @radius + circle.radius # not intersected\r\n      return (if get_pts then [] else false)\r\n\r\n    else if dr < Math.abs( @radius - circle.radius ) # completely enclosing the other, no intersecting points\r\n      return (if get_pts then [ new Vector(this), new Vector(circle) ] else true)\r\n\r\n    else # has two intersection points\r\n      if !get_pts then return true\r\n\r\n      a = (ca_r2 - cb_r2 + dr2) / (2*dr)\r\n      h = Math.sqrt( ca_r2 - a*a )\r\n      p = dv.$multiply(a/dr).add(@)\r\n\r\n      return [\r\n        new Vector( (p.x + h*dv.y/dr), (p.y - h*dv.x/dr) )\r\n        new Vector( (p.x - h*dv.y/dr), (p.y + h*dv.x/dr) )\r\n      ]\r\n\r\n\r\n  # ## Check if this cirlce intersect with another element on xy axis\r\n  # @param `item` any object that is based on Point. (Vector, Line, Rectangle, Circle, etc)\r\n  # @eg `circle.hasIntersect( another_circle )` `circle.hasIntersect(line)` `circle.hasIntersect(rect)`\r\n  # @returns an Array of intersection points or a boolean value. (Based on `get_pts` parameter)\r\n  hasIntersect: (item, get_pts=false) ->\r\n\r\n    # circle intersection check\r\n    if item instanceof Circle\r\n      return @intersectCircle( item, get_pts )\r\n\r\n    # polygon intersection check (TODO any better algorithm?)\r\n    else if item instanceof Rectangle or item instanceof PointSet or item instanceof Triangle\r\n      return @intersectLines(item.sides(), get_pts)\r\n\r\n    # line intersection check\r\n    else if item instanceof Pair\r\n      ins = @intersectLine(item)\r\n      return if !get_pts then (ins.length > 0) else ins\r\n\r\n    # point intersection check\r\n    else if item instanceof Point\r\n      d = item.$subtract( @ )\r\n      return (d.x * d.x + d.y * d.y < @radius * @radius)\r\n\r\n    else\r\n      return if get_pts then [] else false\r\n\r\n\r\n# namespace\r\nthis.Circle = Circle\n# ### If a point represents a static concept in space, then a particle resembles an energized thought. It dashes, brakes, and swirls about. By emulating how forces integrate and energies exchange, we may examine dynamic systems and continuous movements from a new perspective.\r\nclass Particle extends Circle\r\n\r\n  # derivative of momentum is force (F=dp/dt)\r\n  # derivative of position is velocity (v=dx/dt)\r\n  # derivative of velocity is acceleration (a=dv/dt)\r\n  # Force = mass * acceleration (F=ma)\r\n  # Momentum = mass * velocity (p=mv)\r\n\r\n  # ## Create a new Particle. Like a Circle, specify its center position with a `radius` property to define its radius.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or a Point object as parameters to specify the center of circle. Optionally include a 4th parameter to set the radius directly, or use `setRadius()` afterwards.\r\n  # @eg `new Particle()` `new Particle(1,2,3)` `new Particle(1,2,3,100)`\r\n  # @return a new Circle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## A property to store this particle's id\r\n    @id = 0\r\n\r\n    # ## A property to track this particle's states. An object with properties `.age` and `.maxAge` and a boolean proeprty `.active`\r\n    @life = {age: 0, maxAge: 0, active: true, complete: false}\r\n\r\n    # ## A property to track this particle's momentum as a Vector\r\n    @momentum = new Vector()\r\n\r\n    # ## A property to track this particle's velocity as a Vector\r\n    @velocity = new Vector()\r\n\r\n    # ## A property to specify this particle's mass value. Default is 2.\r\n    @mass = 2\r\n\r\n    # ## A property to specify this particle's friction. Defaulti is 0.\r\n    @friction = 0\r\n\r\n    # A property to specify how many frames per milliseconds, for timeStep integration. Default is 20 ms (1000/48 (48 fps) = ~20ms).\r\n    @frame_ms = 20\r\n\r\n\r\n  # ## Play the particle for one time-step.\r\n  # @param `time` current time in milliseconds\r\n  # @param `timeDiff` time difference between last and current step, ie, the time of a frame.\r\n  # @demo particle.play\r\n  play: ( time, timeDiff ) ->\r\n    t = 0\r\n    while timeDiff > 0\r\n      dt = Math.min( timeDiff, @frame_ms )\r\n      @integrate(t/1000, dt/1000 ); # unit is seconds\r\n      timeDiff -= dt\r\n      t += dt\r\n      @life.age++\r\n\r\n\r\n\r\n  # ## Integrate function using Runge-Kutta-4. Override this function to specify other integrator, such as Euler or Verlet.\r\n  # @param `t` current time in *seconds*\r\n  # @param `dt` time difference between last and current step, in *seconds*\r\n  integrate: (t, dt) ->\r\n    @integrateRK4(t, dt)\r\n\r\n\r\n  # ## Calculate all forces acting on this particle. This is called by integrate function. Override this function to implement specific force calculations.\r\n  # @param `state` a object with `position` and `momentum` Vectors\r\n  # @param `t` curent time in seconds\r\n  # @eg `p.forces( {position: new Vector(), momentum: new Vector()}, t+dt )`\r\n  # @return an object with `force` property\r\n  forces: (state, t) ->\r\n    return {force: new Vector()}\r\n\r\n  # ## Apply an impulse to this particle's `momentum` and `velocity` properties\r\n  # @param `force_dt` a force Vector\r\n  impulse: ( force_dt ) ->\r\n    @momentum.add( force_dt )\r\n    @velocity = @momentum.$divide( @mass )\r\n\r\n\r\n  # For RK4 integration: update position, momentum and velocity. calculate force.\r\n  _evaluate : (t, dt=0, derivative=false) ->\r\n\r\n    # integrate at time dt\r\n    if dt != 0 and derivative\r\n\r\n      state = {\r\n        position: @$add( derivative.velocity.$multiply( dt ) )\r\n        momentum: @momentum.$add( derivative.force.$multiply( dt ) )\r\n      }\r\n\r\n    else\r\n      state = { position: new Vector(@), momentum: new Vector(@momentum) }\r\n\r\n    # recalculate velocity\r\n    state.velocity = state.momentum.$divide( @mass )\r\n\r\n    # calculate force\r\n    f = @forces( state, t+dt )\r\n\r\n    return { velocity: state.velocity, force: f.force }\r\n\r\n\r\n  # ## Runge-Kutta-4 integration\r\n  # @param `t` current time in *seconds*\r\n  # @param `dt` time difference between last and current step, in *seconds*\r\n  integrateRK4: (t, dt) ->\r\n\r\n    # rk4 calculations (adapted based on the algorithm on gafferongames.com)\r\n    _map = (m1, m2, m3, m4) ->\r\n      v = new Vector(\r\n        (m1.x + 2*(m2.x+m3.x) + m4.x) / 6\r\n        (m1.y + 2*(m2.y+m3.y) + m4.y) / 6\r\n        (m1.z + 2*(m2.z+m3.z) + m4.z) / 6\r\n      )\r\n\r\n      return v\r\n\r\n    a = @_evaluate(t, 0)\r\n    b = @_evaluate(t, dt*0.5, a)\r\n    c = @_evaluate(t, dt*0.5, b)\r\n    d = @_evaluate(t, dt, c)\r\n\r\n    @add( _map( a.velocity, b.velocity, c.velocity, d.velocity ) )\r\n    @momentum.add( _map( a.force, b.force, c.force, d.force ) )\r\n\r\n\r\n  # ## Simple Euler integration using momentum\r\n  # @param `t` current time in *seconds*\r\n  # @param `dt` time difference between last and current step, in *seconds*\r\n  integrateEuler: (t, dt) ->\r\n\r\n    f = @forces( { position: new Vector(@), momentum: new Vector(@momentum) }, t+dt )\r\n    @add( @velocity )\r\n    @momentum.add( f.force )\r\n    @velocity = @momentum.$divide( @mass )\r\n\r\n\r\n  # ## check Collision with a line segment (wall), and calculate the resulting velocity and momentum\r\n  # @param `wall` a Line object to check collision against\r\n  # @param `precise` a boolean value to specify a precise collision calculation. If `true`, then the particle position will be recalculated to match the exact collision position with the line. Default is true.\r\n  # @demo particle.collideLine2d\r\n  # @return a boolean value to indicate if collision occurs\r\n  collideLine2d: ( wall, precise=true ) ->\r\n\r\n    # this can be optimized by calculating the normalized velocity and wall vectors (used in various Line functions)\r\n\r\n    curr_pos = new Vector(@)\r\n    curr_dist = Math.abs( wall.getDistanceFromPoint( curr_pos ) )\r\n    collided = Math.abs(curr_dist) < @radius\r\n\r\n    # if precision is on, find the next position and check if the next position completely crossed the wall (when speed is very fast)\r\n    if precise\r\n      next_pos = @$add( @velocity )\r\n      next_dist = Math.abs( wall.getDistanceFromPoint( next_pos ) )\r\n      crossed = wall.intersectLine( new Line( curr_pos ).to( next_pos ) )\r\n\r\n      if crossed\r\n        next_pos = crossed.$add( @velocity.$normalize().$multiply(-@radius/2) )\r\n        next_dist = Math.abs( wall.getDistanceFromPoint( next_pos ) )\r\n        collided = true\r\n\r\n    if collided\r\n\r\n      pt_on_wall = wall.getPerpendicularFromPoint( curr_pos ) # normal point on wall\r\n      wall_path = wall.$subtract( wall.p1 )\r\n\r\n      collideEndPt = false\r\n\r\n      # intersecting with wall segment\r\n      if !wall.withinBounds( pt_on_wall, Const.xy )\r\n\r\n        # check if colliding with end pt\r\n        if @intersectPoint( wall )\r\n          collideEndPt = true\r\n          end_path = @$subtract( wall )\r\n\r\n        if @intersectPoint( wall.p1 )\r\n          collideEndPt = true\r\n          end_path = @$subtract( wall.p1 )\r\n\r\n        if collideEndPt\r\n          wall_path = new Vector( -end_path.y, end_path.x ) # treating it like colliding with zero-radius point\r\n\r\n        else\r\n          return false\r\n\r\n      # find project and resulting velocity\r\n      dot = wall_path.dot( @velocity )\r\n      proj = wall_path.$multiply( (dot / wall_path.dot( wall_path )) )\r\n      tangent = proj.$subtract( @velocity )\r\n\r\n      @velocity = proj.$add(tangent)\r\n      @momentum = @velocity.$multiply( @mass )\r\n\r\n\r\n      # Recalculate last position before collision if precision needed\r\n      if precise and !collideEndPt\r\n\r\n        # normal on wall to curr_pos\r\n        perpend = new Line( pt_on_wall ).to( curr_pos )\r\n\r\n        # line segment of two points on wall\r\n        prev_pt_on_wall = wall.getPerpendicularFromPoint( next_pos )\r\n        path = new Line( pt_on_wall ).to( prev_pt_on_wall )\r\n        pvec = path.direction()\r\n\r\n        # interpolate the point where the collision occurs\r\n        r = (@radius-curr_dist) / (next_dist-curr_dist)\r\n        pt = pvec.$multiply( r ).$add( path )\r\n        pt2 = pt.$add( perpend.direction().$normalize().$multiply( @radius ) )\r\n\r\n        # set new position\r\n        @set( pt2.$add( @velocity.$normalize() ) )\r\n\r\n    return collided\r\n\r\n\r\n  # ## Check if a particle hits the boundaries within a box, and calculate the resulting velocity and momentum. Precise collision positioning are not implemented.\r\n  # @param `bound` a Rectangle object to specify a bounding box`\r\n  # @return a boolean value to indicate if collision occurs\r\n  collideWithinBounds: ( bound ) ->\r\n\r\n    if @x - @radius < bound.x or @x + @radius > bound.p1.x\r\n\r\n      if @x - @radius < bound.x # fast but not totally accurate. Would be better to check the trajectory like in collideLine2D.\r\n        @x = bound.x + @radius;\r\n      else if @x + @radius > bound.p1.x\r\n        @x = bound.p1.x - @radius;\r\n\r\n      @velocity.x *= -1\r\n      @momentum = @velocity.$multiply( @mass )\r\n      return true\r\n\r\n    else if @y - @radius < bound.y or @y + @radius > bound.p1.y\r\n      if @y - @radius < bound.y\r\n        @y = bound.y + @radius;\r\n      else if @y + @radius > bound.p1.y\r\n        @y = bound.p1.y - @radius;\r\n\r\n      @velocity.y *= -1\r\n      @momentum = @velocity.$multiply( @mass )\r\n      return true\r\n\r\n    return false\r\n\r\n\r\n  # ## Check 2D collision with another particle, and calculate the resulting velocity and momentum. Precise collision positioning are not implemented.\r\n  # @param `pb` another Particle\r\n  # @return an array of 2 Vectors, representing this and the other particle's resulting velocity. Or `false` if collision doesn't occur.\r\n  collideParticle2d: ( pb ) ->\r\n\r\n    if @hasIntersect( pb )\r\n      return Particle.collideParticle2d( @, pb, true )\r\n\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Static function to calculate velocity and momentum after 2D collision, without precise coliision positioning. Remember to check intersection/collision before calling this.\r\n  # @param `pa, pb` two Particles\r\n  # @param `update` a boolean value to update the velocity and momentum of the two particle directly if set to `true`. Default is true.\r\n  # @return an array of 2 Vectors, representing this and the other particle's resulting velocity.\r\n  @collideParticle2d: (pa, pb, update=true, checkOverlap=true) ->\r\n\r\n    # normal and tangent vector of 2 particles on contact\r\n    normal = pa.$subtract(pb).normalize()\r\n    tangent = new Vector( -normal.y, normal.x )\r\n\r\n    # dot products\r\n    dot1n = normal.dot( pa.velocity )\r\n    dot1t = tangent.dot( pa.velocity )\r\n    dot2n = normal.dot( pb.velocity )\r\n    dot2t = tangent.dot( pb.velocity )\r\n\r\n    # final velocity (one dimension)\r\n    d1 = ( dot1n * (pa.mass - pb.mass) + 2 * pb.mass * dot2n ) / (pa.mass + pb.mass)\r\n    d2 = ( dot2n * (pb.mass - pa.mass) + 2 * pa.mass * dot1n ) / (pa.mass + pb.mass)\r\n\r\n    # final veloctiy (vector)\r\n    v1n = normal.$multiply( d1 )\r\n    v1t = tangent.$multiply( dot1t )\r\n    v2n = normal.$multiply( d2 )\r\n    v2t = tangent.$multiply( dot2t )\r\n\r\n    pav = v1n.$add( v1t )\r\n    pbv = v2n.$add( v2t )\r\n\r\n    # check if two particles are overlapping, if so, push them apart\r\n    if checkOverlap\r\n      mag = pa.magnitude( pb );\r\n      if mag < pa.radius + pb.radius\r\n        dir= pa.$subtract( pb ).normalize()\r\n        magDiff = Math.abs(mag - pa.radius - pb.radius) / 1.98;\r\n        pa.add( dir.multiply( magDiff ) );\r\n        pb.add( dir.multiply( -magDiff ) );\r\n\r\n    if update\r\n      pa.velocity = pav\r\n      pb.velocity = pbv\r\n\r\n      pa.momentum = pa.velocity.$multiply( pa.mass )\r\n      pb.momentum = pb.velocity.$multiply( pb.mass )\r\n\r\n    return [pav, pbv]\r\n\r\n\r\n  # ## Static function to calculate gravitational forces between 2 particles. This can be used as an implementation of `forces()` function\r\n  # @param `state` a object with `position` and `momentum` Vectors\r\n  # @param `t` curent time in seconds\r\n  # @param `pa, pb` two Particles\r\n  # @param `g` optional gravitational constant. Defaults to 0.0067.\r\n  # @return an object with `force` property\r\n  @force_gravitation: (state, t, pa, pb, g=0.0067) ->\r\n    meterToPixel = 30\r\n\r\n    d = pb.$subtract( state.position )\r\n    mag = d.magnitude() / meterToPixel\r\n    force = if mag == 0 then 0 else t * g * pa.mass * pb.mass / (mag*mag)\r\n    d.normalize().multiply( force )\r\n\r\n    return {force: d}\r\n\r\n\r\n  # ## Static function of Runge-Kutta-4 integrator (adopted from gafferongames.com)\r\n  # @param `c, d` the derivative of c is d. If c is position, then d is velocity.\r\n  # @param `func` acceleration function(c, d, dt, t)\r\n  # @param `dt` change in time\r\n  # @param `t` current time\r\n  # @return an object with `{c, d}` properties where the derivative of c is d.\r\n  @RK4: (c, d, func, dt, t) ->\r\n\r\n    c1 = c\r\n    d1= d\r\n    a1 = func(c1, d1, 0, t)\r\n\r\n    c2 = c + 0.5*d1*dt\r\n    d2 = d + 0.5*a1*dt\r\n    a2 = func(c2, d2, dt/2, t)\r\n\r\n    c3 = c + 0.5*d2*dt\r\n    d3 = d + 0.5*a2*dt\r\n    a3 = func(c3, d3, dt/2, t)\r\n\r\n    c4 = c + d3*dt\r\n    d4 = d + a3*dt\r\n\r\n    dc = (c1 + 2*(c2+c3) + c4) / 6\r\n    dd = (d1 + 2*(d2+d3) + d4) / 6\r\n\r\n    return { c: c + dc*dt, d: d + dd*dt }\r\n\r\n# namespace\r\nthis.Particle = Particle\n# ### A particle system keeps track of particles, and regulate them with rules specific to a system. It can also hold constant values from gravitational to cosmic, and specify whether a god may play dice here.\r\nclass ParticleSystem\r\n\r\n  # ## Create a ParticleSystem to track a set of particles\r\n  constructor : () ->\r\n\r\n    # ## a property to store particles in this system as an Array\r\n    @count = 0\r\n    @particles = []\r\n\r\n    # ## a property to track time in milliseconds\r\n    @time = 0\r\n\r\n    # @animateID = -1\r\n\r\n\r\n  # ## add a particle to the system\r\n  # @param `particle` a Particle\r\n  # @return this system\r\n  add : ( particle ) ->\r\n    particle.id = @count++\r\n    @particles.push( particle )\r\n    return @\r\n\r\n\r\n  # ## remove a particle which has a `particle.life` property. This marks the `particle.life.complete` as `true` for removal in next cycle.\r\n  # @param `particle` a Particle\r\n  # @return this system\r\n  remove: (particle) ->\r\n    if particle and particle.life then particle.life.complete = true\r\n    return @\r\n\r\n\r\n  # ## animate callback function which is called by` Space.play()`. Override this callback function to specify other animation loops\r\n  # @param `time, frame, ctx` parameters for current time, fps, and rendering context, which will be passed by `Space` in callback\r\n  animate : ( time, frame, ctx ) ->\r\n    @time++\r\n\r\n    _remove = []; # to be removed\r\n\r\n    for p, i in @particles\r\n\r\n      # if life is complete, mark for removal\r\n      if p.life.complete\r\n        _remove.push( i )\r\n\r\n      # if active, animate it\r\n      else if p.life.active\r\n        p.animate( time, frame, ctx )\r\n\r\n    # remove completed particles\r\n    if _remove.length > 0\r\n      for index in _remove\r\n        @particles.splice(index, 1)\r\n\r\n\r\n\r\n# namespace\r\nthis.ParticleSystem = ParticleSystem\r\n\r\n\n# ### A pair of vectors is not merely two vectors, for relationships bring forth meanings. Two vectors can be compared, joined, and interpreted in relation to each other. Together they may connect a line, mark an area, track a change.\r\nclass Pair extends Vector\r\n\r\n  # ## Create a new Pair. A Pair is a Vector which defines its anchor point, and connected to another Vector through the `to()` function.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to `to()`, you can also pass 4 or 6 values to set both anchor and `p1` points directly as a 2d or 3d vector.\r\n  # @eg `new Pair()` `new Pair(1,2,3)` `new Pair([2,4])` `new Pair({x:3, y:6, z:9}).to(1,2,3)`, `new Pair(10,10, 20,20)`\r\n  # @return a new Pair object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## A vector object which is other point in this pair.\r\n    @p1 = new Vector( @x, @y, @z )\r\n\r\n    if arguments.length == 4\r\n      @z = 0\r\n      @p1.set( arguments[2], arguments[3] )\r\n    else if arguments.length == 6\r\n      @p1.set( arguments[3], arguments[4], arguments[5] )\r\n\r\n\r\n  # ## connect the other point\r\n  # @param `args` comma-separated values, or an array, or an object\r\n  # @eg `pair.to(1,2,3)` `new Pair(1,2).to(3,4)`\r\n  # @return this Pair\r\n  to: () ->\r\n    @p1 = new Vector( Point.get(arguments) )\r\n    return @\r\n\r\n\r\n  # ## Get a point from the set of points based on its index position\r\n  # @param `index` index position\r\n  # @return a point in the pair\r\n  getAt: (index) ->\r\n    if (index==1 or index==\"p1\") then return @p1;\r\n    return @;\r\n\r\n\r\n  # ## Same as `getAt()` but return as a new Vector\r\n  $getAt: (index) -> return new Vector( @getAt(index) );\r\n\r\n\r\n  # ## Update p1's new position by recalculating it as a relative position to the anchor point\r\n  # @return this Pair\r\n  relative: () ->\r\n    @p1.add( @ )\r\n    return @\r\n\r\n  # ## Return a new vector of p1's new position, by recalculating it as a relative position to the anchor point\r\n  # @return a new Vector\r\n  $relative: () -> @$add( @p1 )\r\n\r\n\r\n  # ## Get a new pair that's the bounding box of this pair. This is the same as calculating its top-left (min) and bottom-right (max) points.\r\n  # @return a new Pair\r\n  bounds: () ->\r\n    return new Pair( @$min(@p1) ).to( @$max(@p1) )\r\n\r\n  # ## Check if a point is within the bounds of this pair\r\n  # @param `pt` a Point object to check.\r\n  # @param `axis` optional axis id such as Const.xy.\r\n  # @eg `pair.withinBounds( point )`, `pair.withinBounds( point, Const.yz )`\r\n  # @demo pair.withinBounds\r\n  # @return a boolean value where `true` means the point is within bounds.\r\n  withinBounds: ( pt, axis ) ->\r\n    if axis\r\n      a = @get2D( axis )\r\n      b = @p1.get2D( axis )\r\n\r\n      # simplify checking for horizontal and vertical lines, and avoid rounding errors\r\n      if a.x == b.x\r\n        return pt.y >= Math.min(a.y, b.y) and pt.y <= Math.max(a.y, b.y)\r\n      else if a.y == b.y\r\n        return pt.x >= Math.min(a.x, b.x) and pt.x <= Math.max(a.x, b.x)\r\n\r\n      # bounding box check\r\n      else\r\n        return ( pt.x >= Math.min(a.x, b.x) and pt.y >= Math.min(a.y, b.y) and pt.x <= Math.max(a.x, b.x) and pt.y <= Math.max(a.y, b.y) )\r\n    else\r\n      return ( pt.x >= Math.min( @x, @p1.x) and pt.y >= Math.min(@y, @p1.y) and pt.z >= Math.min(@z, @p1.z) and pt.x <= Math.max(@x, @p1.x) and pt.y <= Math.max(@y, @p1.y) and pt.z <= Math.max(@z, @p1.z) )\r\n\r\n  # ## Interpolate to find a point which lies somewhere on a straight path between the two points of this pair\r\n  # @param `t` a value between 0 to 1.\r\n  # @param `relative` an optional boolean value. If `true`, then `this.p1` will be treated as relative to the achor point. Default is `false`.\r\n  # @eg `pair.interpolate(0.4)` `pair.interpolate(0.1, true)`\r\n  # @demo pair.interpolate\r\n  # @return the interpolated point as Vector\r\n  interpolate: ( t, relative=false ) ->\r\n    p2 = if relative then @$relative() else @p1\r\n\r\n    return new Vector(\r\n      (1-t) * @x + t * p2.x\r\n      (1-t) * @y + t * p2.y\r\n      (1-t) * @z + t * p2.z\r\n    )\r\n\r\n  # ## A convenient method to get the midpoint of this pair of points. Same as @interpolate( 0.5 )\r\n  # @return the middle point as Vector\r\n  midpoint: () -> @interpolate( 0.5 )\r\n\r\n  # ## Get a vector which points to the same direction as this pair, but starts at origin (0,0)\r\n  # @param `reverse` optional parameter to reverse the direction if set to `true`. Default is `false`.\r\n  # @eg `pair.direction()`, `pair.direction(false)`, `pair.direction().normalize()`\r\n  # @return the directional vector\r\n  direction: ( reverse ) ->\r\n    return if reverse then @.$subtract( @p1 ) else @p1.$subtract( @ )\r\n\r\n\r\n  # ## Set or get width and height of this pair\r\n  # @param `args` Optional parameter to set the size of this Pair. Can be comma-separated values, or as an array, or a Point object.\r\n  # @eg `pair.size()`, `pair.size(100, 50)`\r\n  # @return When setting a new size, returns self. When getting size, returns a Vector whose x is the width and y is the height.\r\n  size: () ->\r\n    if arguments.length > 0\r\n      @p1 = @.$add( Point.get(arguments) )\r\n      return @\r\n    else\r\n      return @p1.$subtract( @ ).abs()\r\n\r\n  # ## Find distance of this pair from anchor to p1\r\n  # @param: `sqrt` optional boolean value to get distance-squared value if set to `false`. Default is true.\r\n  # @return distance value\r\n  length: ( sqrt = true ) ->\r\n    dz = @z - @p1.z\r\n    dy = @y - @p1.y;\r\n    dx = @x - @p1.x;\r\n    d = dx*dx + dy*dy + dz*dz\r\n    return if sqrt then Math.sqrt( d ) else d\r\n\r\n\r\n  # ## Check if a point lies on the left or right side of this pair's *ray*, and if the 3 points are collinear\r\n  # @param `point` a Point object to check against this pair.\r\n  # @demo pair.collinear\r\n  # @return a value where 0 means collinear, poitive value means the point lies on left, and negative value means it's on right\r\n  collinear: (point) ->\r\n    return (@p1.x - @x) * (point.y - @y) - (point.x - @x) * (@p1.y - @y)\r\n\r\n  # ## Recalculate the origin and vec so that origin is at top-left and vec is at bottom-right\r\n  # @return this Pair\r\n  resetBounds: () ->\r\n    temp = @$min( @p1 )\r\n    @p1.set( @$max( @p1 ) )\r\n    @set( temp )\r\n    return @\r\n\r\n  # ## override equal() from parent class\r\n  equal: (epsilon=false) ->\r\n    if arguments[0] instanceof Pair\r\n      return super( arguments[0] ) and @p1.equal( arguments[0].p1 )\r\n    else\r\n      super\r\n\r\n  # ## Override clone() from parent class\r\n  clone: () ->\r\n    p = new Pair( @ )\r\n    p.to( @p1.clone() )\r\n    return p\r\n\r\n  # ## Override floor() from parent class\r\n  floor: () ->\r\n    super\r\n    @p1.floor()\r\n\r\n  # ## Describe this Pair as a text string\r\n  # @return \"Pair of vectors from ... to ...\" text\r\n  toString: () -> \"Pair of vectors from (#{ @x }, #{ @y }, #{ @z }) to (#{ @p1.x }, #{ @p1.y }, #{ @p1.z })\"\r\n\r\n  # ## Override toArray() include `p1` in the array.\r\n  toArray: () -> [@, @p1]\r\n\r\n\r\n# namespace\r\nthis.Pair = Pair\n# ### There is a shortest path that connects a pair of points. Trace that unique path, with pencil or thread or mind, and you will make a straight line. A line embodies the simplest movement or change. It is a point set in motion, moving to meet another point and leaving a trail behind.\r\nclass Line extends Pair\r\n\r\n  # ## Create a new Line. A Line is a Pair defined by two vectors. It can be treated as an infinite line, or as a line segment with two end points.\r\n  # @param `args` Similar to Pair constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to `to()`, you can also pass 4 or 6 values to set both anchor and `p1` points directly as a 2d or 3d vector.\r\n  # @eg `new Line()` `new Line(1,2,3)` `new Line([2,4])` `new Line({x:3, y:6, z:9}).to(1,2,3)`\r\n  # @return a new Pair object\r\n  constructor: () ->\r\n    super\r\n\r\n\r\n  # ## a static function `Line.slope` to find the slope between two points\r\n  # @param `a` a Point\r\n  # @param `b` another Point\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `Line.slope(pt1, pt2)`, `Line.slope(pt1, pt2, Const.yz)`\r\n  # @return slope value, or false if it divides by 0 (a vertical line)\r\n  @slope: ( a, b, axis=Const.xy ) ->\r\n    p1 = a.get2D( axis )\r\n    p2 = b.get2D( axis )\r\n    return if (p2.x - p1.x is 0) then false else (p2.y - p1.y) / (p2.x - p1.x)\r\n\r\n\r\n  # ## a static function `Line.intercept` to get x and y intercept\r\n  # @param `a` a Point\r\n  # @param `b` another Point\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `Line.intercept(pt1, pt2)`, `Line.intercept(pt1, pt2, Const.yz)`\r\n  # return: an Object with {xi, yi, slope} properties, or false if it divides by 0 (a vertical line)\r\n  @intercept: ( a, b, axis=Const.xy ) ->\r\n    p1 = a.get2D( axis )\r\n    p2 = b.get2D( axis )\r\n    if p2.x - p1.x is 0\r\n      return false\r\n    else\r\n      # y = mx + c\r\n      m = ((p2.y - p1.y) / (p2.x - p1.x)) # slope\r\n      c = p1.y - m * p1.x\r\n      return { slope: m, yi: c, xi: if m==0 then false else -c/m } #[ -c/m, c, m ]\r\n\r\n\r\n  # ##  a static function `Line.isPerpendicularLine` to check if two lines are perpendicular to each other\r\n  # @param `line1` a Line\r\n  # @param `line2` another Line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `Line.isPerpendicularLine(ln1, ln2)`, `Line.isPerpendicularLine(ln1, ln2, Const.yz)`\r\n  # return a boolean value where `true` means the two lines are perpendicular\r\n  @isPerpendicularLine: (line1, line2, axis=Const.xy) ->\r\n    s1 = Line.slope( line1, line1.p1, axis )\r\n    s2 = Line.slope( line2, line2.p1, axis )\r\n    if s1 is false\r\n      return (s2 is 0)\r\n    else if s2 is false\r\n      return (s1 is 0)\r\n    else\r\n      return (s1*s2 is -1)\r\n\r\n\r\n  # ## Get slope of this line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return slope value, or false if it divides by 0 (a vertical line)\r\n  slope: ( axis=Const.xy ) -> Line.slope( @, @p1, axis )\r\n\r\n\r\n  # ## Get intercepts and slop of this line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # return: an Object with {xi, yi, slope} properties, or false if it divides by 0 (a vertical line)\r\n  intercept: ( axis=Const.xy ) -> Line.intercept( @, @p1, axis )\r\n\r\n\r\n  # ## Given an interpolated point on this line, return another line of specific length that is perpendicular to this line.\r\n  # @param `t` a value between 0 to 1 to interpolate a point on this line\r\n  # @param `len` an optional value to specify a length for the new line. Defaults to 10.\r\n  # @param `reverse` a boolean value to reverse the direction of the new line if set to `true`\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `ln.getPerpendicular(0.5)`, `ln.getPerpendicular(0.2, 100, true, Const.yz)`\r\n  # @demo line.getPerpendicular\r\n  # @return a new Line that's perpendicular to this line\r\n  getPerpendicular: ( t, len=10, reverse=false, axis=Const.xy ) ->\r\n    pn = @direction().normalize().perpendicular( axis ) # get normal vector\r\n    pp = if reverse then pn[1] else pn[0] # from which side of the dividing line\r\n    line = new Line( @interpolate( t ) ) # the start-point in the new line\r\n    line.to( pp.multiply(len).add( line ) ) # connect the end point\r\n    return line\r\n\r\n  # ## Find the shortest distance from a point to this line (as infinite line, not line segment)\r\n  # @param `pt` a Point\r\n  # return the distance, which can be positive or negative value depending on the point's position.\r\n  getDistanceFromPoint: ( pt ) ->\r\n    path = @$subtract( @p1 )\r\n    normal = new Vector( -path.y, path.x ).normalize()\r\n    return @$subtract( pt ).dot( normal )\r\n\r\n\r\n  # ## Find the perpendicular vector from this line to the point. You can connect the resulting vector with the point's position to draw a perpendicular line\r\n  # @param `pt` a Point\r\n  # @param `fromProjection` a boolean value defaults to true. If true, the resulting vector is based on this line's position. Otherwise the vector starts from origin (0,0).\r\n  # @demo line.getPerpendicularFromPoint\r\n  # @return a perpendicular Vector\r\n  getPerpendicularFromPoint: ( pt, fromProjection=true ) ->\r\n    proj = @p1.$subtract(@).projection( pt.$subtract(@) )\r\n    return if !fromProjection then proj else proj.add(@)\r\n\r\n\r\n  # ## Get intersection point of this line and another line (as infinite lines, not line segements)\r\n  # @param `line` another Line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an intersection point as Vector, or `false` if no intersection, or `null` if two lines are identical\r\n  intersectPath: ( line, axis=Const.xy ) ->\r\n\r\n    a = @intercept( axis )\r\n    b = line.intercept( axis )\r\n\r\n    p = @get2D( axis )\r\n    ln = line.get2D( axis )\r\n\r\n    if a == false\r\n      if b == false then return false # no solution\r\n      # one of them is vertical line, while the other is not, so they will intersect\r\n      y1 = -b.slope *  (ln.x - p.x) + ln.y # -slope * p.x + p.y\r\n      return if axis == Const.xy then new Vector( p.x, y1 ) else new Vector( p.x, y1 ).get2D( axis, true )\r\n\r\n    else\r\n      # diff slope, or b slope is vertical line\r\n      if b == false\r\n        y1 = -a.slope *  (p.x - ln.x) + p.y # -slope * p.x + p.y\r\n        return new Vector( ln.x, y1 )\r\n\r\n      else if b.slope != a.slope\r\n        px = (a.slope * p.x - b.slope * ln.x + ln.y - p.y) / (a.slope - b.slope)\r\n        py = a.slope * ( px - p.x ) + p.y\r\n        if axis == Const.xy\r\n          return new Vector( px, py )\r\n        else\r\n          return new Vector( px, py ).get2D( axis, true ) # flip back to intended axis\r\n\r\n      else\r\n        if a.yi == b.yi # exactly along the same path\r\n          return null\r\n        else\r\n          return false\r\n\r\n\r\n  # ## Get intersection point of this line segement and another line segement (not infintie lines)\r\n  # @param `line` another Line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @demo line.intersectLine\r\n  # @return an intersection point as Vector, or `false` if no intersection, or `null` if two lines are identical\r\n  intersectLine: (line, axis=Const.xy) ->\r\n    # get point from intersectPath()\r\n    pt = @intersectPath( line, axis )\r\n\r\n    # check line segment intersection\r\n    if pt and @withinBounds( pt, axis ) and line.withinBounds( pt, axis )\r\n      return pt\r\n    else\r\n      return if pt == null then null else false\r\n\r\n\r\n  # ## A static function `Line.intersectLines` if an element intersects with a list of lines ( useful for polygon or polyline such as `rectangle.sides()` ) on xy axis.\r\n  # @param `lines` an array of Line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @eg `Line.intersectLines( rect, triangle.sides() )` `Line.intersectLines( line, pointset.sides(), true )`\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  @intersectLines: (elem, lines, get_pts=true) ->\r\n    if !elem.intersectLine\r\n      throw \"No intersectLine function found in \"+ elem.toString()\r\n\r\n    pts = []\r\n    # check each line\r\n    for i, ln of lines\r\n      ins = elem.intersectLine(ln, get_pts)\r\n\r\n      # store intersection points\r\n      if ins\r\n        if !get_pts then return true\r\n        if ins.length > 0\r\n          for p in ins\r\n            pts.push( p )\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Get intersection point of between two \"grid\" lines. Grid lines are parallel to an axis, such as a horizontal or vertical line on xy plane.\r\n  # @param `line` another Line which is parallen to an axis\r\n  # @param `path_only` a boolean value to specify whether to check for whole path (`true`) or line segment (`false`). Defaults to `false`.\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an intersection point as Vector, or `false` if no intersection\r\n  intersectGridLine: (line, path_only=false, axis=Const.xy ) ->\r\n    a1 = @get2D( axis )\r\n    a2 = @p1.get2D( axis )\r\n\r\n    b1 = line.get2D( axis )\r\n    b2 = line.p1.get2D( axis )\r\n\r\n    if a2.x - a1.x == 0\r\n      if b2.y - b1.y == 0 and Util.within( a1.x, b1.x, b2.x )\r\n        if path_only or Util.within( b1.y, a1.y, a2.y )\r\n          return new Vector( a1.x, b1.y )\r\n\r\n    else if a2.y - a1.y == 0\r\n      if b2.x - b1.x == 0 and Util.within( a1.y, b1.y, b2.y )\r\n        if path_only or Util.within( b1.x, a1.x, a2.x )\r\n          return new Vector( b1.x, a1.y )\r\n\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Get a list of evenly distributed points on this line\r\n  # @param `num` the number of points to get\r\n  # @return an Array of Points\r\n  subpoints: (num) -> (@interpolate t/num for t in [0..num] )\r\n\r\n\r\n  # ## override clone\r\n  clone: (deep) ->\r\n    return new Line(@).to(@p1)\r\n\r\n\r\n# namespace\r\nthis.Line = Line\r\n\r\n\r\n\r\n# Old code -- Use Matrix transform functions instead\r\n\r\n# Rotate this line from a hinged point along the line\r\n# param: t is between 0 to 1, radian is the rotation\r\n# see also Matrix.rotateAnchor2D\r\n#  rotate: (t, radian, axis=Const.xy) ->\r\n#    # get anchor point\r\n#    anchor = @interpolate( t )\r\n#    # get init angle\r\n#    ang = anchor.angle( axis, @ ) + radian\r\n#\r\n#    # find rotated line's points\r\n#    pa = new Vector( Math.cos( ang ), Math.sin( ang ) )\r\n#\r\n#    if axis is Const.yz\r\n#      pb = new Vector( 0, -pa.y, -pa.z )\r\n#    else if axis is Const.xz\r\n#      pb = new Vector( -pa.x, 0, -pa.z )\r\n#    else\r\n#      pb = new Vector( -pa.x, -pa.y, 0 )\r\n#\r\n#    pa.multiply( anchor.$subtract( @ ).magnitude() )\r\n#    pa.add( anchor )\r\n#\r\n#    pb.multiply( @p1.$subtract( anchor ).magnitude() )\r\n#    pb.add( anchor )\r\n#\r\n#    # set the points to new position\r\n#    @set( pa )\r\n#    @p1.set( pb )\r\n#\r\n#    return @\r\n\r\n\r\n# Reflect a point to the other side of this line\r\n# see also Vector.reflect2D and Matrix.reflectAnchor2D\r\n#  reflect: (point, axis=Const.xy) ->\r\n#    ln = @intercept( axis )\r\n#    p = point.get2D( axis )\r\n#    d = ( p.x + (p.y-ln.yi) * ln.slope ) / (1+ ln.slope*ln.slope)\r\n#    ref = {\r\n#      x: 2*d - p.x,\r\n#      y: 2*d*ln.slope - p.y + 2*ln.yi\r\n#    }\r\n#\r\n#    if axis == Const.xz\r\n#      return new Vector( ref.x, point.y, ref.y )\r\n#    else if axis == Const.yz\r\n#      return new Vector( point.x, ref.x, ref.y )\r\n#    else\r\n#      return new Vector( ref.x, ref.y, point.z )\n# ### Imagine making a viewfinder with your hands: touch one hand's thumb with the other hand's index finger, and stretch them wide open. Your fingers are the two vectors that define a rectangle, and the rectangle partitions a space and redefines what's inside and outside.\r\nclass Rectangle extends Pair\r\n\r\n  # ## Create a new Rectangle. A Rectangle is a Pair whose rectangular bounding box are defined by two Vectors. Use `toPointSet()` to convert it to a PointSet with 4 points if you need to rotate or shear it.\r\n  # @param `args` Similar to Pair constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to `to()`, you can also pass 4 or 6 values to set both anchor and `p1` points directly as a 2d or 3d vector.\r\n  # @eg `new Rectangle()` `new Rectangle(1,2,3)` `new Rectangle([2,4])` `new Rectangle({x:3, y:6, z:9}).to(1,2,3)`\r\n  # @return a new Rectangle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## the center point of rectangle as Vector object\r\n    @center = new Vector()\r\n\r\n\r\n  # ## A static method `Rectangle.contain` to check if a point is within a bound\r\n  # @param `pt` the Point to check\r\n  # @param `ptl` a Point to specify top-left position of the rectangular bounds\r\n  # @param `pbr`  a Point to specify bottom-right position of the rectangular bounds\r\n  # @return a boolean value indicating if the point is contained within the rectangular bounds\r\n  @contain: (pt, ptl, pbr) ->\r\n    return (pt.x >= ptl.x && pt.x <= pbr.x && pt.y >= ptl.y && pt.y <= pbr.y && pt.z >= ptl.z && pt.z <= pbr.z)\r\n\r\n\r\n  # ## Describe this rectangle as a text string\r\n  # @return \"Rectangle x1, y1, z1, x2, y2, z2, width height\" text\r\n  toString : ->\r\n    s = @size()\r\n    \"Rectangle x1 #{@x}, y1 #{@y}, z1 #{@z}, x2 #{@p1.x}, y2 #{@p1.y}, z2 #{@p1.z}, width #{s.x}, height #{s.y}\"\r\n\r\n\r\n  # ## Convert this Rectangle from a pair of points to a `PointSet` which has 4 points. Note that if you want to rotate or shear this rectangle, convert this rectangle to a `PointSet` first.\r\n  # @return a PointSet with 4 points. (top-right, bottom-right, bottom-left, top-left)\r\n  toPointSet: () ->\r\n    c = @corners()\r\n    return new PointSet( @ ).to( [c.topRight, c.bottomRight, c.bottomLeft, c.topLeft ] )\r\n\r\n\r\n  # ## Similar to `Pair`, this function connects the anchor with another point to define the rectangular bounds. This also calls Pair's `resetBounds()` to make sure anchor point is at top-left and `p1` is at bottom-right\r\n  # @param `args` comma-separated values, or an array, or an object\r\n  # @eg `rect.to(1,2,3)` `new Rect(pt).to([3,4])`\r\n  # @return this Rectangle\r\n  to: ( args ) ->\r\n    @p1 = new Vector( Point.get(arguments) )\r\n    @resetBounds()\r\n    @center = @midpoint() # get center point also\r\n    return @\r\n\r\n\r\n  # ## Set center to new location and move this rectangle, or reset the center point based on current size and position.\r\n  # @param `args` comma-separated values, or an array, or an object to specify the new position\r\n  # @eg `rect.setCenter()`, `rect.setCenter(100,50)`, `rect.setCenter( pt )`\r\n  # @return this Rectangle\r\n  setCenter: ( args ) ->\r\n    if arguments.length == 0\r\n      @center = @midpoint();\r\n      return;\r\n\r\n    halfsize = @size().$divide(2)\r\n    @center.set( Point.get(arguments) )\r\n    @set( @center.$subtract( halfsize ) )\r\n    @p1.set( @center.$add( halfsize ) )\r\n    return @\r\n\r\n\r\n  # ## resize to a specific size from top left\r\n  # @param `args` comma-separated values, or an array, or an object to specify the new size\r\n  # @eg `rect.resizeTo(10,10)` `rect.resizeTo( size_vec )`\r\n  # @return this Rectangle\r\n  resizeTo: () ->\r\n    @p1 = new Vector( Point.get(arguments) )\r\n    @relative()\r\n    @center = @midpoint() # get center point also\r\n    return @\r\n\r\n\r\n  # ## resize to a specific size from center point\r\n  # @param `args` comma-separated values, or an array, or an object to specify the new size.\r\n  # @eg `rect.resizeCenterTo(10,10)` `rect.resizeCenterTo( size_vec )`\r\n  # @demo rectangle.resizeCenterTo\r\n  # @return this Rectangle\r\n  resizeCenterTo: () ->\r\n    size = new Vector( Point.get(arguments)).divide( 2 ) # get half size\r\n    @set( @center.$subtract(size) )\r\n    @p1.set( @center.$add(size) )\r\n    return @\r\n\r\n\r\n  # ## resize this rectangle so that it will enclose another rectangle. Namely, the resulting rectangle is a *union* of the two initial rectangles.\r\n  # @param `rect` another Rectangle or Pair object\r\n  # @demo rectangle.enclose\r\n  # @return this Rectangle which has the new size\r\n  enclose: ( rect ) ->\r\n    @set( @$min( rect ) )\r\n    @p1.set( @p1.$max( rect.p1 ) )\r\n    @center = @midpoint() # get center point also\r\n    return @\r\n\r\n\r\n  # ## Same as `enclose()` but returns a new Rectangle\r\n  # @param `rect` another Rectangle or Pair object\r\n  # @return a new Rectangle which has the new size\r\n  $enclose: ( rect ) -> return @clone().enclose( rect )\r\n\r\n  # ## Check if this rectangle encloses (or is enclosed by) another rect. Use with `isLarger()` to check which rectangle is being enclosed.\r\n  # @param `rect` another rectangle\r\n  # @return a boolean value to indicate if one rectangle is enclosed by another\r\n  isEnclosed: ( rect ) ->\r\n    d = @$subtract( rect ).multiply( @p1.$subtract( rect.p1 ) )\r\n    d2 = @size().subtract( rect.size() )\r\n    return d.x <= 0 and d.y <= 0 and d.z <= 0 and (d2.x * d2.y >= 0)\r\n\r\n\r\n  # ## Check if this rectangle is larger than another rectangle\r\n  # @param `rect` another rectangle\r\n  # @return a boolean value to indicate if this rectangle is larger\r\n  isLarger: ( rect ) ->\r\n    s1 = @size()\r\n    s2 = rect.size()\r\n    return s1.x * s1.y > s2.x * s2.y\r\n\r\n\r\n  # ## Check if a Point is on this Rectangle\r\n  # @param `args` comma-separated values, or an array, or a Point object\r\n  # @eg `rect.intersectPoint(1,2,3)` `rect.intersectPoint(pt)`\r\n  # @return a boolean value to indicate if there is an intersection\r\n  intersectPoint: () ->\r\n    pt = Point.get(arguments)\r\n    return (pt.x >= @x && pt.x <= @p1.x && pt.y >= @y && pt.y <= @p1.y && pt.z >= @z && pt.z <= @p1.z)\r\n\r\n\r\n  # ## Check intersections between this Rectangle and an infinite Line on xy axis.\r\n  # @param `path` a Pair or Line object to specify an infinite line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @demo rectangle.intersectPath\r\n  # @returns an Array of intersection points (zero or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectPath: ( line, get_pts=true ) ->\r\n    sides = @sides()\r\n    pts = []\r\n    for s in sides\r\n      p = s.intersectPath( line )\r\n      if p and @intersectPoint( p )\r\n        if get_pts\r\n          pts.push( p )\r\n        else\r\n          return true\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check intersections between this Rectangle and a Line segment on xy axis.\r\n  # @param `line` a Line to check\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero, one, or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLine: (line, get_pts=true) ->\r\n\r\n    # check if fully enclosed\r\n    ip1 = @intersectPoint( line )\r\n    ip2 = @intersectPoint( line.p1 )\r\n    if ip1 and ip2 then return if get_pts then [] else true\r\n\r\n    # bounding box check\r\n    if !(ip1 or ip2)\r\n      lbound = line.bounds()\r\n      if !@intersectRectangle( lbound, false )\r\n        return if get_pts then [] else false\r\n\r\n    # check sides\r\n    sides = @sides()\r\n    pts = []\r\n    for s in sides\r\n      p = line.intersectLine( s )\r\n      if p\r\n        if get_pts\r\n          pts.push( p )\r\n        else\r\n          return true\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check if this Rectangle intersects with a list of Lines ( useful for polygon or polyline such as `rectangle.sides()` ) on xy axis.\r\n  # @param `lines` an array of Line\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLines: (lines, get_pts=true) ->\r\n    return Line.intersectLines( @, lines, get_pts )\r\n\r\n\r\n  # ## Check if this Rectangle intersects with another Rectangle\r\n  # @param `rect` a Rectangle to check\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectRectangle: ( rect, get_pts=true ) ->\r\n\r\n    # rectangle intersection check, check for whether it's completely contain\r\n    xi = ( @p1.x >= rect.x ) && ( @x <= rect.p1.x )\r\n    yi = ( @p1.y >= rect.y ) && ( @y <= rect.p1.y )\r\n    zi = ( @p1.z >= rect.z ) && ( @z <= rect.p1.z )\r\n    intersected = (xi && yi && zi)\r\n\r\n    if !get_pts then return intersected\r\n    if @isEnclosed( rect ) then return (if get_pts then [] else true )\r\n\r\n    if !intersected then return []\r\n\r\n    #      pa = new Vector(@max( rect ))\r\n    #      pb = new Vector(@p1.min( rect.p1 ))\r\n\r\n    sidesA = @sides()\r\n    sidesB = rect.sides()\r\n\r\n    pts = []\r\n    for sa in sidesA\r\n      for sb in sidesB\r\n\r\n        p = sa.intersectGridLine( sb )\r\n        if p then pts.push(p)\r\n\r\n    return pts\r\n\r\n\r\n\r\n  # ## Check if this Rectangle intersect with another element\r\n  # @param `item` any object that is based on Point. (Vector, Line, Rectangle, Circle, etc)\r\n  # @eg `rect.hasIntersect( another_circle )` `rect.hasIntersect(line)` `rect.hasIntersect(rect)`\r\n  # @returns an Array of intersection points or a boolean value. (Based on `get_pts` parameter)\r\n  hasIntersect: ( item, get_pts=false ) ->\r\n\r\n    # circle intersection check\r\n    if item instanceof Circle\r\n      return item.intersectLines( @sides(), get_pts )\r\n\r\n    # rectangle bounding box check\r\n    else if item instanceof Rectangle\r\n      return @intersectRectangle( item, get_pts )\r\n\r\n    # polygon intersection check\r\n    else if item instanceof PointSet or item instanceof Triangle\r\n      return @intersectLines(item.sides(), get_pts)\r\n\r\n    # line intersection check\r\n    else if item instanceof Pair\r\n      return @intersectLine( item, get_pts )\r\n\r\n    # point intersection check\r\n    else if item instanceof Point\r\n      return Rectangle.contain( item, @, @p1 )\r\n\r\n    else\r\n      return if get_pts then [] else false\r\n\r\n\r\n  # ## Get the corners of this rectangle as 4 Vectors\r\n  # @return an Object with 4 `Vector` objects as {topLeft, topRight, bottomLeft, bottomRight}\r\n  corners: () -> {\r\n    topLeft: new Vector( Math.min( @x, @p1.x ), Math.min( @y, @p1.y), Math.max( @z, @p1.z) )\r\n    topRight: new Vector( Math.max( @x, @p1.x ), Math.min( @y, @p1.y), Math.min( @z, @p1.z) )\r\n    bottomLeft: new Vector( Math.min( @x, @p1.x ), Math.max( @y, @p1.y), Math.max( @z, @p1.z) )\r\n    bottomRight: new Vector( Math.max( @x, @p1.x ), Math.max( @y, @p1.y), Math.min( @z, @p1.z) )\r\n  }\r\n\r\n\r\n  # ## Get the sides of this rectangle as 4 lines\r\n  # @return an Array of 4 `Line` objects [top, right, bottom, left]\r\n  sides: () ->\r\n    c = @corners()\r\n    return [\r\n      new Line( c.topLeft ).to( c.topRight )\r\n      new Line( c.topRight ).to( c.bottomRight )\r\n      new Line( c.bottomRight ).to( c.bottomLeft )\r\n      new Line( c.bottomLeft ).to( c.topLeft )\r\n    ]\r\n\r\n  # ## Get 4 rectangles from this rectangle by subdividing the quadrants\r\n  # @return an Object with 4 `Rectangle` objects as {topLeft, topRight, bottomLeft, bottomRight}\r\n  quadrants: () ->\r\n    c = @corners()\r\n    return {\r\n      topLeft: new this.__proto__.constructor(  c.topLeft ).to( @center )\r\n      topRight: new this.__proto__.constructor(  c.topRight ).to( @center )\r\n      bottomLeft: new this.__proto__.constructor( c.bottomLeft ).to( @center )\r\n      bottomRight: new this.__proto__.constructor(  c.bottomRight ).to( @center )\r\n    }\r\n\r\n\r\n  # override clone\r\n  clone: () ->\r\n    p = new Rectangle(@).to(@p1)\r\n    p.to( @p1.clone() )\r\n    return p\r\n\r\n\r\n# namespace\r\nthis.Rectangle = Rectangle\n# ### A grid divides a space into cells, puts things into groups. Like scattering a handful of peas on the chessboard, we can simplify the description of a state by clarifying its context. A grid thus help us interpret spaces and restate forms.\r\nclass Grid extends Rectangle\r\n\r\n  # ## Create a new Grid. Like a Rectangle, a Grid's area are defined by two Vectors.\r\n  # @param `args` Similar to Pair constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to `to()`, you can also pass 4 or 6 values to set both anchor and `p1` points directly as a 2d or 3d vector.\r\n  # @eg `new Grid()` `new Grid(1,2,3)` `new Grid([2,4])` `new Grid({x:3, y:6, z:9}).to(1,2,3)`\r\n  # @return a new Grid object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## grid cell settings as an object with `.type` property which defines the grid type such as \"fix-fix\", and `.size` property which stores the cell size as a Vector object.\r\n    @cell = {\r\n      type : 'fix-fix'\r\n      size: new Vector()\r\n    }\r\n\r\n    # ## property to specify number of rows in the grid\r\n    @rows = 0\r\n\r\n    # ## property to specify number of columns in the grid\r\n    @columns = 0\r\n\r\n    # ## property to store layout and cell states\r\n    @layout = []\r\n\r\n    # callback from cell generation\r\n    @cellCallback = null\r\n\r\n\r\n  # ## Describe this grid as a text string\r\n  # @return \"Grid width, height, columns, rows, cell\" text\r\n  toString: ->\r\n    s = @size()\r\n    \"Grid width #{s.x}, height #{s.y}, columns #{@columns}, rows #{@rows}, \" +\r\n    \"cell (#{@cell.size.x}, #{@cell.size.y}), type #{@cell.type}\"\r\n\r\n\r\n  # ## Initiate a grid\r\n  # @param `x` a value to specify cell width (if `xtype` parameter is \"fix\" or \"flex\") or column count  (if `xtype` parameter is \"stretch\")\r\n  # @param `y` a value to specify cell height (if `ytype` parameter is \"fix\" or \"flex\") or row count (if `ytype` parameter is \"stretch\")\r\n  # @param `xtype, ytype` a string to specify how columns and rows should be calculated. Use \"fix\" to specify exact cell width or height in pixels, \"flex\" to specify ideal cell width or height in pixels (which allows for flexible rounding to rows or columns), \"stretch\" to specify number of rows or columns only\r\n  # @eg `grid.create(100,50)` `grid.create( 10,10, \"stretch\",\"stretch\")` `grid.create( 20,20, \"flex\",\"fix\")`\r\n  # @return this grid\r\n  init : ( x, y, xtype='fix', ytype='fix' ) ->\r\n\r\n    size = @size()\r\n\r\n    @cell.type = xtype + '-' + ytype\r\n    @rows = y\r\n    @columns = x\r\n\r\n    # calculate x and columns\r\n    # stretch: always fit number of columns\r\n    if xtype is 'stretch'\r\n      @cell.size.x = size.x / x\r\n      @columns = x\r\n    # flex: fit as many as possible\r\n    else if xtype is 'flex'\r\n      @columns = Math.round( size.x / x )\r\n      @cell.size.x =size.x / @columns\r\n    # fix: cell width is fixed\r\n    else # fix\r\n      @cell.size.x = x\r\n      @columns = Math.floor( size.x / @cell.size.x )\r\n\r\n    # calculate y and rows\r\n    # stretch: always fit number of rows\r\n    if ytype is 'stretch'\r\n      @cell.size.y = size.y / y\r\n      @rows = y\r\n    # flex: fit as many as possible\r\n    else if ytype is 'flex'\r\n      @rows = Math.round( size.y / y )\r\n      @cell.size.y = size.y / @rows\r\n    # fix: cell height is fixed\r\n    else # fix\r\n      @cell.size.y = y\r\n      @rows = Math.floor( size.y / @cell.size.y )\r\n\r\n    return @\r\n\r\n\r\n  # ##  Define a callback function for cell creation. This will loop through each cell in the grid and call the callback function.\r\n  # @param `callback` a callback function with these parameters `( cell_size, cell_position, cell_row, cell_column, cell_type )`\r\n  # @demo grid.generate\r\n  # @return this grid\r\n  generate : ( callback ) ->\r\n    if (typeof callback == \"function\")\r\n      @cellCallback = callback\r\n    return @\r\n\r\n\r\n  # ## Generate the grid by looping through each cell\r\n  create : () ->\r\n    if !@cellCallback then return @\r\n\r\n    for c in [0...@columns]\r\n      for r in [0...@rows]\r\n        cell = @cell.size.clone()\r\n        pos = @$add( cell.$multiply( c, r ) ) # cellsize * row-column + grid-position\r\n        isOccupied = if (@layout.length > 0 and @layout[0].length > 0) then @layout[r][c]==1 else false;\r\n        @cellCallback( cell, pos, r, c, @cell.type, isOccupied )\r\n\r\n    return @\r\n\r\n\r\n  # ## Get the cell's size as a Vector\r\n  # @return a cloned `cell.size` property as Vector\r\n  getCellSize: () -> return @cell.size.clone()\r\n\r\n  # ## Give a column and a row, get a rectangle which indicates the cell position and size\r\n  # @param `c, r` column and row index, respectively\r\n  # @param `allowOutofBound` a boolean value to set if the returned rectangle can be outside of the grid\r\n  # @eg `grid.cellToRectangle(2, 3)`, `grid.cellToRectangle(2, 5, true)`\r\n  # @return a Rectangle\r\n  cellToRectangle : (c, r, allowOutofBound=false) ->\r\n    # cellsize * row-column + grid-position\r\n    if allowOutofBound or (c >= 0 and c < @columns and r >= 0 and r < @rows)\r\n      rect = new Rectangle( @$add( @cell.size.$multiply( c, r ) ) ).resizeTo( @cell.size )\r\n      return rect\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Give a x,y position, get the corresponding cell on the grid.\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `grid.positionToCell( 100, 50 )`, `grid.positionToCell( [100, 50] )`, `grid.positionToCell( pt )`,\r\n  # @return a Vector object whose `x` is the column index and `y` is the row index\r\n  positionToCell : (args) ->\r\n    pos = new Vector( @_getArgs( arguments ) )\r\n    cellpos = pos.$subtract( @ ).$divide( @cell.size ).floor()\r\n    cellpos.max( 0, 0 ).min( @columns-1, @rows-1 );\r\n    return cellpos\r\n\r\n\r\n  # ## Reset the layout and its cell states\r\n  # @param `callback` a function with these parameters ( this_grid, cell_row, cell_column ). This will get called after each cell's reset.\r\n  # @return this grid\r\n  resetLayout : ( callback ) ->\r\n    @layout = []\r\n    for r in [0...@rows]\r\n      @layout[r] = []\r\n      for c in [0...@columns]\r\n        @layout[r][c] = 0\r\n        if callback then callback( @, r, c )\r\n\r\n    return @\r\n\r\n\r\n  # ## Mark a certain area in the grid layout as occupied\r\n  # @param `x, y` column and row index\r\n  # @param `w` column width\r\n  # @param `h` row size\r\n  # @param `occupy` a boolean value to set if this cell should be occupied. Defaults to `true`\r\n  # @eg `grid.occupy(0,0, 5,3)`\r\n  # @demo grid.occupy\r\n  # @return this grid\r\n  occupy : ( x, y, w, h, occupy=true ) ->\r\n    if (@rows <= 0 or @columns <=0) then return @\r\n    if (@layout.length < 1) then @resetLayout()\r\n    for c in [0...w]\r\n      for r in [0...h]\r\n        @layout[ Math.min( @layout.length-1, y+r) ][ x+c] = (if (occupy) then 1 else 0)\r\n\r\n    return @\r\n\r\n\r\n  # ## Check a certain area in the grid is unoccupied\r\n  # @param `x, y` column and row index\r\n  # @param `w` column width\r\n  # @param `h` row size\r\n  # @eg `grid.canFit(0,0, 5,3)`\r\n  # @return a boolean value where `true` means the area is unoccupied\r\n  canFit : ( x, y, w, h ) ->\r\n\r\n    # each cell in specific rows and columns\r\n    for currRow in [y...Math.min(@rows, y+h)]\r\n      for currCol in [x...Math.min(@columns, x+w)]\r\n        cell = @layout[currRow][currCol]\r\n        # if cell is filled\r\n        if cell? and cell > 0\r\n          return false\r\n\r\n    return true\r\n\r\n\r\n  # ## Fit this area as much as possible within the grid's free ceels\r\n  # @param `cols` number of columns\r\n  # @param `rows` number of rows\r\n  # @return an object with properties `row` and `column` to specify the top left position, `columnSize` and `rowSize` to specify the resulting size in grid units, and `bound` which is the actual area as a Rectangle object.\r\n  fit : ( cols, rows ) ->\r\n\r\n    # find column size, bound by maximum columns in the grid\r\n    # maxColumns = @layout[0].length\r\n    colSize = Math.min( cols, @columns )\r\n\r\n    # go through each grid cell\r\n    # each row\r\n    for currRow in [0...@rows]\r\n      colCount = colSize # counter to find available columns\r\n      freeCol = 0 # start position of first free column\r\n\r\n      # each column\r\n      for currCol in [0...@columns]\r\n        cell = @layout[currRow][currCol]\r\n\r\n        # if cell is filled\r\n        if cell? and cell > 0\r\n          freeCol++ # this column is not free\r\n          colCount = colSize # reset colCount if it's counting\r\n\r\n        # if cell is not filled\r\n        else\r\n          # see if the next one fits\r\n          colCount--\r\n\r\n          # can fit all\r\n          if colCount <= 0\r\n\r\n            # mark this area as occupied\r\n            @occupy( freeCol,  currRow, colSize, rows )\r\n\r\n            # calculate the bounding box\r\n            b = new Rectangle( @$add( @cell.size.$multiply( freeCol, currRow ) ) ) # top left\r\n            b.resizeTo( @cell.size.$multiply( colSize, rows ) ) # size\r\n\r\n            return {\r\n              row: currRow\r\n              column: freeCol\r\n              columnSize: colSize\r\n              rowSize: rows\r\n              bound: b\r\n            }\r\n\r\n    # cannot fit\r\n    return false\r\n\r\n\r\n  # ## Given a cell's position, get an array of the neighboring cells that surround it\r\n  # @param `c` column index\r\n  # @param `r` row index\r\n  # @eg `grid.neighbors( 3, 2 )`, `(grid.neighbors(3, 2))[Const.top_right]`\r\n  # @return an array of neighbors starting from top-left going clockwise. The array values can be Vectors whose `x` is column index and `y` is row index, or `false` if the neighbor cell is out of bounds. You may access the cells semantically by using Const.top_right etc.\r\n  neighbors: (c, r) ->\r\n    temp = [ [c-1, r-1], [c, r-1], [c+1, r-1], [c+1, r], [c+1, r+1], [c, r+1], [c-1, r+1], [c-1, r] ];\r\n    ns = []\r\n    for n in temp\r\n      if n[0] >= 0 and n[0] < @columns and n[1] >= 0 and n[1] < @rows\r\n        ns.push( new Vector( n[0], n[1], @layout[ n[1] ][ n[0] ] ) )\r\n      else\r\n        ns.push( false )\r\n    return ns;\r\n\r\n\r\n\r\n# namespace\r\nthis.Grid = Grid\n# ### Like stargazing, like connecting the dots, like pareidolia, a set of points in space always flickers in our imagination and illuminates potential forms. Perhaps, creativity is the process in which one seeks hidden relationships in these disparate points or ideas, and conjures meanings or polygons.\r\nclass PointSet extends Vector\r\n\r\n  # ## Create a new PointSet. A PointSet is a set of points which can repsent a polygon or a polyline or a time series.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or an object as parameters to specify the anchor point. Use `to()` to add points to the set.\r\n  # @eg `new PointSet()` `new PointSet(1,2,3)` `new PointSet([2,4])` `new PointSet({x:3, y:6, z:9}).to(1,2,3)` `new PointSet(1,2,3).to([p1, p2, p3, p4, p5])`\r\n  # @return a new PointSet object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## The points in this set as an array\r\n    @points = []\r\n\r\n\r\n  # ## Describe this rectangle as a text string\r\n  # @return \"PointSet [p1... p2... p3...]\" text\r\n  toString:() ->\r\n    str = \"PointSet [ \"\r\n    for p in @points\r\n      str += \"#{p.x},#{p.y},#{p.z}, \"\r\n    return str+\" ]\"\r\n\r\n\r\n  # ## Get a copy of the `points` property as an array\r\n  toArray:() -> @points.slice()\r\n\r\n\r\n  # ## Add a point or an array of points to this PointSet\r\n  # @param `args` either an Array of Points, or a single point defined by comma-separated values, an array, or an object.\r\n  # @eg `pset.to( 1,2,3 )` `pset.to([1,2,3]` `pset.to({x:3, y:6, z:9})` `pset.to([p1, p2, p3, p4...])`\r\n  # @return this PointSet\r\n  to: ( args ) ->\r\n\r\n    if arguments.length > 0\r\n      # if it's an array of objects.\r\n      if Array.isArray( arguments[0] ) and arguments[0].length > 0 and typeof arguments[0][0] is 'object'\r\n        for p in arguments[0]\r\n          @points.push( new Vector(p) )\r\n\r\n      else\r\n        @points.push( new Vector( Point.get(arguments ) ) )\r\n\r\n    return @\r\n\r\n\r\n  # ## Get a point from the set of points based on its index position\r\n  # @param `index` index position\r\n  # @return a point in the set\r\n  getAt: ( index ) ->\r\n    return @points[ Math.min( @points.length-1, Math.max(0, index) ) ];\r\n\r\n\r\n  # ## Same as `getAt()` but returns a new Vector\r\n  $getAt: ( index ) -> return new Vector( @getAt( index ) );\r\n\r\n\r\n  # ## Set a point at a specific index position\r\n  # @param `index` index position\r\n  # @param `p` new point\r\n  # @return this set\r\n  setAt: ( index, p ) ->\r\n    @points[ index ] = p;\r\n    return this;\r\n\r\n\r\n  # ## Get the number of points in the set\r\n  count: () -> return this.points.length;\r\n\r\n  # ## Add a point whose position is calculated relative to this PointSet's anchor point\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `pset.connectFromAnchor(1,2)` `pset.connectFromAnchor([2,4])` `pset.connectFromAnchor({x:3, y:6, z:9})`\r\n  # @return this PointSet\r\n  connectFromAnchor: ( args ) ->\r\n\r\n    if arguments.length > 0\r\n      if Array.isArray( arguments[0] ) and arguments[0].length > 0 # if it's Array.\r\n        for p in arguments[0]\r\n          @points.push( @$add(p) )\r\n\r\n      else\r\n        @points.push( @$add( Point.get(arguments ) ) )\r\n\r\n    return @\r\n\r\n\r\n  # ## Remove a point or a series of points from this Points set\r\n  # @param `index` an index which can be positive or negative integer. If index is negative, the points are removed from the end. For example, `-2` will remove the last 2 points.\r\n  # @eg `pset.disconnect(3)`, `pset.disconnect(-2)`\r\n  # @return this PointSet\r\n  disconnect: (index=-1) ->\r\n    if index < 0\r\n      @points = @points.slice( 0, @points.length+index )\r\n    else\r\n      @points = @points.slice( index+1 )\r\n\r\n    return @\r\n\r\n\r\n  # ## Get an array of Lines that represents this PointSet's sides\r\n  # @param `close_path` a boolean value to include the side from last point to first point when set to `true`\r\n  # @demo pointset.sides\r\n  # @return an array of Lines\r\n  sides: ( close_path=true ) ->\r\n    lastP = null\r\n    sides = []\r\n    for p in @points\r\n      if lastP then sides.push( new Line(lastP).to(p) )\r\n      lastP = p\r\n\r\n    if @points.length > 1 and close_path\r\n      sides.push( new Line( lastP ).to( @points[0] ) )\r\n\r\n    return sides\r\n\r\n  # ## Get the angles of each vertice connected by 2 sides\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an array of objects `{p0, p1, p2, angle}`\r\n  angles: ( axis=Const.xy ) ->\r\n    angles = []\r\n    for i in [1...@points.length-1] by 1\r\n      v1 = @points[i-1].$subtract( @points[i] )\r\n      v2 = @points[i+1].$subtract( @points[i] )\r\n      angles.push( { p0: @points[i-1], p1: @points[i], p2: @points[i+1], angle: v1.angleBetween( v2 ) } )\r\n\r\n    return angles\r\n\r\n\r\n  # ## Get the bounding box for this point set.\r\n  # @return a Rectangle which is the bounding box of the PointSet\r\n  bounds: () ->\r\n    Util.boundingBox( @points )\r\n\r\n\r\n  # ## Get this PointSet's centroid, which is the averge positions of its points.\r\n  # @return the centroid point as Vector\r\n  centroid: () ->\r\n    Util.centroid( @points )\r\n\r\n\r\n  # ## Get a convex hull of the point set using Melkman's algorithm\r\n  # @param `sort` a boolean value to sort the `points` by x position first if set to true\r\n  # @demo pointset.convexHull\r\n  # @return an array of Vectors to define the convex hull\r\n  convexHull: ( sort=true ) ->\r\n\r\n    if @points.length < 3 then return []\r\n\r\n    # sort points array first or not\r\n    if sort\r\n      pts = @points.slice()\r\n      pts.sort( (a, b) -> return a.x - b.x )\r\n    else\r\n      pts = @points\r\n\r\n    # if pt is on left of ray ab. Similar to Pari.collinear()\r\n    left = (a, b, pt) ->\r\n      (b.x - a.x) * (pt.y - a.y) - (pt.x - a.x) * (b.y - a.y) > 0\r\n\r\n    # double end queue\r\n    dq = []\r\n\r\n    # first 3 points\r\n    if left( pts[0], pts[1], pts[2])\r\n      dq.push( pts[0] )\r\n      dq.push( pts[1] )\r\n    else\r\n      dq.push( pts[1] )\r\n      dq.push( pts[0] )\r\n\r\n    dq.unshift( pts[2] )\r\n    dq.push( pts[2] )\r\n\r\n    # remaining points\r\n    i = 3\r\n    while i < pts.length\r\n      pt = pts[i]\r\n\r\n      if left( pt, dq[0], dq[1] ) and left(dq[dq.length-2], dq[dq.length-1], pt)\r\n        i++\r\n        continue\r\n\r\n      while !left(dq[dq.length-2], dq[dq.length-1], pt)\r\n        dq.pop()\r\n      dq.push( pt )\r\n\r\n      while !left( dq[0], dq[1], pt)\r\n        dq.shift()\r\n      dq.unshift( pt )\r\n\r\n      i++\r\n\r\n    # returns the hull's points\r\n    return dq\r\n\r\n\r\n  # overrides clone\r\n  clone: () ->\r\n    new PointSet(@).to( Util.clonePoints( @points ) )\r\n\r\n\r\n# namespace\r\nthis.PointSet = PointSet\n# ### A straight line or a moving particle, swayed by external forces or internal constraints, gradually deviates from its ideal path and becomes a curve. A river meanders and a strain of hair curls. A curve expresses the effects of forces and constraints.\r\nclass Curve extends PointSet\r\n\r\n  # ## Create a new Curve. A Curve uses a set of anchor and/or control points to interpolate a curve.\r\n  # @param `args` Similar to PointSet constructor, use comma-separated values, an array, or an object as parameters to specify the anchor point. Use `to()` to add points to the set.\r\n  # @eg `new PointSet()` `new PointSet(1,2,3)` `new PointSet([2,4])` `new PointSet({x:3, y:6, z:9}).to(1,2,3)` `new PointSet(1,2,3).to([p1, p2, p3, p4, p5])`\r\n  # @return a new Curve object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## a boolean value to specify if this Curve is 2D or 3D. Default is `false` (2D).\r\n    @is3D = false\r\n\r\n\r\n  # A private function to pre-calculate the interpolation steps\r\n  _getSteps: (steps) ->\r\n    ts = []\r\n    for s in [0..steps] by 1\r\n      t = s/steps\r\n      ts.push( [t, t*t, t*t*t] )\r\n    return ts\r\n\r\n\r\n  # ## Given an index for the starting position in `points` array, get the control and/or end points of a curve segment\r\n  # @param `index` start index in `points` array. Default is 0.\r\n  # @param `copyStart` an optional boolean value to indicate if the start index should be used twice. Default is false.\r\n  # @return an object with 4 points `{p0, p1, p2, p3}`\r\n  controlPoints: ( index=0, copyStart=false ) ->\r\n\r\n    _index = (i) =>\r\n      idx = if i < @points.length-1 then i else @points.length-1\r\n      return idx\r\n\r\n    # Get points based on index\r\n    p0 = @points[index] # control pt 1\r\n    if !p0.x? then return false\r\n\r\n    index = if copyStart then index else index+1\r\n\r\n    p1 = @points[ _index(index++) ] # t = 0\r\n    p2 = @points[ _index(index++) ] # t = 1\r\n    p3 = @points[ _index(index++) ] # control pt 2\r\n\r\n    return {\r\n      p0: p0\r\n      p1: p1\r\n      p2: p2\r\n      p3: p3\r\n    }\r\n\r\n\r\n  # ## Create a Catmull-Rom curve. Catmull-Rom is a kind of Cardinal curve with smooth-looking curve.\r\n  # @param `step` the number of line segments. Defaults to 10 steps.\r\n  # @return an array of Points\r\n  catmullRom: ( steps=10 ) ->\r\n\r\n    if @points.length < 2 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # use first point twice\r\n    c = @controlPoints( 0, true )\r\n    for i in [0..steps] by 1\r\n      ps.push( @catmullRomPoint( ts[i], c ) )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k < @points.length-2\r\n      c = @controlPoints( k )\r\n      if c\r\n        for i in [0..steps] by 1\r\n          ps.push( @catmullRomPoint( ts[i], c ) )\r\n        k++\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on Catmull-Rom curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @return a Point on the curve\r\n  catmullRomPoint: ( step, ctrls ) ->\r\n    # Basis Matrix (http://mrl.nyu.edu/~perlin/courses/fall2002/hw/12.html)\r\n    # {-0.5,  1.5, -1.5, 0.5}\r\n    # { 1  , -2.5,  2  ,-0.5},\r\n    # {-0.5,  0  ,  0.5, 0  },\r\n    # { 0  ,  1  ,  0  , 0  }\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = ( -0.5*t3 + t2 - 0.5*t )\r\n    h2 = ( 1.5*t3 - 2.5*t2 + 1 )\r\n    h3 = ( -1.5*t3 + 2*t2 + 0.5*t )\r\n    h4 = ( 0.5*t3 - 0.5*t2 )\r\n\r\n    x = ( h1*ctrls.p0.x + h2* ctrls.p1.x + h3*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2* ctrls.p1.y + h3*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h3*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Create a Cardinal spline curve\r\n  # @param `step` the number of line segments. Defaults to 10 steps.\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Default to 0.5 which is the tension for Catmull-Rom curve\r\n  # @demo curve.cardinal\r\n  # @return an array of Points\r\n  cardinal: ( steps=10, tension=0.5 ) ->\r\n\r\n    if @points.length < 2 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # use first point twice\r\n    c = @controlPoints( 0, true )\r\n    for i in [0..steps] by 1\r\n      ps.push( @cardinalPoint( ts[i], c, tension ) )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k < @points.length-2\r\n      c = @controlPoints( k )\r\n      if c\r\n        for i in [0..steps] by 1\r\n          ps.push( @cardinalPoint( ts[i], c, tension ) )\r\n        k++\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on Cardinal curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Default to 0.5 which is the tension for Catmull-Rom curve\r\n  # @return a Point on the curve\r\n  cardinalPoint: ( step, ctrls, tension=0.5 ) ->\r\n\r\n    # Basis Matrix (http://algorithmist.wordpress.com/2009/10/06/cardinal-splines-part-4/)\r\n    # [ -s  2-s  s-2   s ]\r\n    # [ 2s  s-3  3-2s -s ]\r\n    # [ -s   0    s    0 ]\r\n    # [  0   1    0    0 ]\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = tension * ( -1*t3 + 2*t2 - t )\r\n    h2 = tension * ( -1*t3 + t2 )\r\n    h2a = (2*t3 - 3*t2 + 1)\r\n    h3 = tension * ( t3 - 2*t2 + t )\r\n    h3a = (-2*t3 + 3*t2)\r\n    h4 = tension * ( t3 - t2 )\r\n\r\n    x = ctrls.p0.x*h1 + ctrls.p1.x*h2 + h2a*ctrls.p1.x + ctrls.p2.x*h3 + h3a*ctrls.p2.x + ctrls.p3.x*h4\r\n    y = ctrls.p0.y*h1 + ctrls.p1.y*h2 + h2a*ctrls.p1.y + ctrls.p2.y*h3 + h3a*ctrls.p2.y + ctrls.p3.y*h4\r\n    z = if !@is3D then 0 else ctrls.p0.z*h1 + ctrls.p1.z*h2 + h2a*ctrls.p1.z + ctrls.p2.z*h3 + h3a*ctrls.p2.z + ctrls.p3.z*h4\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Create a Bezier curve. In a cubic bezier curve, the first and 4th points are end points, and 2nd and 3rd points are control points.\r\n  # @param `step` the number of line segments. Defaults to 10 steps\r\n  # @demo curve.bezier\r\n  # @return an array of Points\r\n  bezier: ( steps=10 ) ->\r\n\r\n    if @points.length < 4 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k <= @points.length-3\r\n      c = @controlPoints( k )\r\n      if c\r\n        for i in [0..steps] by 1\r\n          ps.push( @bezierPoint( ts[i], c ) )\r\n        # go to the next set of point, but assume current end pt is next start pt\r\n        k+=3\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on a cubic Bezier curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control and end points which can be provided by `controlPoints()` function. The first and 4th points are end points, and 2nd and 3rd points are control points.\r\n  # @return a Point on the curve\r\n  bezierPoint: (step, ctrls) ->\r\n    # Bezier basis matrix\r\n    # { -1,  3, -3,  1 }\r\n    # {  3, -6,  3,  0 }\r\n    # { -3,  3,  0,  0 }\r\n    # {  1,  0,  0,  0 }\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = ( -1*t3 + 3*t2 - 3*t + 1 )\r\n    h2 = ( 3*t3 - 6*t2 + 3*t )\r\n    h3 = ( -3*t3 + 3*t2 )\r\n    h4 = t3\r\n\r\n    x = ( h1*ctrls.p0.x + h2* ctrls.p1.x + h3*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2* ctrls.p1.y + h3*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h3*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Create a B-Spline cuve\r\n  # @param `step` the number of line segments. Defaults to 10 steps.\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Or `false` to have normal tension. Default is false.\r\n  # @demo curve.bspline\r\n  # @return an array of Points\r\n  bspline: ( steps=10, tension=false ) ->\r\n\r\n    if @points.length < 2 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k < @points.length-2\r\n      c = @controlPoints( k )\r\n      if c\r\n        if !tension\r\n          for i in [0..steps] by 1\r\n            ps.push( @bsplinePoint( ts[i], c ) )\r\n        else\r\n          for i in [0..steps] by 1\r\n            ps.push( @bsplineTensionPoint( ts[i], c, tension ) )\r\n        k++\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on B-Spline curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @return a Point on the curve\r\n  bsplinePoint: (step, ctrls) ->\r\n    # Basis matrix:\r\n    # { -1.0/6.0,  3.0/6.0, -3.0/6.0, 1.0/6.0 },\r\n    # {  3.0/6.0, -6.0/6.0,  3.0/6.0,    0.0 },\r\n    # { -3.0/6.0,      0.0,  3.0/6.0,    0.0 },\r\n    # {  1.0/6.0,  4.0/6.0,  1.0/6.0,    0.0 }\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = ( -0.16666666666*t3 + 0.5*t2 - 0.5*t + 0.16666666666 )\r\n    h2 = ( 0.5*t3 - t2 + 0.66666666666 )\r\n    h3 = ( -0.5*t3 + 0.5*t2 + 0.5*t + 0.16666666666 )\r\n    h4 = (0.16666666666*t3)\r\n\r\n    x = ( h1*ctrls.p0.x + h2* ctrls.p1.x + h3*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2* ctrls.p1.y + h3*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h3*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Interpolate to get a point on B-Spline curve with tension (Duff)\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Default to 1 which is the normal tension.\r\n  # @return a Point on the curve\r\n  bsplineTensionPoint: (step, ctrls, tension=1) ->\r\n    # Basis matrix:\r\n    # [ -1/6a, 2 - 1.5a, 1.5a - 2, 1/6a ]\r\n    # [ 0.5a,  2a-3,     3-2.5a    0 ]\r\n    # [ -0.5a, 0,        0.5a,     0 ]\r\n    # [ 1/6a,  1 - 1/3a, 1/6a,     0 ]\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = tension * ( -0.16666666666*t3 + 0.5*t2 - 0.5*t + 0.16666666666 )\r\n    h2 = tension * ( -1.5*t3 + 2*t2 - 0.33333333333 )\r\n    h2a = (2*t3 - 3*t2 + 1)\r\n    h3 = tension * ( 1.5*t3 - 2.5*t2 + 0.5*t + 0.16666666666 )\r\n    h3a = (-2*t3 + 3*t2)\r\n    h4 = tension * (0.16666666666*t3)\r\n\r\n    x = ( h1*ctrls.p0.x + h2*ctrls.p1.x + h2a*ctrls.p1.x + h3*ctrls.p2.x + h3a*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2*ctrls.p1.y + h2a*ctrls.p1.y + h3*ctrls.p2.y + h3a*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h2a*ctrls.p1.y + h3*ctrls.p2.z + h3a*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n# namespace\r\nthis.Curve = Curve\n# ### There are so many ways to construct, and to dissect, a triangle. Various center points, circle inner or outer, imaginary lines cutting through its interiors, bisecting angles or sides, and yet it seems perfectly poised with its three sides and 180 degrees internal angles. A triangle encapsulates tension and plasticity.\r\nclass Triangle extends Vector\r\n\r\n  # ## Create a new triangle\r\n  # @param Set the triangle's anchor point using 0 to 3 values. Can be comma-separated values, as an array, or as an object with `{x, y, z}` properties.\r\n  # @eg `new Triangle()` `new Triangle(1,2,3)` `new Triangle([2,4])` `new Triangle({x:3, y:6, z:9})`\r\n  # @return a new Triangle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## a vertice (corner point) of the triangle as Vector object\r\n    @p1 = new Vector( @x-1, @y-1, @z)\r\n\r\n    # ## another vertice (corner point) of the triangle as Vector object\r\n    @p2 = new Vector( @x+1, @y+1, @z)\r\n\r\n\r\n  # ## Connect triangle's anchor point with the other two points\r\n  # @param Parameters can be 2 objects or 2 arrays, or 4 or 6 numeric values to specify x, y, and optionally z positions\r\n  # @eg `tri.to( p1, p2)` `tri.to([1,2], [3,4]` `tri.to(1,2,3,4)` `tri.to(1,3,5,2,4,6)`\r\n  # @return this triangle\r\n  to:( args ) ->\r\n\r\n    if arguments.length > 0\r\n\r\n      # by object or array\r\n      if typeof arguments[0] is 'object' and arguments.length == 2\r\n          @p1.set( arguments[0] )\r\n          @p2.set( arguments[1] )\r\n\r\n      # by 4 or 6 numeric values\r\n      else\r\n        if arguments.length < 6\r\n          @p1.set( [arguments[0], arguments[1]] )\r\n          @p2.set( [arguments[2], arguments[3]] )\r\n        else\r\n          @p1.set( [arguments[0], arguments[1], arguments[2]] )\r\n          @p2.set( [arguments[3], arguments[4], arguments[5]] )\r\n\r\n    return @\r\n\r\n\r\n  # ## Convert this triangle's points to an array of Vectors\r\n  # @return an array of 3 vectors\r\n  toArray: () -> [@, @p1, @p2 ]\r\n\r\n\r\n  # ## Get a text string that describes this triangle\r\n  toString:() -> \"Triangle (#{@x}, #{@y}, #{@z}), (#{@p1.x}, #{@p1.y}, #{@p1.z}), (#{@p2.x}, #{@p2.y}, #{@p2.z})\"\r\n\r\n\r\n  # ## Get a point from the set of points based on its index position\r\n  # @param `index` index position as number (0, 1, 2) or as string \"p0\", \"p1\", \"p2\"\r\n  # @return a point in the triangle\r\n  getAt: (index) ->\r\n    if (index==1 or index==\"p1\") then return @p1;\r\n    if (index==2 or index==\"p2\") then return @p2;\r\n    return @;\r\n\r\n\r\n  # ## Same as `getAt()` but return as a new Vector\r\n  $getAt: (index) -> return new Vector( @getAt(index) );\r\n\r\n\r\n  # ## Convert this Triangle to a `PointSet`\r\n  # @return a PointSet with 3 points.\r\n  toPointSet: () ->\r\n    p0 = new Vector(@)\r\n    return new PointSet( p0 ).to( [p0, @p1, @p2 ] )\r\n\r\n\r\n  # ## Get an array of Lines that represents this triangle's 3 sides\r\n  # @return an array of 3 lines\r\n  sides: () ->\r\n    return [\r\n      new Line(@).to(@p1)\r\n      new Line(@p1).to(@p2)\r\n      new Line(@p2).to(@)\r\n    ]\r\n\r\n\r\n  # ## Get the triangle's 3 angles\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an array of 3 angles\r\n  angles: ( axis=Const.xy ) ->\r\n    angles = [\r\n      @p2.$subtract( @ ).angleBetween( @p1.$subtract( @ ), axis )\r\n      @$subtract( @p1 ).angleBetween( @p2.$subtract( @p1 ), axis )\r\n    ]\r\n    angles.push( Math.PI - angles[0] - angles[1] )\r\n    return angles\r\n\r\n\r\n  # ## Get the medial, which is an inner triangle formed by connecting the midpoints of this triangle's sides\r\n  # @return the medial triangle\r\n  medial: () ->\r\n    sides = @sides()\r\n    pts = ( side.midpoint() for side in sides )\r\n    return new Triangle( pts[0] ).to( pts[1], pts[2] )\r\n\r\n\r\n  # ## Get this triangle's perimeter, which is the length of its 3 sides\r\n  # @return an object with 3 properties, where `.value` is the perimeter value, `.sides` is an array of 3 sides, `lengths` is an array of the 3 sides' lengths\r\n  perimeter: () ->\r\n    sides = @sides()\r\n    lens = [\r\n      sides[0].length()\r\n      sides[1].length()\r\n      sides[2].length()\r\n    ]\r\n    return {\r\n      sides: sides\r\n      value: lens[0] + lens[1] + lens[2]\r\n      lengths: lens\r\n    }\r\n\r\n\r\n  # ## Get this triangle's area using Heron's formula for calculating polygon area\r\n  # @return an object with 2 properties, where `.value` is the area value, and `.perimeter` is an object returned by `perimeter()` function\r\n  area: () ->\r\n    p = @perimeter()\r\n    hp = p.value / 2\r\n    return {\r\n      value: Math.sqrt( (hp * (hp-p.lengths[0]) * (hp-p.lengths[1]) * (hp-p.lengths[2]) ))\r\n      perimeter: p\r\n    }\r\n\r\n\r\n  # ## Given a point of the triangle, the opposite side is the side which the point doesn't touch\r\n  # @param specify a point by its id `\"p0\"` (the anchor point), `\"p1\"`, or `\"p2\"`\r\n  # @eg `tri.oppositeSide(\"p1\")`\r\n  # @demo triangle.oppositeSide\r\n  # @return a Line which represents the opposite side\r\n  oppositeSide: ( id ) ->\r\n    if id==\"p1\"\r\n      return new Line(@).to(@p2)\r\n    else if id == \"p2\"\r\n      return new Line(@).to(@p1)\r\n    else\r\n      return new Line(@p1).to(@p2)\r\n\r\n\r\n  # ## Given a point of the triangle, the adjacent sides are the two side which the point touches\r\n  # @param specify a point by its id `\"p0\"` (the anchor point), `\"p1\"`, or `\"p2\"`\r\n  # @eg `tri.adjacentSides(\"p1\")`\r\n  # @return an array of 2 Line which represents the adjacent sides\r\n  adjacentSides: (id) ->\r\n    if id==\"p1\"\r\n      return [new Line(@p1).to(@), new Line(@p1).to(@p2)]\r\n    else if id == \"p2\"\r\n      return [new Line(@p2).to(@), new Line(@p2).to(@p1)]\r\n    else\r\n      return [new Line(@).to(@p1), new Line(@).to(@p2)]\r\n\r\n\r\n  # ## Get a bisector, which is a path that splits a triangle's angle in half.\r\n  # @param the first paramter specifies a point by its id `\"p0\"`, `\"p1\"`, or `\"p2\"`. The second parameter determines if the path should be a simple vector from origin (`false`) or a line connected to the triangle's point (`true`). Optionally include a third parameter to set the length of the path.\r\n  # @eg `tri.bisector(\"p1\")`, `tri.bisector(\"p0\", true)`, `tri.bisector(\"p2\", false, 10)`\r\n  # @return either a Line or a Vector, based on the second parameter\r\n  bisector: (id, asLine=false, size=100) ->\r\n    ad = @adjacentSides(id)\r\n    p = new Vector(ad[0])\r\n    ad[0].moveTo(0,0)\r\n    ad[1].moveTo(0,0)\r\n    bp = ad[0].p1.bisect(ad[1].p1) # bisect vector from origin\r\n\r\n    return if asLine then new Line(p).to( bp.multiply(size).add(p) ) else bp\r\n\r\n\r\n  # ## Get a triangle's altitude, which is a line from a triangle's point to its opposite side, and perpendicular to its opposite side.\r\n  # @param specify a point by its id `\"p0\"` (the anchor point), `\"p1\"`, or `\"p2\"`\r\n  # @eg `tri.altitude(\"p1\")` gets a line from p1 to the side formed by p0 and p2\r\n  # @return a Line representing an altitude\r\n  altitude: ( id ) ->\r\n    if id==\"p1\" or id==\"p2\"\r\n      return new Line(@[id]).to( @oppositeSide(id).getPerpendicularFromPoint( @[id] ) )\r\n    else\r\n      return new Line(@).to( @oppositeSide().getPerpendicularFromPoint( @ ) )\r\n\r\n\r\n  # ## Get a triangle's centroid, which is the averge positions of its three points.\r\n  # @return the centroid point as Vector\r\n  centroid : () ->\r\n    c0 = @$divide(3)\r\n    c1 = @p1.$divide(3)\r\n    c2 = @p2.$divide(3)\r\n    return new Vector(c0.x+c1.x+c2.x, c0.y+c1.y+c2.y, c0.z+c1.z+c2.z)\r\n\r\n\r\n  # ## Get orthocenter, which is the intersection point of a triangle's 3 altitudes (the 3 lines that are perpendicular to its 3 opposite sides).\r\n  # @return the orthocenter point as Vector\r\n  orthocenter: () ->\r\n    a = @altitude()\r\n    b = @altitude(\"p1\")\r\n    return a.intersectPath( b, Const.xyz )\r\n\r\n\r\n  # ## Get incenter, which is the center point of its inner circle, and also the intersection point of its 3 angle bisector lines (each of which cuts one of the 3 angles in half).\r\n  # @demo triangle.incenter\r\n  # @return the incenter point as Vector\r\n  incenter: () ->\r\n    a = @bisector(\"p0\", true)\r\n    b = @bisector(\"p1\", true)\r\n    return a.intersectPath( b, Const.xyz )\r\n\r\n\r\n  # ## Get an interior circle, which is the largest circle completed enclosed by this triangle\r\n  # @return a Circle\r\n  incircle: () ->\r\n    center = @incenter()\r\n    area = @area()\r\n    radius = 2 * area.value / area.perimeter.value\r\n    return new Circle(center).setRadius( radius )\r\n\r\n\r\n  # ## Get circumcenter, which is the intersection point of its 3 perpendicular bisectors lines ( each of which divides a side in half and is perpendicular to the side)\r\n  # @return an object with { `center`: circumcenter point as Vector, `bisector`: an array of bisectors }\r\n  circumcenter: () ->\r\n    medial = @medial()\r\n\r\n    # find perpendicular bisectors\r\n    pbs = [\r\n      new Line( medial ).to( @.$subtract( medial ).perpendicular()[0].$add(medial) )\r\n      new Line( medial.p1 ).to( @p1.$subtract( medial.p1 ).perpendicular()[0].$add(medial.p1) )\r\n      new Line( medial.p2 ).to( @p2.$subtract( medial.p2 ).perpendicular()[0].$add(medial.p2) )\r\n    ]\r\n\r\n    return {\r\n      center: pbs[0].intersectPath( pbs[1], Const.xyz )\r\n      bisectors: pbs\r\n    }\r\n\r\n\r\n  # ## Get circumcircle, which is the smaller circle that encloses this triangle completely\r\n  # @return a Circle\r\n  circumcircle: () ->\r\n    center = @circumcenter()\r\n    r = @magnitude( center.center )\r\n    return new Circle( center.center ).setRadius( r )\r\n\r\n\r\n  intersectPoint: (p) ->\r\n    sides = @sides()\r\n    hp = ( s.collinear(p) > 0 for s in sides ) # check left or right sides of the half plane\r\n    return hp[0] == hp[1] and hp[1] == hp[2]\r\n\r\n\r\n  # ## Check intersections between this Triangle and an infinite Line on xy axis.\r\n  # @param `path` a Pair or Line object to specify an infinite line\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectPath: (path, get_pts=true, axis=Const.xy) ->\r\n    sides = @sides()\r\n    pts = []\r\n    for s in sides\r\n      p = s.intersectPath( path )\r\n      if p and s.withinBounds( p, axis )\r\n        if !get_pts then return true\r\n        pts.push( p )\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check intersections between this Triangle and a Line segment on xy axis.\r\n  # @param `line` a Line to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero, one, or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLine: (line, get_pts=true, axis=Const.xy) ->\r\n    ins = @intersectPath( line, true, axis )\r\n    pts = []\r\n    for p in ins\r\n      if line.withinBounds( p )\r\n        if !get_pts then return true\r\n        pts.push( p )\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check if this Triangle intersects with a set of Lines on xy axis\r\n  # @param `lines` an array of Line\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLines: (lines, get_pts=true) ->\r\n    return Line.intersectLines( @, lines, get_pts )\r\n\r\n\r\n  # ## Moller-Trumbore algorithm for 3D ray triangle intersection\r\n  intersectPath3D: (path, get_pts) ->\r\n    e1 = @p1.$subtract(@)\r\n    e2 = @p2.$subtract(@)\r\n    dir = path.direction().normalize()\r\n\r\n    pvec = dir.cross(e2)\r\n    det = e1.dot(pvec)\r\n\r\n    # 3D only, in 2D the det is always 0\r\n    if (det > -Const.epsilon and det < Const.epsilon ) then return false\r\n\r\n    inv_det = 1 / det\r\n\r\n    tvec = path.$subtract(@)\r\n    u = tvec.dot(pvec) * inv_det\r\n    if (u < 0 or u > 1) then return false\r\n\r\n    qvec = tvec.cross( e1 )\r\n    v = dir.dot(qvec) * inv_det\r\n    if (v < 0 or v > 1) then return false\r\n\r\n    t = e2.dot( qvec ) * inv_det\r\n    if t > Const.epsilon\r\n      return if get_pts then [u,v,t] else true\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Check if this Triangle intersects with a Rectangle\r\n  # @param `rect` a Rectangle to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectRectangle: (rect, get_pts=true) ->\r\n    return rect.intersectLines( @sides(), get_pts )\r\n\r\n\r\n  # ## Check if this Triangle intersects with another Circle\r\n  # @param `circle` a Circle to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectCircle: (circle, get_pts=true) ->\r\n    return circle.intersectLines( @sides(), get_pts )\r\n\r\n\r\n  # ## Check if this Triangle intersects with another Triangle\r\n  # @param `tri` a Triangle to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectTriangle: (tri, get_pts=true) ->\r\n    return tri.intersectLines( @sides(), get_pts )\r\n\r\n\r\n  # overrides clone\r\n  clone: () -> new Triangle(@).to( @p1, @p2 )\r\n\r\n\r\n# namespace\r\nthis.Triangle = Triangle\r\n\r\n\nclass SVGForm\r\n\r\n  @_domId = 0\r\n\r\n  # ## Create a new Form which is based on SVG\r\n  # @param `space` A space that has a valid context for this form. In this case, the space should represent an html canvas.\r\n  # @return a new Form object\r\n  constructor: ( space ) ->\r\n\r\n    # ## a property to reference the space's rendering context\r\n    @cc = space.ctx || {}\r\n\r\n    # keep track of dom id names\r\n    @cc.group = @cc.group || null\r\n    @cc.groupID = \"ptx\"\r\n    @cc.groupCount = 0\r\n    @cc.currentID = \"ptx0\"\r\n\r\n    # default style or false for no fill\r\n    @cc.style = {\r\n      fill: \"#999\"\r\n      stroke: \"#666\"\r\n      \"stroke-width\": 1\r\n      \"stroke-linejoin\": false\r\n      \"stroke-linecap\": false\r\n    }\r\n    @cc.font = \"11px sans-serif\"\r\n\r\n    # ## a property to specify the current font size\r\n    @cc.fontSize = 11\r\n\r\n    # ## a property to specify the current font face\r\n    @cc.fontFace = \"sans-serif\"\r\n\r\n\r\n  # ## Set current fill style\r\n  # @param `c` fill color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)) Default is `false` (transparent)\r\n  # @eg `form.fill(\"#F90\")` `form.fill(\"rgba(0,0,0,.5\")` `form.fill(false)`\r\n  # @return this Form\r\n  fill: (c) ->\r\n    @cc.style.fill = if c then c else false\r\n    return @\r\n\r\n\r\n  # ## Set current stroke style\r\n  # @param `c` stroke color which can be as color, gradient, or pattern. (See [canvas documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)) Default is false (transparent)\r\n  # @param `width` Optional value (can be floating point) to set line width\r\n  # @param `joint` Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".\r\n  # @eg `form.stroke(\"#F90\")` `form.stroke(\"rgba(0,0,0,.5\")` `form.stroke(false)` `form.stroke(\"#000\", 0.5, 'round')`\r\n  # @return this Form\r\n  stroke: (c, width, joint, cap) ->\r\n    @cc.style.stroke = if c then c else false\r\n    if width then @cc.style[\"stroke-width\"] = width\r\n    if joint then @cc.style[\"stroke-linejoin\"] = joint\r\n    if cap then @cc.style[\"stroke-linecap\"] = joint\r\n    return @\r\n\r\n\r\n  # ## Set the current group scope by an ID, and optionally define the group's parent element\r\n  # @param `group_id` a string to use as prefix for the group's id. For example, group_id \"hello\" will create elements with id like \"hello-1\", \"hello-2\", etc\r\n  # @param `group` optional dom element to define this group's parent element\r\n  # @eg `form.scope(\"dot\")` `form.scope(\"dot\", elem)`\r\n  # @demo svgform.scope\r\n  # @return context object\r\n  scope: ( group_id, group=false ) ->\r\n    if (group) then @cc.group = group\r\n    @cc.groupID = group_id\r\n    @cc.groupCount = 0\r\n\r\n    @nextID()\r\n    return @cc\r\n\r\n\r\n  # ## Set the current group scope based on an item added to Space. The item must have an `animateID` property. Its group id will become \"item-##\".\r\n  # @param `item` an item that's added to space.\r\n  # @return context object\r\n  getScope: ( item ) ->\r\n    if (!item || item.animateID == null )\r\n      throw \"getScope()'s item must be added to a Space, and has an animateID property. Otherwise, use scope() instead.\"\r\n    return @scope( SVGForm._scopeID( item ) )\r\n\r\n\r\n  # ## Get next available id in the current group\r\n  # @return an id string\r\n  nextID: () ->\r\n    @cc.groupCount++\r\n    @cc.currentID = @cc.groupID+\"-\"+@cc.groupCount\r\n    return @cc.currentID\r\n\r\n\r\n  # ## A static function to context\r\n  @id: (ctx) ->\r\n    return ctx.currentID || \"p-\"+SVGForm._domId++\r\n\r\n\r\n  # compose a scope id\r\n  @_scopeID: (item) ->\r\n    return \"item\"+item.animateID\r\n\r\n  # ## A static function to help adding style object to an element\r\n  # @param `elem` a dom element to add to\r\n  # @param `styles` an object of style properties\r\n  # @eg `SVGForm.style(elem, {fill: \"#f90\", stroke: false})`\r\n  @style: (elem, styles) ->\r\n    st = {}\r\n    for k,v of styles\r\n      if (!v)\r\n        if (k==\"fill\" or k==\"stroke\") then st[k] = \"none\"\r\n      else\r\n        st[k] = v\r\n\r\n    return DOMSpace.attr( elem, st )\r\n\r\n\r\n  # ## A static function to draw a point\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pt` a Point object\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  # @param `circle` a boolean value to specify if the points should be drawn as a circle. Default to false.\r\n  @point: (ctx, pt, halfsize=2, fill=true, stroke=true, circle=false ) ->\r\n\r\n    elem = SVGSpace.svgElement( ctx.group, (if (circle) then \"circle\" else \"rect\"), SVGForm.id(ctx) )\r\n    if (!elem) then return;\r\n\r\n    if (circle)\r\n      DOMSpace.attr( elem, {\r\n        cx: pt.x\r\n        cy: pt.y\r\n        r: halfsize\r\n      })\r\n    else\r\n      DOMSpace.attr( elem, {\r\n        x: pt.x - halfsize\r\n        y: pt.y - halfsize\r\n        width: halfsize + halfsize\r\n        height: halfsize + halfsize\r\n      })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a point\r\n  # @param `p` a Point object\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `isCircle` a boolean value to specify if the point should be drawn as a circle. Default is false.\r\n  # @return this Form\r\n  point: (p, halfsize=2, isCircle=false) ->\r\n    @nextID()\r\n    SVGForm.point(@cc, p, halfsize, true, true, isCircle )\r\n    return @\r\n\r\n\r\n  # ## A static function similar to `SVGForm.point()` but draw a series of points\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pts` an array of Points\r\n  # @param `halfsize, fill, stroke, circle` same parameters as in `SVGForm.point()`\r\n  @points: (ctx, pts, halfsize=2, fill=true, stroke=true, circle=false ) ->\r\n    return (SVGForm.point( ctx, p, halfsize, fill, stroke, circle ) for p in pts)\r\n\r\n\r\n  # ## Draw a series of points\r\n  # @param `ps` an array of Points\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `isCircle` a boolean value to specify if the point should be drawn as a circle. Default is false.\r\n  # @return this Form\r\n  points: (ps, halfsize=2, isCircle=false) ->\r\n    for p in ps\r\n      @point(p, halfsize, isCircle )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a line\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pair` a Pair object\r\n  @line: (ctx, pair) ->\r\n    if !pair.p1 then throw \"#{pair.toString()} is not a Pair\"\r\n    elem = SVGSpace.svgElement( ctx.group, \"line\", SVGForm.id(ctx) )\r\n\r\n    DOMSpace.attr( elem, {\r\n      x1: pair.x\r\n      y1: pair.y\r\n      x2: pair.p1.x\r\n      y2: pair.p1.y\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a line\r\n  # @param `p` a Pair object\r\n  # @return this Form\r\n  line: (p) ->\r\n    @nextID()\r\n    SVGForm.line( @cc, p )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a line\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pairs` an array of Pair objects\r\n  @lines: (ctx, pairs) ->\r\n    return ( SVGForm.line( ctx, ln ) for ln in pairs )\r\n\r\n\r\n  # ## Draw a series of lines\r\n  # @param `ps` an array of Lines\r\n  # @return this Form\r\n  lines: (ps) ->\r\n    for p in ps\r\n      @line(p)\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a rectangle\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pair` a Pair object\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @rect: (ctx, pair, fill=true, stroke=true) ->\r\n    if !pair.p1 then throw \"#{pair.toString() is not a Pair}\"\r\n    elem = SVGSpace.svgElement( ctx.group, \"rect\", SVGForm.id(ctx) )\r\n\r\n    size = pair.size()\r\n    DOMSpace.attr( elem, {\r\n      x: pair.x\r\n      y: pair.y\r\n      width: size.x\r\n      height: size.y\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a rectangle\r\n  # @param `p` a Pair object\r\n  # @return this Form\r\n  rect: (p, checkBounds=true) ->\r\n    @nextID()\r\n    r = if (checkBounds) then p.bounds() else p\r\n    SVGForm.rect( @cc, r )\r\n    return @\r\n\r\n\r\n  # ## A static  function to draw a circle\r\n  # @param `ctx` canvas rendering context\r\n  # @param `c` a Circle object\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @circle: (ctx, c, fill=true, stroke=false) ->\r\n\r\n    elem = SVGSpace.svgElement( ctx.group, \"circle\", SVGForm.id(ctx) )\r\n    if (!elem) then return\r\n\r\n    DOMSpace.attr( elem, {\r\n      cx: c.x\r\n      cy: c.y\r\n      r: c.radius\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a circle\r\n  # @param `c` a Circle object\r\n  # @demo svgform.circle\r\n  # @return this Form\r\n  circle: (c) ->\r\n    @nextID()\r\n    SVGForm.circle( @cc, c )\r\n    return @\r\n\r\n\r\n\r\n  # ## A static function to draw a polygon\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pts` an array of Points\r\n  # @param `closePath` a boolean value to specify if the path should be closed (joining last point with first point)\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @polygon: ( ctx, pts, closePath=true, fill=true, stroke=true) ->\r\n\r\n    elem = SVGSpace.svgElement( ctx.group, (if (closePath) then \"polygon\" else \"polyline\"), SVGForm.id(ctx) )\r\n    if (!elem) then return\r\n\r\n    if pts.length <= 1 then return;\r\n\r\n    points = (\"#{pts[i].x},#{pts[i].y}\" for i in [0...pts.length] by 1)\r\n    DOMSpace.attr( elem, {\r\n      points: points.join(\" \")\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a polygon\r\n  # @param `ps` an array of Points\r\n  # @param `closePath` a boolean value to specify if the path should be closed (joining last point with first point)\r\n  # @return this Form\r\n  polygon: (ps, closePath) ->\r\n    @nextID()\r\n    SVGForm.polygon( @cc, ps, closePath)\r\n    return @\r\n\r\n  # ## A static function to draw a triangle\r\n  # @param `ctx` canvas rendering context\r\n  # @param `tri` a Triangle object\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @triangle: ( ctx, tri, fill=true, stroke=false) ->\r\n    return SVGForm.polygon(ctx, tri.toArray() )\r\n\r\n\r\n  # ## Draw a triangle\r\n  # @param `tri` a Triangle object\r\n  # @return this Form\r\n  triangle: (tri) ->\r\n    @nextID()\r\n    SVGForm.triangle( @cc, tri )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a curve as straight polygon segments. In future, this should be converted to bezier curves.\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pts` an array of Points\r\n  @curve: ( ctx, pts, closePath=false ) ->\r\n    SVGForm.polygon( ctx, pts, closePath )\r\n\r\n\r\n  # ## Draw a curve\r\n  # @param `ps` an array of Points\r\n  # @return this Form\r\n  curve: (ps, closePath=false ) ->\r\n    @nextID()\r\n    SVGForm.curve( @cc, ps, closePath )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw text\r\n  # @param `ctx` canvas rendering context\r\n  # @param `pt` a Point object to specify the anchor point\r\n  # @param `txt` a string of text to draw\r\n  # @param `maxWidth` not applicable in svg\r\n  # @param `dx` optional shift in x position\r\n  # @param `dy` optional shift in y position\r\n  @text: ( ctx, pt, txt, maxWidth=0, dx=0, dy=0 ) ->\r\n    elem = SVGSpace.svgElement( ctx.group, \"text\", SVGForm.id(ctx) )\r\n    if (!elem) then return\r\n\r\n    DOMSpace.attr( elem, {\r\n      \"pointer-events\": \"none\",\r\n      x: pt.x,\r\n      y: pt.y,\r\n      dx: 0,\r\n      dy: 0\r\n    })\r\n\r\n    elem.textContent = txt\r\n\r\n    SVGForm.style(elem, {\r\n      fill: ctx.style.fill\r\n      stroke: ctx.style.stroke\r\n      \"font-family\": ctx.fontFace or false\r\n      \"font-size\": ctx.fontSize or false\r\n    })\r\n    return elem\r\n\r\n\r\n  # ## Draw text\r\n  # @param `p` a Point to specify anchor position\r\n  # @param `txt` a string of text\r\n  # @param `maxWidth` not applicable in svg\r\n  # @param `xoff, yoff` x and y positional offset values\r\n  text: (p, txt, maxWidth=1000, xoff, yoff) ->\r\n    @nextID()\r\n    SVGForm.text( @cc, p, txt, maxWidth, xoff, yoff)\r\n    return @\r\n\r\n\r\n\r\n  # ## Set font size and font face\r\n  # @param `size` an integer value to specify font size in pixels\r\n  # @param `face` optional name to change the font face, such as \"sans-serif\" or \"Helvetica\"\r\n  # @eg `form.font(24)` `form.font(12, \"Georgia\")`\r\n  # @return this Form\r\n  font: (size, face=false) ->\r\n    @cc.fontFace = face\r\n    @cc.fontSize = size\r\n    @cc.font = \"#{size}px #{face}\"\r\n    return @\r\n\r\n\r\n  # ## Draw a shape. Defaults to `sketch()`. Override this function to draw differently.\r\n  # @return this Form\r\n  draw: ( shape ) ->\r\n    @sketch( shape )\r\n\r\n\r\n  # ## Default draw based on the types of shape (Point, Line, Circle, etc)\r\n  # @param `shape` any shape such as `Point` or `Line`, or an array of Points\r\n  # @return this Form\r\n  sketch: ( shape ) ->\r\n    shape.floor()\r\n\r\n    if shape instanceof Circle\r\n      SVGForm.circle(@cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Rectangle\r\n      SVGForm.rect( @cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Triangle\r\n      SVGForm.triangle( @cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Line or shape instanceof Pair\r\n      SVGForm.line(@cc, shape)\r\n\r\n    else if shape instanceof PointSet\r\n      SVGForm.polygon(@cc, shape.points )\r\n\r\n    else if shape instanceof Vector or shape instanceof Point\r\n      SVGForm.point(@cc, shape)\r\n\r\n\r\n    return @\r\n\r\n\r\n# namespace\r\nthis.SVGForm = SVGForm\n\r\nclass SVGSpace extends DOMSpace\r\n\r\n  constructor: ( id='pt_space', bgcolor=false, context='svg' ) ->\r\n    super\r\n\r\n    # background color rectangle\r\n    @bg = document.createElementNS( \"http://www.w3.org/2000/svg\", \"rect\")\r\n    @bg.setAttribute(\"id\", id+\"_bg\");\r\n    @bg.setAttribute(\"fill\", bgcolor);\r\n\r\n    @space.appendChild(@bg)\r\n\r\n  # Override DOMSpace function to create the root svg element\r\n  _createSpaceElement: () ->\r\n    @space = document.createElementNS( \"http://www.w3.org/2000/svg\", \"svg\")\r\n    @space.setAttribute(\"id\", @id)\r\n    @appended = false\r\n\r\n\r\n  @svgElement: (parent, name, id) ->\r\n\r\n    if (!parent || !parent.appendChild)\r\n      throw( \"parent parameter needs to be a DOM node\" )\r\n\r\n    elem = document.querySelector(\"#\"+id);\r\n\r\n    if (!elem)\r\n      elem = document.createElementNS( \"http://www.w3.org/2000/svg\", name)\r\n      elem.setAttribute(\"id\",id)\r\n      elem.setAttribute(\"class\",id.substring(0, id.indexOf(\"-\")))\r\n      parent.appendChild( elem )\r\n\r\n    return elem\r\n\r\n\r\n  # ## This overrides Space's `resize` function. It's a callback function for window's resize event. Keep track of this with `onSpaceResize(w,h,evt)` callback in your added objects.\r\n  # @return this CanvasSpace\r\n  resize: (w, h, evt) ->\r\n\r\n    @size.set(w, h)\r\n    @center = new Vector( w/2, h/2 )\r\n\r\n    @space.setAttribute(\"width\", w)\r\n    @space.setAttribute(\"height\", h)\r\n\r\n    @bg.setAttribute(\"width\", w)\r\n    @bg.setAttribute(\"height\", h)\r\n\r\n    # player resize callback\r\n    for k, p of @items\r\n      if p.onSpaceResize? then p.onSpaceResize(w, h, evt)\r\n\r\n    return @\r\n\r\n\r\n  # ## Remove an item from this Space\r\n  # @param an object with an auto-assigned `animateID` property\r\n  # @demo svgspace.remove\r\n  # @return this space\r\n  remove : (item) ->\r\n    temp = @space.querySelectorAll( \".\"+SVGForm._scopeID(item) )\r\n\r\n    for t in temp\r\n      t.parentNode.removeChild(t)\r\n\r\n    delete @items[ item.animateID ]\r\n    return @\r\n\r\n\r\n  # ## Remove all items from this Space\r\n  # @return this space\r\n  removeAll: () ->\r\n    while (@space.firstChild)\r\n      @space.removeChild(@space.firstChild)\r\n      return @\r\n\r\n\r\n# namescape\r\nthis.SVGSpace = SVGSpace\n\r\n# ### Simple easing functions based on Robert Penner's functions.\r\nclass Easing\r\n\r\n  # ## Linear interpolation\r\n  # @param `t` current time or iteration\r\n  # @param `b` start value\r\n  # @param `c` change in value\r\n  # @param `d` duration time or total iteration\r\n  # @return interpolated value\r\n  @linear: (t, b, c, d) ->\r\n    return c * (t /= d) + b\r\n\r\n  @_linear:(t) -> Easing.linear(t, 0, 1, 1)\r\n\r\n  @quadIn: (t, b, c, d) ->\r\n    return c * (t /= d) * t + b\r\n\r\n  @_quadIn: (t) -> Easing.quadIn(t, 0, 1, 1)\r\n\r\n  @quadOut: (t, b, c, d) ->\r\n    return -c * (t /= d) * (t - 2) + b\r\n\r\n  @_quadOut: (t) -> Easing.quadOut(t, 0, 1, 1)\r\n\r\n  @cubicIn: (t, b, c, d) ->\r\n    t = t/d\r\n    return c * t * t * t + b\r\n\r\n  @_cubicIn: (t) -> Easing.cubicIn(t, 0, 1, 1)\r\n\r\n  @cubicOut: (t, b, c, d) ->\r\n    t = t/d\r\n    return c * ((t - 1) * t * t + 1) + b\r\n\r\n  @_cubicOut: (t) -> Easing.cubicOut(t, 0, 1, 1)\r\n\r\n  @elastic: (t, b, c, d, el=0.3) ->\r\n    s = 1.70158\r\n    p = d * el\r\n    a = c\r\n    if t == 0 then return b\r\n    t = t/d\r\n    if t == 1 then return b + c\r\n    if a < Math.abs(c)\r\n      a = c\r\n      s = p / 4\r\n    else if a != 0\r\n      s = p / Const.two_pi * Math.asin(c / a)\r\n    else\r\n      s = 0\r\n\r\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * Const.two_pi / p) + c + b\r\n\r\n  @_elastic: (t) -> Easing.elastic(t, 0, 1, 1)\r\n\r\n  @bounce: (t, b, c, d) ->\r\n    if (t /= d) < (1 / 2.75)\r\n      return c * (7.5625 * t * t) + b\r\n    else if t < (2 / 2.75)\r\n      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b\r\n    else if t < (2.5 / 2.75)\r\n      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b\r\n    else\r\n      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b\r\n\r\n  @_bounce: (t) -> Easing.bounce(t, 0, 1, 1)\r\n\r\n\r\n# namespace\r\nthis.Easing = Easing\n# ### (In progress) Like Grid, but expand the rows as needed to fit more items.\r\nclass GridCascade extends Grid\r\n  constructor : () ->\r\n    super\r\n\r\n    @startRow = 0\r\n\r\n  # ## Clear the layout and re-make the initial grid\r\n  # simplified because rows are auto-expanded in fit()\r\n  resetLayout : () ->\r\n    @layout = []\r\n    @startRow = 0\r\n\r\n\r\n  # ## Mark a certain area in the grid as occupied. This also checks for new rows, which is not checked in Grid\r\n  # @param `x` column index\r\n  # @param `y` row index\r\n  # @param `W` column width\r\n  # @param `h` row size\r\n  # @return this grid\r\n  occupy : ( x, y, w, h ) ->\r\n    for c in [x...(w+x)]\r\n      for r in [y...(h+y)]\r\n        if not @layout[r]? then @layout[r] = []\r\n        @layout[ r ][ c ] = 1\r\n\r\n    return @\r\n\r\n  # ## optimize the iteration by starting at a row that has free cells\r\n  findStartRow : () ->\r\n    index = @startRow\r\n    for r in [@startRow...@rows]\r\n      index = r\r\n      for c in [0...@columns]\r\n        if @layout[r]?\r\n          if !@layout[r][c]? or @layout[r][c] <= 0 then return index\r\n\r\n    return index\r\n\r\n  # ## fit this area within the grid. This expands new rows to fit more items as needed.\r\n  # @param `width` number of columns\r\n  # @param `height` number of rows\r\n  # @return an object with properties `row` and `column` to specify the top left position, `columnSize` and `rowSize` to specify the resulting size in grid units, and `bound` which is the actual area as a Rectangle object.\r\n  fit : ( cols, rows ) ->\r\n\r\n    # find column size, bound by maximum columns in the grid\r\n    colSize = Math.min( cols, @columns )\r\n\r\n    # go through each grid cell\r\n    # each row\r\n    for currRow in [@startRow...@rows]\r\n\r\n      colCount = colSize # counter to find available columns\r\n      freeCol = 0 # start position of first free column\r\n\r\n      # if this is the last row, create more rows to fit\r\n      if currRow+rows >= @rows then @rows += (rows)\r\n\r\n      # create new row if it does not exist\r\n      if not @layout[currRow]? then @layout[currRow] = []\r\n\r\n      # each column\r\n      for currCol in [0...@columns]\r\n        cell = @layout[currRow][currCol]\r\n\r\n        # if cell is filled\r\n        if cell? and cell > 0\r\n          freeCol = currCol+1 # this column is not free\r\n          colCount = colSize # reset colCount if it's counting\r\n\r\n        # if cell is not filled\r\n        else\r\n\r\n          # see if the next one fits\r\n          colCount--\r\n\r\n          # can fit all\r\n          if colCount is 0\r\n\r\n            # check for the edge case where subsequent rows are already occupied\r\n            allRowsFree = true\r\n            if rows > 1\r\n              for rc in [currRow...(currRow+rows)]\r\n                if rc <= @rows and @layout[rc]? and @layout[rc][freeCol] > 0\r\n                  allRowsFree = false\r\n                  break\r\n\r\n            # return cell only when rows and columns are free\r\n            if allRowsFree\r\n\r\n              # mark this area as occupied\r\n              @occupy( freeCol,  currRow, colSize, rows )\r\n\r\n              # optimize looping by finding next start row\r\n              if currRow > @startRow then @startRow = @findStartRow()\r\n\r\n              # calculate the bounding box\r\n              b = new Rectangle( @$add( @cell.size.$multiply( freeCol, currRow ) ) ) # top left\r\n              b.resizeTo( @cell.size.$multiply( colSize, rows ) ) # size\r\n\r\n              return {\r\n                row: currRow\r\n                column: freeCol\r\n                columnSize: colSize\r\n                rowSize: rows\r\n                bound: b\r\n              }\r\n\r\n    # cannot fit\r\n    console.error( \"cannot fit #{currRow} #{freeCol} #{cols} #{rows}\" )\r\n    return false\r\n\r\n\r\n# namespace\r\nthis.GridCascade = GridCascade\n# ### (In progress)  A very basic particle emitter\r\nclass ParticleEmitter extends Vector\r\n\r\n  # ## Constructor\r\n  constructor: ( ) ->\r\n    super\r\n\r\n    @system = null\r\n    @lastTime = 0\r\n    @period = 0\r\n    @animateID = -1 # for Space loop\r\n\r\n  # ## Initiate with an instance of a `ParticleSystem`\r\n  init: ( system ) ->\r\n    @system = system\r\n\r\n  # ## Set frequency of emisson.\r\n  # @param `f` how many per second.\r\n  frequency: (f) ->\r\n    @period = 1000 / f\r\n    return @\r\n\r\n  # ## emit a particle (abstract method)\r\n  emit: ->\r\n    # override to define an emitter function\r\n    # e.g @system.add( new Particle( @position ) )\r\n\r\n  # ## animate function to be called by Space\r\n  animate: ( time, frame, ctx ) ->\r\n    if time - @lastTime > @period\r\n      @emit()\r\n      @lastTime = time\r\n\r\n\r\n# namespace\r\nthis.ParticleEmitter = ParticleEmitter\n# ### (In progress) An area that influence force, velocity, etc of particles inside it\r\nclass ParticleField extends Rectangle\r\n\r\n  constructor: ()->\r\n    super\r\n    @system = undefined\r\n\r\n  # ## check particles to work on\r\n  # @param {particles} array of particles\r\n  # @param {removal} if true and if particle within bound, then remove it from array\r\n  check: (particles, removal=false) ->\r\n    temp = []\r\n    for p in particles\r\n      if @hasIntersect( p ) # within\r\n        @work( p )\r\n      else\r\n        temp.push( p )\r\n\r\n    return ( if removal then temp else particles )\r\n\r\n  # ## apply the changes to a particle (abstract method), used in check()\r\n  # @param {p} a particle\r\n  work: (p) ->\r\n\r\n\r\n\r\n\r\n# namespace\r\nthis.ParticleField = ParticleField\n# ### A basic quad tree implementation\r\nclass QuadTree extends Rectangle\r\n\r\n  # ## Create a new QuadTree, which is a kind of Rectangle\r\n  constructor: () ->\r\n    super\r\n\r\n    # when split, this is an object with topLeft, topRight, bottomLeft, and bottomRight\r\n    @quads = false\r\n\r\n    @items = []\r\n\r\n    @depth = 0\r\n    @max_depth = 6\r\n    @max_items = 2\r\n\r\n\r\n  # ## Get a list of quads in which this point is contained\r\n  # @param `p` is a Point\r\n  # @param `list` Optional existing list to append to\r\n  getQuads: ( p, list=[] ) ->\r\n\r\n    if @intersectPoint( p )\r\n\r\n      list.push( @ )\r\n\r\n      if @quads\r\n        for k, q of @quads\r\n          if q.intersectPoint( p )\r\n            q.getQuads( p, list )\r\n\r\n    return list\r\n\r\n  # ## Get a list of items in this point's deepest quad\r\n  # @param `p`  a Point\r\n  getItems: ( p ) ->\r\n\r\n    if @intersectPoint( p )\r\n\r\n      if !@quads then return @items\r\n\r\n      if @quads\r\n        for k, q of @quads\r\n          if q.intersectPoint( p )\r\n            return q.getItems( p )\r\n\r\n    return []\r\n\r\n  # ## Add an item into this QuadTree. Split to sub quads if needed.\r\n  addToQuad: (item) ->\r\n\r\n    if !item then return -1\r\n\r\n    # if this has subs quads\r\n    if @quads\r\n      for k, q of @quads\r\n        _depth = q.addToQuad( item )\r\n        if _depth > 0 then return _depth # return depth if it's added\r\n\r\n      # otherwise return -1\r\n      return -1\r\n\r\n    # if this has no sub quads and it contains item\r\n    if !@quads and @intersectPoint( item )\r\n\r\n      # if max size is reached and depth is not max, then split to sub quads\r\n      if @items.length >= @max_items\r\n        if @depth < @max_depth\r\n          @splitQuad()\r\n          return @addToQuad( item )\r\n        else\r\n          return -1\r\n\r\n        # if not max size yet, just add item and return current depth\r\n      else\r\n        @items.push( item )\r\n        return @depth\r\n\r\n    # not contained in this quad\r\n    return -1\r\n\r\n\r\n  # ## Split this into 4 quads using Rectangle's `quadrant()`\r\n  splitQuad: () ->\r\n\r\n    # split to sub quads and increment depth\r\n    @quads = @quadrants()\r\n    for k, q of @quads\r\n      q.depth = @depth+1\r\n\r\n    # add current items to sub quads\r\n    for item, i in @items\r\n      _depth = @addToQuad( item )\r\n\r\n      # if it's added to sub quads, mark for removal\r\n      if _depth > @depth\r\n        @items[i] = null\r\n\r\n    # remove items that are marked null\r\n    for t in @items\r\n      if !t\r\n        @items.splice( t, 1 )\r\n\r\n\r\n  # ## reset this quad, removing items and sub-quads\r\n  resetQuad: () ->\r\n    @items = []\r\n    if @quads\r\n      for k, q of @quads\r\n        q.resetQuad()\r\n      @quads = false\r\n\r\n\r\n\r\n# namespace\r\nthis.QuadTree = QuadTree\n# ### Point sampling using Best Candidate and Poisson methods.\r\nclass SamplePoints extends PointSet\r\n\r\n  # ## Construct a point sampler\r\n  constructor: () ->\r\n    super\r\n\r\n    @bestcandidate = null\r\n    @poisson = null\r\n    @bound = null\r\n    @boundsize = null\r\n\r\n  # ## Add a bound.\r\n  # @param `b` the bounding box\r\n  # @param `anchor` a boolean value. If set to `true`, then current position is set to bound's position\r\n  # @return this sampler\r\n  setBounds: ( b, anchor=false ) ->\r\n    if anchor then @set( b )\r\n    @bound = new Rectangle(@).size( b.size() )\r\n    return @\r\n\r\n\r\n  # ## Initiate a best candidate sampler\r\n  # @return this sampler\r\n  bestCandidateSampler: () ->\r\n\r\n    @points = []\r\n\r\n    # set boundary if @bound if not set\r\n    if !@bound then @bound = new Rectangle().size(500,500)\r\n    @boundsize = @bound.size()\r\n\r\n    @bestcandidate = {\r\n      halfsize: @boundsize.$divide(2)\r\n      quartersize: @boundsize.$divide(4)\r\n      maxDist: @boundsize.x*@boundsize.x + @boundsize.y*@boundsize.y\r\n    }\r\n\r\n    return @\r\n\r\n\r\n  # ## Initiate a poisson sampler using Bridson's algorithm\r\n  # Based on http://bl.ocks.org/mbostock/19168c663618b7f07158\r\n  # @return this sampler\r\n  poissonSampler: (radius) ->\r\n\r\n    @points = []\r\n\r\n    # set boundary if @bound if not set\r\n    if !@bound then @bound = new Rectangle().size(500,500)\r\n    @boundsize = @bound.size()\r\n\r\n    cellsize = radius * Math.SQRT1_2\r\n\r\n    @poisson = {\r\n      grid: []\r\n      gridWidth: Math.ceil( @boundsize.x / cellsize )\r\n      gridHeight: Math.ceil( @boundsize.y / cellsize )\r\n      cellSize: cellsize\r\n      radius: radius\r\n      radius2: radius * radius\r\n      R: 3 * radius * radius\r\n      queue: []\r\n      queueSize: 0\r\n      sampleSize: 0\r\n      sincos: Util.sinCosTable()\r\n    }\r\n\r\n    return @\r\n\r\n  # ## Get a sample from poisson sampler or best-candidate sampler.\r\n  # @param `numSamples` number of times to sample. Defaults to 10 times\r\n  # @param `type` sampling type, either \"poisson\" or \"bestcandidate\". Defaults to \"bestcandidate\".\r\n  # @return a point, or false if no more sample can be found\r\n  sample: ( numSamples=10, type=false ) ->\r\n\r\n    # Poisson\r\n    if @poisson and type=='poisson'\r\n\r\n      # check if it's done\r\n      if @poisson.sampleSize > 0 and @poisson.queueSize == 0 then return false\r\n\r\n      # create first sample\r\n      if !@poisson.sampleSize then return @_poissonSample( @bound.x+@boundsize.x/2, @bound.y+@boundsize.y/2 )\r\n\r\n      while (@poisson.queueSize)\r\n        i = Math.floor( Math.random() * @poisson.queueSize )\r\n        s = @poisson.queue[i];\r\n\r\n        for j in [0...numSamples] by 1\r\n          a = Math.floor(360 * Math.random())\r\n          r = Math.sqrt(Math.random() * @poisson.R + @poisson.radius2)\r\n          x = s.x + r * @poisson.sincos.cos[a]\r\n          y = s.y + r * @poisson.sincos.sin[a]\r\n\r\n          if (x >= @bound.x && x < @boundsize.x && y >= @bound.y && y < @boundsize.y && @_poissonCheck(x, y))\r\n            return @_poissonSample(x, y) # point is stored in @poisson.grid instead of @points\r\n\r\n        @poisson.queue[i] = @poisson.queue[--@poisson.queueSize];\r\n        @poisson.queue.length = @poisson.queueSize;\r\n\r\n      return true\r\n\r\n    # Best candidate\r\n    else if @bestcandidate\r\n\r\n      best = null\r\n      bestDist = -1\r\n\r\n      for i in [0...numSamples] by 1\r\n\r\n        # create sample\r\n        p = new Vector( @bound.x + @boundsize.x * Math.random(), @bound.y + @boundsize.y * Math.random() )\r\n        if @points.length == 0\r\n          best = p\r\n          break\r\n        else\r\n          # best point is the one that has the \"largest\" nearest distance\r\n          nearest = @_bestCandidateCheck( p )\r\n          if nearest > bestDist\r\n            best = p\r\n            bestDist = nearest\r\n\r\n      if best then @points.push( best )\r\n\r\n      return best\r\n\r\n\r\n  # find nearest distance of best candidate sample\r\n  _bestCandidateCheck: (p) ->\r\n    _dist = @bestcandidate.maxDist\r\n\r\n    # rough optimization. Only search for points in the quarter bound area of this point\r\n    halfbound = new Rectangle( p.x-@bestcandidate.quartersize.x, p.y-@bestcandidate.quartersize.y).size( @bestcandidate.halfsize.x, @bestcandidate.halfsize.y )\r\n    matches = (it for it in @points when halfbound.intersectPoint( it ))\r\n\r\n    for w in matches\r\n      dx = (w.x-p.x)\r\n      dy = (w.y-p.y)\r\n      dist = dx*dx + dy*dy\r\n      if dist < _dist\r\n        _dist = dist\r\n\r\n    return _dist\r\n\r\n\r\n  # create a poisson sample\r\n  _poissonSample: (x, y) ->\r\n    s = new Point(x, y)\r\n    @poisson.queue.push(s);\r\n    @poisson.grid[ @poisson.gridWidth * (y / @poisson.cellSize | 0) + (x / @poisson.cellSize | 0)] = s\r\n    @poisson.sampleSize++\r\n    @poisson.queueSize++\r\n    return s\r\n\r\n  # check if poisson sample is too far\r\n  _poissonCheck: (x, y) ->\r\n    i = Math.floor( x / @poisson.cellSize )\r\n    j = Math.floor( y / @poisson.cellSize )\r\n    i0 = Math.max(i - 2, 0)\r\n    j0 = Math.max(j - 2, 0)\r\n    i1 = Math.min(i + 3, @poisson.gridWidth)\r\n    j1 = Math.min(j + 3, @poisson.gridHeight)\r\n\r\n    for j in [j0...j1] by 1\r\n      o = j *  @poisson.gridWidth\r\n      for i in [i0...i1] by 1\r\n        s = @poisson.grid[o + i]\r\n        if s\r\n          dx = s.x - x\r\n          dy = s.y - y\r\n          if (dx * dx + dy * dy < @poisson.radius2) then return false\r\n\r\n    return true\r\n\r\n  # ## A static implementation of Mitchell's Best Neighor Algorithm to generate one sample. (Consider using `SamplePoints` object instead)\r\n  # @param `bound` a Rectangle object to specify the bounding box\r\n  # @param `items` an array of existing items\r\n  # @param `samples` number of sampling. Default to 10.\r\n  # @return o Vector object which is best candidate\r\n  @bestCandidate: ( bound, items, samples=10 ) ->\r\n\r\n    # bound\r\n    size = bound.size()\r\n    halfsize = size.$divide(2)\r\n    quartersize = size.$divide(4)\r\n    maxDist = size.x*size.x + size.y*size.y\r\n\r\n    # find nearest distance\r\n    _nearest = ( p ) ->\r\n      _dist = maxDist\r\n\r\n      # rough optimization. Only search for points in the quarter bound area of this point\r\n      halfbound = new Rectangle( p.x-quartersize.x, p.y-quartersize.y).size( halfsize.x, halfsize.y )\r\n      matches = (it for it in items when halfbound.intersetPoint( it ))\r\n\r\n      for w in matches\r\n        dx = (w.x-p.x)\r\n        dy = (w.y-p.y)\r\n        dist = dx*dx + dy*dy\r\n        if dist < _dist\r\n          _dist = dist\r\n\r\n      return _dist\r\n\r\n\r\n    # find best point by going through a number of random samples\r\n    best = null\r\n    bestDist = -1\r\n\r\n    for i in [0...samples]\r\n\r\n      # create sample\r\n      p = new Vector( bound.x + size.x * Math.random(), bound.y + size.y * Math.random() )\r\n      if items.length == 0\r\n        return p\r\n      else\r\n        # best point is the one that has the \"largest\" nearest distance\r\n        nearest = _nearest( p )\r\n        if nearest > bestDist\r\n          best = p\r\n          bestDist = nearest\r\n\r\n    return best\r\n\r\n# namespace\r\nthis.SamplePoints = SamplePoints\n# ### A Bound subdivided in horizontal and vertical stripes\r\nclass StripeBound extends Rectangle\r\n\r\n  constructor: () ->\r\n    super\r\n\r\n    @frequency = new Point()\r\n    @stripes = new Point()\r\n    @method = 'frequency'\r\n\r\n    @mask = null\r\n\r\n  # ## Determines the number of stripes by frequency, and change method to frequency\r\n  setFrequency: (x, y) ->\r\n    @frequency = new Vector(x, y)\r\n    @method = 'frequency'\r\n\r\n\r\n  # ## Set number of strips by number, and change method to stripes\r\n  setStripes: (x, y) ->\r\n    @stripes = new Point(x,y)\r\n    @method = 'stripes'\r\n\r\n\r\n  # ## get stripes as boxes\r\n  # @return boxes of `{columns:[Pairs], rows:[Pairs]}`\r\n  getStripes: () ->\r\n    size = @size()\r\n    result = {columns: [], rows: []}\r\n\r\n    # calculate frequency and spacing\r\n    freq = if @method == 'frequency' then @frequency.clone() else size.$divide( @stripes ).floor()\r\n    diff = size.$divide( freq )\r\n\r\n    # rows\r\n    for d in [0..freq.y-1]\r\n      dy = diff.y*d\r\n      p = new Pair(0, dy).to(size.x, dy+diff.y).add(@)\r\n      p.p1.add(@)\r\n      result.rows.push( p )\r\n\r\n    # columns\r\n    for d in [0..freq.x-1]\r\n      dx = diff.x*d\r\n      p = new Pair(dx, 0).to(dx+diff.x+0.5, size.y).add(@)\r\n      p.p1.add(@)\r\n      result.columns.push( p )\r\n\r\n    return result\r\n\r\n  # ## get stripes as lines\r\n  # @return lines of `{columns:[Pairs], rows:[Pairs]}`\r\n  getStripeLines: () ->\r\n    size = @size()\r\n    result = {columns: [], rows: []}\r\n\r\n    # calculate frequency and spaci   ng\r\n    freq = if @method == 'frequency' then @frequency.clone() else size.$divide( @stripes ).floor()\r\n    diff = size.$divide( freq )\r\n\r\n    # rows\r\n    for d in [0..freq.y]\r\n      dy = diff.y*d\r\n      p = new Pair(0, dy).to(size.x, dy).add(@)\r\n      p.p1.add(@)\r\n      result.rows.push( p )\r\n\r\n    # columns\r\n    for d in [0..freq.x]\r\n      dx = diff.x*d\r\n      p = new Pair(dx, 0).to(dx, size.y).add(@)\r\n      p.p1.add(@)\r\n      result.columns.push( p )\r\n\r\n    return result\r\n\r\n\r\n  # ## create a masking area for canvas clipping. Defaults to position in the center of the bound, unless anchor paramater is set\r\n  # @param `w, h` mask width and height\r\n  # @param `anchor` optional anchor point, or leave unset to default anchor position which is center of the bound.\r\n  setMask: (w, h, anchor=false) ->\r\n    @mask = new Rectangle(@x, @y)\r\n    sz = @size()\r\n\r\n    # center it if no anchor point is set\r\n    if !anchor\r\n      diff = sz.$subtract( w, h ).divide(2)\r\n      anchor = new Point(@x+diff.x, @y+diff.y)\r\n    else\r\n      anchor = @.$add(anchor)\r\n\r\n    # position and set size\r\n    @mask.set( anchor.x, anchor.y).size(w, h)\r\n\r\n\r\n  # ## anchor mask to bound's origin position\r\n  anchorMask: () ->\r\n    d = @.$subtract( @mask)\r\n    @.moveBy(d)\r\n    @mask.moveBy(d)\r\n\r\n# namespace\r\nthis.StripeBound = StripeBound\n# ### (In progress) A simple handle that can be dragged by mouse\r\nclass UI extends Rectangle\r\n\r\n  # class variable tracks if a handle has been dragged (to avoid dragging multiple handles at once)\r\n  @dragTarget: null\r\n\r\n  constructor: () ->\r\n    super\r\n    @dragging = false\r\n\r\n  animate : (time, frame, ctx) ->\r\n    ctx.fillStyle = '#f00'\r\n    Form.rect( ctx, this )\r\n\r\n  onMouseAction: (type, x, y, evt) ->\r\n    if @intersectPoint( x, y )\r\n      if type == 'drag' and !UI.dragTarget\r\n        @dragging = true\r\n        UI.dragTarget = this\r\n\r\n    if @dragging and type == 'move'\r\n      @moveTo(x,y).moveBy( @size().multiply(-0.5) ) # move and anchor by center point\r\n\r\n    if type == 'drop'\r\n      @dragging = false\r\n      UI.dragTarget = null\r\n\r\n\r\n# namespace\r\nthis.UI = UI\n# ### Generate Perlin and Simplex2D noise.\r\nclass Noise extends Vector\r\n\r\n  # Perlin noise implementation based on Stefan Gustavson's java implementation\r\n  # http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\r\n  # http://webstaff.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java\r\n  # coffeescript based on sj26's simplex port: https://gist.github.com/sj26/6145489\r\n\r\n  grad3: [\r\n    [1,1, 0], [-1,1, 0], [1,-1,0], [-1,-1,0],\r\n    [1,0, 1], [-1, 0, 1], [1,0,-1], [-1,0,-1],\r\n    [0, 1,1], [ 0,-1,1], [0,1,-1], [ 0,-1,-1]\r\n  ]\r\n\r\n  simplex: [\r\n    [0,1,2,3], [0,1,3,2], [0,0,0,0], [0,2,3,1], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [1,2,3,0], [0,2,1,3], [0,0,0,0], [0,3,1,2], [0,3,2,1]\r\n    [0,0,0,0], [0,0,0,0], [0,0,0,0], [1,3,2,0], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [1,2,0,3], [0,0,0,0], [1,3,0,2], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [2,3,0,1], [2,3,1,0], [1,0,2,3], [1,0,3,2], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [2,0,3,1], [0,0,0,0], [2,1,3,0], [0,0,0,0], [0,0,0,0]\r\n    [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [2,0,1,3], [0,0,0,0], [0,0,0,0], [0,0,0,0], [3,0,1,2], [3,0,2,1]\r\n    [0,0,0,0], [3,1,2,0], [2,1,0,3], [0,0,0,0], [0,0,0,0], [0,0,0,0]\r\n    [3,1,0,2], [0,0,0,0], [3,2,0,1], [3,2,1,0]\r\n  ]\r\n\r\n  constructor: () ->\r\n    super\r\n\r\n    @p = [151,160,137,91,90,15,\r\n         131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\r\n         190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\r\n         88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,\r\n         77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\r\n         102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,\r\n         135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,\r\n         5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\r\n         223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,\r\n         129,22,39,253,9,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,\r\n         251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\r\n         49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\r\n         138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\r\n    ]\r\n\r\n    # To remove the need for index wrapping, double the permutation table length\r\n    @perm = (@p[i & 255] for i in [0...512])\r\n\r\n\r\n  # ## Generate a different noise by seeding\r\n  # @param `seed` a value between 0 to 1\r\n  # @eg `noise.seed(0.1)`, `noise.seed(Math.random())`\r\n  seed: ( seed ) ->\r\n    if(seed > 0 && seed < 1)\r\n      seed *= 65536\r\n\r\n    seed = Math.floor(seed)\r\n    if(seed < 256)\r\n      seed |= seed << 8\r\n\r\n    for i in [0..255]\r\n      v = if (i & 1) then @p[i] ^ (seed & 255) else @p[i] ^ ((seed>>8) & 255)\r\n      @perm[i] = @perm[i + 256] = v\r\n\r\n\r\n  _dot: (g, x, y) ->\r\n    g[0] * x + g[1] * y\r\n\r\n\r\n  # ## Get a 2d perlin noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.\r\n  # @param `x, y` optional x and y dimension, or leave empty to use this vector's x and y position\r\n  # @eg `noise.perlin2d()`, `noise.perlin2d(10.001, 0.1)`\r\n  # @return a value between 0 to 1\r\n  perlin2d: (xin=@x, yin=@y) ->\r\n\r\n    _fade = (f) -> f*f*f*(f*(f*6-15)+10)\r\n\r\n    i = Math.floor( xin ) % 255\r\n    j = Math.floor( yin ) % 255\r\n    x = xin - i\r\n    y = yin - j\r\n\r\n    n00 = @_dot(@grad3[ (i+@perm[j]) % 12 ], x, y )\r\n    n01 = @_dot(@grad3[ (i+@perm[j+1]) % 12 ], x, y-1 )\r\n    n10 = @_dot(@grad3[ (i+1+@perm[j]) % 12 ], x-1, y )\r\n    n11 = @_dot(@grad3[ (i+1+@perm[j+1]) % 12 ], x-1, y-1 )\r\n\r\n    tx = _fade(x);\r\n    return Util.lerp( Util.lerp(n00, n10, tx), Util.lerp(n01, n11, tx), _fade(y) )\r\n\r\n\r\n  # ## Get a 2d simplex noise value. Increase the x and y parameters by a small amount (eg, 0.01) at each step to get a smooth noise.\r\n  # @param `x, y` optional x and y dimension, or leave empty to use this vector's x and y position\r\n  # @eg `noise.simplex2d()`, `noise.simplex2d(10.001, 0.1)`\r\n  # @return a value between -1 to 1\r\n  simplex2d: (xin=@x, yin=@y) ->\r\n\r\n    # Skew the input space to determine which simplex cell we're in\r\n    F2 = 0.5*(Math.sqrt(3.0)-1.0)\r\n    s = (xin+yin)*F2 # Hairy factor for 2D\r\n    i = Math.floor(xin+s)\r\n    j = Math.floor(yin+s)\r\n    G2 = (3.0-Math.sqrt(3.0))/6.0\r\n    t = (i+j)*G2\r\n\r\n    # Unskew the cell origin back to (x,y) space\r\n    X0 = i-t\r\n    Y0 = j-t\r\n\r\n    # The x,y distances from the cell origin\r\n    x0 = xin-X0\r\n    y0 = yin-Y0\r\n\r\n    # For the 2D case, the simplex shape is an equilateral triangle.\r\n    # Determine which simplex we are in.\r\n    # Offsets for second (middle) corner of simplex in (i,j) coords\r\n    if x0 > y0\r\n      # lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n      i1=1\r\n      j1=0\r\n    else\r\n      # upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n      i1=0\r\n      j1=1\r\n\r\n    # A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n    # a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n    # c = (3-Math.sqrt(3))/6\r\n\r\n    x1 = x0 - i1 + G2 # Offsets for middle corner in (x,y) unskewed coords\r\n    y1 = y0 - j1 + G2\r\n    x2 = x0 - 1.0 + 2.0 * G2 # Offsets for last corner in (x,y) unskewed coords\r\n    y2 = y0 - 1.0 + 2.0 * G2\r\n\r\n    # Work out the hashed gradient indices of the three simplex corners\r\n    ii = i & 255\r\n    jj = j & 255\r\n    gi0 = @perm[ii+@perm[jj]] % 12\r\n    gi1 = @perm[ii+i1+@perm[jj+j1]] % 12\r\n    gi2 = @perm[ii+1+@perm[jj+1]] % 12\r\n\r\n    # Calculate the contribution from the three corners\r\n    t0 = 0.5 - x0*x0-y0*y0\r\n    if t0 < 0\r\n      n0 = 0.0\r\n    else\r\n      t0 *= t0\r\n      n0 = t0 * t0 * @_dot(@grad3[gi0], x0, y0)  # (x,y) of grad3 used for 2D gradient\r\n\r\n    t1 = 0.5 - x1*x1-y1*y1\r\n    if t1 < 0\r\n      n1 = 0.0\r\n    else\r\n      t1 *= t1\r\n      n1 = t1 * t1 * @_dot(@grad3[gi1], x1, y1)\r\n\r\n    t2 = 0.5 - x2*x2-y2*y2\r\n    if t2 < 0\r\n      n2 = 0.0\r\n    else\r\n      t2 *= t2\r\n      n2 = t2 * t2 * @_dot(@grad3[gi2], x2, y2)\r\n\r\n    # Add contributions from each corner to get the final noise value.\r\n    # The result is scaled to return values in the interval [-1,1].\r\n    return 70.0 * (n0 + n1 + n2)\r\n\r\n"]}