{"version":3,"sources":["ParticleSystem.coffee"],"names":[],"mappings":"AACA,IAAA;;AAAM;EAGU,wBAAA;IAGZ,IAAC,CAAA,KAAD,GAAS;IACT,IAAC,CAAA,SAAD,GAAa;IAGb,IAAC,CAAA,IAAD,GAAQ;EAPI;;2BAed,GAAA,GAAM,SAAE,QAAF;IACJ,QAAQ,CAAC,EAAT,GAAc,IAAC,CAAA,KAAD;IACd,IAAC,CAAA,SAAS,CAAC,IAAX,CAAiB,QAAjB;AACA,WAAO;EAHH;;2BASN,MAAA,GAAQ,SAAC,QAAD;IACN,IAAG,QAAA,IAAa,QAAQ,CAAC,IAAzB;MAAmC,QAAQ,CAAC,IAAI,CAAC,QAAd,GAAyB,KAA5D;;AACA,WAAO;EAFD;;2BAOR,OAAA,GAAU,SAAE,IAAF,EAAQ,KAAR,EAAe,GAAf;AACR,QAAA;IAAA,IAAC,CAAA,IAAD;IAEA,OAAA,GAAU;AAEV;AAAA,SAAA,6CAAA;;MAGE,IAAG,CAAC,CAAC,IAAI,CAAC,QAAV;QACE,OAAO,CAAC,IAAR,CAAc,CAAd,EADF;OAAA,MAIK,IAAG,CAAC,CAAC,IAAI,CAAC,MAAV;QACH,CAAC,CAAC,OAAF,CAAW,IAAX,EAAiB,KAAjB,EAAwB,GAAxB,EADG;;AAPP;IAWA,IAAG,OAAO,CAAC,MAAR,GAAiB,CAApB;AACE;WAAA,2CAAA;;qBACE,IAAC,CAAA,SAAS,CAAC,MAAX,CAAkB,KAAlB,EAAyB,CAAzB;AADF;qBADF;;EAhBQ;;;;;;AAuBZ,IAAI,CAAC,cAAL,GAAsB","file":"ParticleSystem.js","sourceRoot":"/source/","sourcesContent":["# ### A particle system keeps track of particles, and regulate them with rules specific to a system. It can also hold constant values from gravitational to cosmic, and specify whether a god may play dice here.\r\nclass ParticleSystem\r\n\r\n  # ## Create a ParticleSystem to track a set of particles\r\n  constructor : () ->\r\n\r\n    # ## a property to store particles in this system as an Array\r\n    @count = 0\r\n    @particles = []\r\n\r\n    # ## a property to track time in milliseconds\r\n    @time = 0\r\n\r\n    # @animateID = -1\r\n\r\n\r\n  # ## add a particle to the system\r\n  # @param `particle` a Particle\r\n  # @return this system\r\n  add : ( particle ) ->\r\n    particle.id = @count++\r\n    @particles.push( particle )\r\n    return @\r\n\r\n\r\n  # ## remove a particle which has a `particle.life` property. This marks the `particle.life.complete` as `true` for removal in next cycle.\r\n  # @param `particle` a Particle\r\n  # @return this system\r\n  remove: (particle) ->\r\n    if particle and particle.life then particle.life.complete = true\r\n    return @\r\n\r\n\r\n  # ## animate callback function which is called by` Space.play()`. Override this callback function to specify other animation loops\r\n  # @param `time, frame, ctx` parameters for current time, fps, and rendering context, which will be passed by `Space` in callback\r\n  animate : ( time, frame, ctx ) ->\r\n    @time++\r\n\r\n    _remove = []; # to be removed\r\n\r\n    for p, i in @particles\r\n\r\n      # if life is complete, mark for removal\r\n      if p.life.complete\r\n        _remove.push( i )\r\n\r\n      # if active, animate it\r\n      else if p.life.active\r\n        p.animate( time, frame, ctx )\r\n\r\n    # remove completed particles\r\n    if _remove.length > 0\r\n      for index in _remove\r\n        @particles.splice(index, 1)\r\n\r\n\r\n\r\n# namespace\r\nthis.ParticleSystem = ParticleSystem\r\n\r\n"]}