{"version":3,"sources":["Line.coffee"],"names":[],"mappings":"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","file":"Line.js","sourceRoot":"/source/","sourcesContent":["# ### There is a shortest path that connects a pair of points. Trace that unique path, with pencil or thread or mind, and you will make a straight line. A line embodies the simplest movement or change. It is a point set in motion, moving to meet another point and leaving a trail behind.\r\nclass Line extends Pair\r\n\r\n  # ## Create a new Line. A Line is a Pair defined by two vectors. It can be treated as an infinite line, or as a line segment with two end points.\r\n  # @param `args` Similar to Pair constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to `to()`, you can also pass 4 or 6 values to set both anchor and `p1` points directly as a 2d or 3d vector.\r\n  # @eg `new Line()` `new Line(1,2,3)` `new Line([2,4])` `new Line({x:3, y:6, z:9}).to(1,2,3)`\r\n  # @return a new Pair object\r\n  constructor: () ->\r\n    super\r\n\r\n\r\n  # ## a static function `Line.slope` to find the slope between two points\r\n  # @param `a` a Point\r\n  # @param `b` another Point\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `Line.slope(pt1, pt2)`, `Line.slope(pt1, pt2, Const.yz)`\r\n  # @return slope value, or false if it divides by 0 (a vertical line)\r\n  @slope: ( a, b, axis=Const.xy ) ->\r\n    p1 = a.get2D( axis )\r\n    p2 = b.get2D( axis )\r\n    return if (p2.x - p1.x is 0) then false else (p2.y - p1.y) / (p2.x - p1.x)\r\n\r\n\r\n  # ## a static function `Line.intercept` to get x and y intercept\r\n  # @param `a` a Point\r\n  # @param `b` another Point\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `Line.intercept(pt1, pt2)`, `Line.intercept(pt1, pt2, Const.yz)`\r\n  # return: an Object with {xi, yi, slope} properties, or false if it divides by 0 (a vertical line)\r\n  @intercept: ( a, b, axis=Const.xy ) ->\r\n    p1 = a.get2D( axis )\r\n    p2 = b.get2D( axis )\r\n    if p2.x - p1.x is 0\r\n      return false\r\n    else\r\n      # y = mx + c\r\n      m = ((p2.y - p1.y) / (p2.x - p1.x)) # slope\r\n      c = p1.y - m * p1.x\r\n      return { slope: m, yi: c, xi: if m==0 then false else -c/m } #[ -c/m, c, m ]\r\n\r\n\r\n  # ##  a static function `Line.isPerpendicularLine` to check if two lines are perpendicular to each other\r\n  # @param `line1` a Line\r\n  # @param `line2` another Line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `Line.isPerpendicularLine(ln1, ln2)`, `Line.isPerpendicularLine(ln1, ln2, Const.yz)`\r\n  # return a boolean value where `true` means the two lines are perpendicular\r\n  @isPerpendicularLine: (line1, line2, axis=Const.xy) ->\r\n    s1 = Line.slope( line1, line1.p1, axis )\r\n    s2 = Line.slope( line2, line2.p1, axis )\r\n    if s1 is false\r\n      return (s2 is 0)\r\n    else if s2 is false\r\n      return (s1 is 0)\r\n    else\r\n      return (s1*s2 is -1)\r\n\r\n\r\n  # ## Get slope of this line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return slope value, or false if it divides by 0 (a vertical line)\r\n  slope: ( axis=Const.xy ) -> Line.slope( @, @p1, axis )\r\n\r\n\r\n  # ## Get intercepts and slop of this line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # return: an Object with {xi, yi, slope} properties, or false if it divides by 0 (a vertical line)\r\n  intercept: ( axis=Const.xy ) -> Line.intercept( @, @p1, axis )\r\n\r\n\r\n  # ## Given an interpolated point on this line, return another line of specific length that is perpendicular to this line.\r\n  # @param `t` a value between 0 to 1 to interpolate a point on this line\r\n  # @param `len` an optional value to specify a length for the new line. Defaults to 10.\r\n  # @param `reverse` a boolean value to reverse the direction of the new line if set to `true`\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @eg `ln.getPerpendicular(0.5)`, `ln.getPerpendicular(0.2, 100, true, Const.yz)`\r\n  # @demo line.getPerpendicular\r\n  # @return a new Line that's perpendicular to this line\r\n  getPerpendicular: ( t, len=10, reverse=false, axis=Const.xy ) ->\r\n    pn = @direction().normalize().perpendicular( axis ) # get normal vector\r\n    pp = if reverse then pn[1] else pn[0] # from which side of the dividing line\r\n    line = new Line( @interpolate( t ) ) # the start-point in the new line\r\n    line.to( pp.multiply(len).add( line ) ) # connect the end point\r\n    return line\r\n\r\n  # ## Find the shortest distance from a point to this line (as infinite line, not line segment)\r\n  # @param `pt` a Point\r\n  # return the distance, which can be positive or negative value depending on the point's position.\r\n  getDistanceFromPoint: ( pt ) ->\r\n    path = @$subtract( @p1 )\r\n    normal = new Vector( -path.y, path.x ).normalize()\r\n    return @$subtract( pt ).dot( normal )\r\n\r\n\r\n  # ## Find the perpendicular vector from this line to the point. You can connect the resulting vector with the point's position to draw a perpendicular line\r\n  # @param `pt` a Point\r\n  # @param `fromProjection` a boolean value defaults to true. If true, the resulting vector is based on this line's position. Otherwise the vector starts from origin (0,0).\r\n  # @demo line.getPerpendicularFromPoint\r\n  # @return a perpendicular Vector\r\n  getPerpendicularFromPoint: ( pt, fromProjection=true ) ->\r\n    proj = @p1.$subtract(@).projection( pt.$subtract(@) )\r\n    return if !fromProjection then proj else proj.add(@)\r\n\r\n\r\n  # ## Get intersection point of this line and another line (as infinite lines, not line segements)\r\n  # @param `line` another Line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an intersection point as Vector, or `false` if no intersection, or `null` if two lines are identical\r\n  intersectPath: ( line, axis=Const.xy ) ->\r\n\r\n    a = @intercept( axis )\r\n    b = line.intercept( axis )\r\n\r\n    p = @get2D( axis )\r\n    ln = line.get2D( axis )\r\n\r\n    if a == false\r\n      if b == false then return false # no solution\r\n      # one of them is vertical line, while the other is not, so they will intersect\r\n      y1 = -b.slope *  (ln.x - p.x) + ln.y # -slope * p.x + p.y\r\n      return if axis == Const.xy then new Vector( p.x, y1 ) else new Vector( p.x, y1 ).get2D( axis, true )\r\n\r\n    else\r\n      # diff slope, or b slope is vertical line\r\n      if b == false\r\n        y1 = -a.slope *  (p.x - ln.x) + p.y # -slope * p.x + p.y\r\n        return new Vector( ln.x, y1 )\r\n\r\n      else if b.slope != a.slope\r\n        px = (a.slope * p.x - b.slope * ln.x + ln.y - p.y) / (a.slope - b.slope)\r\n        py = a.slope * ( px - p.x ) + p.y\r\n        if axis == Const.xy\r\n          return new Vector( px, py )\r\n        else\r\n          return new Vector( px, py ).get2D( axis, true ) # flip back to intended axis\r\n\r\n      else\r\n        if a.yi == b.yi # exactly along the same path\r\n          return null\r\n        else\r\n          return false\r\n\r\n\r\n  # ## Get intersection point of this line segement and another line segement (not infintie lines)\r\n  # @param `line` another Line\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @demo line.intersectLine\r\n  # @return an intersection point as Vector, or `false` if no intersection, or `null` if two lines are identical\r\n  intersectLine: (line, axis=Const.xy) ->\r\n    # get point from intersectPath()\r\n    pt = @intersectPath( line, axis )\r\n\r\n    # check line segment intersection\r\n    if pt and @withinBounds( pt, axis ) and line.withinBounds( pt, axis )\r\n      return pt\r\n    else\r\n      return if pt == null then null else false\r\n\r\n\r\n  # ## A static function `Line.intersectLines` if an element intersects with a list of lines ( useful for polygon or polyline such as `rectangle.sides()` ) on xy axis.\r\n  # @param `lines` an array of Line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @eg `Line.intersectLines( rect, triangle.sides() )` `Line.intersectLines( line, pointset.sides(), true )`\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  @intersectLines: (elem, lines, get_pts=true) ->\r\n    if !elem.intersectLine\r\n      throw \"No intersectLine function found in \"+ elem.toString()\r\n\r\n    pts = []\r\n    # check each line\r\n    for i, ln of lines\r\n      ins = elem.intersectLine(ln, get_pts)\r\n\r\n      # store intersection points\r\n      if ins\r\n        if !get_pts then return true\r\n        if ins.length > 0\r\n          for p in ins\r\n            pts.push( p )\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Get intersection point of between two \"grid\" lines. Grid lines are parallel to an axis, such as a horizontal or vertical line on xy plane.\r\n  # @param `line` another Line which is parallen to an axis\r\n  # @param `path_only` a boolean value to specify whether to check for whole path (`true`) or line segment (`false`). Defaults to `false`.\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an intersection point as Vector, or `false` if no intersection\r\n  intersectGridLine: (line, path_only=false, axis=Const.xy ) ->\r\n    a1 = @get2D( axis )\r\n    a2 = @p1.get2D( axis )\r\n\r\n    b1 = line.get2D( axis )\r\n    b2 = line.p1.get2D( axis )\r\n\r\n    if a2.x - a1.x == 0\r\n      if b2.y - b1.y == 0 and Util.within( a1.x, b1.x, b2.x )\r\n        if path_only or Util.within( b1.y, a1.y, a2.y )\r\n          return new Vector( a1.x, b1.y )\r\n\r\n    else if a2.y - a1.y == 0\r\n      if b2.x - b1.x == 0 and Util.within( a1.y, b1.y, b2.y )\r\n        if path_only or Util.within( b1.x, a1.x, a2.x )\r\n          return new Vector( b1.x, a1.y )\r\n\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Get a list of evenly distributed points on this line\r\n  # @param `num` the number of points to get\r\n  # @return an Array of Points\r\n  subpoints: (num) -> (@interpolate t/num for t in [0..num] )\r\n\r\n\r\n  # ## override clone\r\n  clone: (deep) ->\r\n    return new Line(@).to(@p1)\r\n\r\n\r\n# namespace\r\nthis.Line = Line\r\n\r\n\r\n\r\n# Old code -- Use Matrix transform functions instead\r\n\r\n# Rotate this line from a hinged point along the line\r\n# param: t is between 0 to 1, radian is the rotation\r\n# see also Matrix.rotateAnchor2D\r\n#  rotate: (t, radian, axis=Const.xy) ->\r\n#    # get anchor point\r\n#    anchor = @interpolate( t )\r\n#    # get init angle\r\n#    ang = anchor.angle( axis, @ ) + radian\r\n#\r\n#    # find rotated line's points\r\n#    pa = new Vector( Math.cos( ang ), Math.sin( ang ) )\r\n#\r\n#    if axis is Const.yz\r\n#      pb = new Vector( 0, -pa.y, -pa.z )\r\n#    else if axis is Const.xz\r\n#      pb = new Vector( -pa.x, 0, -pa.z )\r\n#    else\r\n#      pb = new Vector( -pa.x, -pa.y, 0 )\r\n#\r\n#    pa.multiply( anchor.$subtract( @ ).magnitude() )\r\n#    pa.add( anchor )\r\n#\r\n#    pb.multiply( @p1.$subtract( anchor ).magnitude() )\r\n#    pb.add( anchor )\r\n#\r\n#    # set the points to new position\r\n#    @set( pa )\r\n#    @p1.set( pb )\r\n#\r\n#    return @\r\n\r\n\r\n# Reflect a point to the other side of this line\r\n# see also Vector.reflect2D and Matrix.reflectAnchor2D\r\n#  reflect: (point, axis=Const.xy) ->\r\n#    ln = @intercept( axis )\r\n#    p = point.get2D( axis )\r\n#    d = ( p.x + (p.y-ln.yi) * ln.slope ) / (1+ ln.slope*ln.slope)\r\n#    ref = {\r\n#      x: 2*d - p.x,\r\n#      y: 2*d*ln.slope - p.y + 2*ln.yi\r\n#    }\r\n#\r\n#    if axis == Const.xz\r\n#      return new Vector( ref.x, point.y, ref.y )\r\n#    else if axis == Const.yz\r\n#      return new Vector( point.x, ref.x, ref.y )\r\n#    else\r\n#      return new Vector( ref.x, ref.y, point.z )"]}