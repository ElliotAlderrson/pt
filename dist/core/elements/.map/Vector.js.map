{"version":3,"sources":["Vector.coffee"],"names":[],"mappings":"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","file":"Vector.js","sourceRoot":"/source/","sourcesContent":["# ### Vector element\r\nclass Vector extends Point\r\n\r\n  # ## Create a new Vector. A Vector extends a Point and includes functions for arithmetics.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or a Point object as parameters.\r\n  # @eg `new Vector()` `new Vector(1,2,3)` `new Vector([2,4])` `new Vector({x:3, y:6, z:9})`\r\n  # @return a new Vector object\r\n  constructor: () ->\r\n    super\r\n\r\n  # private function to get arguments based on argument types\r\n  _getArgs: (args) -> return if typeof args[0] is 'number' and args.length > 1 then args else args[0]\r\n\r\n  # ## Add another vector to this vector.\r\n  # @param `args` comma-separated values, or as an array, or a Point object.\r\n  # @eg `vec.add(1,2)` `vec.add([2,4])` `vec.add({x:3, y:6, z:9})`\r\n  # @return this Vector\r\n  add: (args) ->\r\n    # add scalar\r\n    if typeof arguments[0] is 'number' and arguments.length is 1\r\n      @x += arguments[0]\r\n      @y += arguments[0]\r\n      @z += arguments[0]\r\n      # add point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x += _p.x\r\n      @y += _p.y\r\n      @z += _p.z\r\n\r\n    return @\r\n\r\n\r\n  # ## Same as `add()` but returns a new Vector. The values of this vector are not changed.\r\n  $add: (args) ->\r\n    a = @_getArgs( arguments )\r\n    new Vector( @ ).add( a )\r\n\r\n\r\n  # ## Subtract another vector from this vector.\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `vec.subtract(1,2)` `vec.subtract([2,4])` `vec.subtract({x:3, y:6, z:9})`\r\n  # @return this Vector\r\n  subtract: (args) ->\r\n    # subtract scalar\r\n    if typeof arguments[0] is 'number' and arguments.length is 1\r\n      @x -= arguments[0]\r\n      @y -= arguments[0]\r\n      @z -= arguments[0]\r\n      # subtract point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x -= _p.x\r\n      @y -= _p.y\r\n      @z -= _p.z\r\n\r\n    return @\r\n\r\n  # ## Same as `subtract()` but returns a new Vector. The values of this vector are not changed.\r\n  $subtract: (args) ->\r\n    a = @_getArgs( arguments )\r\n    return new Vector( @ ).subtract( a )\r\n\r\n\r\n  # ## Multiple this vector with a scalar or vector. If there's only one numberic value in the parameter, this vector will be multiplied by that scalar value. Otherwise, this vector's x,y,z values will be multiplied by the corresponding x,y,z in the parameters. Note that this is different to .dot and .cross products.\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `vec.multiply(4)` `vec.multiply(1,2,3)` `vec.multiply([2,4])` `vec.multiply({x:3, y:6, z:9})`\r\n  # @return this Vector\r\n  multiply: (args) ->\r\n    # multiply scalar\r\n    if arguments.length is 1 and (typeof arguments[0] is 'number' or (typeof arguments[0] is 'object' and arguments[0].length == 1) )\r\n      @x *= arguments[0]\r\n      @y *= arguments[0]\r\n      @z *= arguments[0]\r\n      # multiply point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x *= _p.x\r\n      @y *= _p.y\r\n      @z *= _p.z\r\n\r\n    return @\r\n\r\n  # ## Same as `multiply()` but returns a new Vector. The values of this vector is not changed.\r\n  $multiply: (args) ->\r\n    a = arg = @_getArgs( arguments )\r\n    return new Vector( @ ).multiply( a )\r\n\r\n\r\n  # ## Similar as `multiply()` but easier to read semantically.\r\n  # @eg `vec.divide(2,4,5)` is the same as `vec.multiply(0.5, 0.25, 0.2)`\r\n  # @return this Vector\r\n  divide: (args) ->\r\n    # divide scalar\r\n    if arguments.length is 1 and (typeof arguments[0] is 'number' or (typeof arguments[0] is 'object' and arguments[0].length == 1) )\r\n      @x /= arguments[0]\r\n      @y /= arguments[0]\r\n      @z /= arguments[0]\r\n      # divide point\r\n    else\r\n      _p = Point.get(arguments)\r\n      @x /= _p.x\r\n      @y /= _p.y\r\n      @z /= _p.z\r\n\r\n    return @\r\n\r\n  # ## Same as `divide()` but returns a new Vector. The values of this vector is not changed.\r\n  $divide: (args) ->\r\n    a = @_getArgs( arguments )\r\n    return new Vector( @ ).divide( a )\r\n\r\n\r\n  # ## Apply a function to all points in the `toArray()` list. This is usually applied to `Pair`, `PointSet` and other objects to apply a function to all its points.\r\n  # @param `name` a function of this class\r\n  # @param `args...` optional, comma-separated arguments to pass to the function\r\n  # @eg `pair.op(\"add\", 1,2,3)`, `pointset.op(\"multiply\", 2)`\r\n  op: ( name, args... ) ->\r\n    pts = @toArray()\r\n    for p in pts\r\n      p[name]( args )\r\n    return @\r\n\r\n\r\n  # ## Similar to `op()` but apply the function to a new instance.\r\n  $op: ( name, args... ) ->\r\n    instance = @clone()\r\n    pts = instance.toArray()\r\n    for p in pts\r\n      p[name]( args )\r\n    return instance\r\n\r\n\r\n\r\n  # ## Get the angle of this vector on a plane. Or get the angle from this vector to another point. If no parameter specified, this will return the angle on xy plane.\r\n  # @param `axis` single argument as optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @param `pt` single argument as optional Point object to calculate the angle from this Point to another Point instead\r\n  # @param `axis, pt` 2 arguments in this sequence, as optional axis id and Point object to get the angle to a Point on a specific plane\r\n  # @eg `vec.angle()` `vec.angle(Const.yz)` `vec.angle(another_pt)` `vec.angle(Const.xz, another_pt)` `new Vector(1,1).angle( new Vector(1,2) ) * Const.rad_to_deg = 90`\r\n  # @return a radian value\r\n  angle: (args) ->\r\n\r\n    # no argument angle from origin\r\n    if arguments.length is 0\r\n      return Math.atan2( @y, @x )\r\n\r\n    # if first argument is axis\r\n    if typeof arguments[0] is 'string'\r\n      axis = arguments[0]\r\n      p = if arguments.length > 1 then @$subtract( arguments[1] ).multiply(-1) else undefined\r\n\r\n    # first argument is object or none\r\n    else\r\n      p = @$subtract( arguments[0]).multiply(-1)\r\n      axis = false\r\n\r\n    # if has point and no axis, find xy to another point\r\n    if p and !axis\r\n      return Math.atan2( p.y, p.x )\r\n\r\n      # has axis parameter\r\n    else if axis is Const.xy\r\n      return if p then Math.atan2( p.y, p.x ) else (Math.atan2( @y, @x ))\r\n\r\n    else if axis is Const.yz\r\n      return if p then Math.atan2( p.z, p.y ) else (Math.atan2( @z, @y ))\r\n\r\n    else if axis is Const.xz\r\n      return if p then Math.atan2( p.z, p.x ) else (Math.atan2( @z, @x ))\r\n\r\n\r\n  # ## Get the change in radian between this and another vector (at origin position)\r\n  # @param `vec` another Vector to compare against\r\n  # @param axis optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.angleBetween( another_pt )` `vec.angleBetween( another_pt, Const.yz )`\r\n  angleBetween: (vec, axis=Const.xy) ->\r\n    Util.boundRadian( @angle( axis ), true ) - Util.boundRadian( vec.angle( axis ), true )\r\n\r\n\r\n  # ## Get the mangnitude (ie, distance from origin) of this vector. Or get the distance from this vector to another point. Default is to get the magnitude on xyz plane.\r\n  # @param `axis` single argument as optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @param `pt` single argument as optional Point object to calculate the distance from this Point to another Point instead\r\n  # @param `sqrt` single argument as optional boolean value to get distance-squared value if set to `false`. Default is true.\r\n  # @param `axis, pt, sqrt` 3 optional parameters can be used in this sequence to specify a plane, a Point, and whether to get squared value.\r\n  # @eg `vec.magnitude()` `vec.magnitude(false)` `vec.magnitude(Const.yz)` `vec.magnitude(another_pt)` `vec.magnitude(Const.xz, another_pt, false)`.\r\n  # @return magnitude value\r\n  magnitude: (args) ->\r\n\r\n    m = {x:@x*@x, y:@y*@y, z:@z*@z }\r\n\r\n    # if last argument is false, then don't use Math.sqrt\r\n    useSq = (arguments.length >= 1 and !arguments[ arguments.length-1 ])\r\n    _sq = if useSq then ( (x) -> x ) else Math.sqrt\r\n\r\n    # no argument angle from origin\r\n    if arguments.length is 0\r\n      return _sq( m.x + m.y + m.z )\r\n\r\n    # if first argument is axis\r\n    if typeof arguments[0] is 'string'\r\n      axis = arguments[0]\r\n      if arguments.length > 1 and arguments[1]\r\n        p = @$subtract( arguments[1] )\r\n      else\r\n        p = undefined\r\n\r\n      # first argument is object or none\r\n    else\r\n      p = @$subtract( arguments[0] )\r\n      axis = false\r\n\r\n    mag = if p then {x:p.x*p.x, y:p.y*p.y, z:p.z*p.z} else m\r\n\r\n    # if has point and no axis, find xyz to another point\r\n    if p and !axis\r\n      return _sq( mag.x + mag.y + mag.z )\r\n\r\n    # has axis parameter\r\n    else if axis is Const.xy\r\n      return _sq( mag.x + mag.y )\r\n\r\n    else if axis is Const.yz\r\n      return _sq( mag.y + mag.z )\r\n\r\n    else if axis is Const.xz\r\n        return _sq( mag.x + mag.z )\r\n\r\n\r\n  # ## Get the distance between this and another point. An alias of magnitude.\r\n  # @param `pt` another point\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return distance\r\n  distance: (pt, axis=Const.xy) -> @magnitude( axis, pt )\r\n\r\n  # ## Normalize this vector to a unit vector, which has magnitude of 1.\r\n  # @return this vector\r\n  normalize: () ->\r\n    @set( @$normalize() )\r\n    return @\r\n\r\n\r\n  # ## Get a normalized unit vector which has magnitude of 1. The original vector is not changed.\r\n  # @return a new unit vector\r\n  $normalize: () ->\r\n    m = @magnitude()\r\n\r\n    if m is 0\r\n      return new Vector()\r\n    else\r\n      return new Vector( @x/m, @y/m, @z/m )\r\n\r\n  # ## Set this vector's values to its absolute value (always positive).\r\n  # @return this vector\r\n  abs: () ->\r\n    @x = Math.abs(@x)\r\n    @y = Math.abs(@y)\r\n    @z = Math.abs(@z)\r\n    return @\r\n\r\n\r\n  # ## Calculate the [dot product](http://en.wikipedia.org/wiki/Dot_product) of this and another vector.\r\n  # @param `p` a Point to calculate the dot product\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.dot( another_vec )`, `vec.dot( another_vec, Const.xz )`\r\n  # @return the dot product which is a scalar (numeric) value\r\n  dot: ( p, axis=Const.xyz ) ->\r\n    if axis == Const.xyz\r\n      return @x*p.x + @y*p.y + @z*p.z\r\n    else if axis == Const.xy\r\n      return @x*p.x + @y*p.y\r\n    else if axis == Const.yz\r\n      return @y*p.y + @z*p.z\r\n    else if axis == Const.xz\r\n      return @x*p.x + @z*p.z\r\n    else\r\n      return @x*p.x + @y*p.y + @z*p.z\r\n\r\n  # ## Calculate [vector projection](http://en.wikipedia.org/wiki/Vector_projection). A vector projection that has the same direction as this vector but a different length. So if you draw a line from the projection vector to the vector specified in the parameter, it will be perpendicular to this vector.\r\n  # @param `vec` a Vector to calculate the projection\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.projection( another_vec)`, , `vec.projection( another_vec, Const.xz )`\r\n  # @return the vector projection\r\n  projection: ( vec, axis=Const.xyz ) ->\r\n    m = vec.magnitude()\r\n    a = @$normalize()\r\n    b = new Vector( vec.x/m, vec.y/m, vec.z/m )\r\n    dot = a.dot( b, axis )\r\n    return a.$multiply( m * dot )\r\n\r\n  # ## Calculate the [cross product](http://en.wikipedia.org/wiki/Cross_product) of this and another vector.\r\n  # @param `p` a Point to calculate the cross product\r\n  # @eg `vec.cross( another_vec )`\r\n  # @return the cross product which is a vector\r\n  cross: ( p ) ->\r\n    new Vector( (@y*p.z - @z*p.y), (@z*p.x - @x*p.z), (@x*p.y - @y*p.x) )\r\n\r\n\r\n  # ## Get the middle vector between this and another vector\r\n  # @param `vec` a Vector to calculate the bisect\r\n  # @eg `vec.bisect( another_vec )`\r\n  # @return a vector in the middle\r\n  bisect: ( vec, isNormalized=false ) ->\r\n    if isNormalized\r\n      return @$add(vec).divide(2)\r\n    else\r\n      return @$normalize().add( vec.$normalize() ).divide(2)\r\n\r\n\r\n  # ## Get 2 vectors that are perpendicular to this vector\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.perpendicular()` `vec.perpendicular(Const.yz)`\r\n  # @return an array of two vectors\r\n  perpendicular: ( axis=Const.xy ) ->\r\n      switch axis\r\n        when Const.xy then return [new Vector( -@y, @x, @z ), new Vector( @y, -@x, @z )]\r\n        when Const.yz then return [new Vector( @x, -@z, @y ), new Vector( @x, @z, -@y )]\r\n        when Const.xz then return [new Vector( -@z, @y, @x ), new Vector( @z, -@y, @x )]\r\n        else return [new Vector( -@y, @x, @z ), new Vector( @y, -@x, @z )]\r\n\r\n  # ## Check if another vector is perpendicular to this\r\n  # @param `p` a Point to check against\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.isPerpendicular( another_vec )` `vec.isPerpendicular( another_vec, Const.yz )`\r\n  # @return a boolean (true or false)\r\n  isPerpendicular: ( p, axis=Const.xyz ) -> @dot(p, axis) == 0\r\n\r\n  # ## Get surface normal vector. A [normal](http://en.wikipedia.org/wiki/Normal_%28geometry%29) is a vector perpendicular to a plane or object.\r\n  # @param `p` a Point to calculate the surface normal\r\n  # @eg `vec.surfaceNormal( another_vec )`\r\n  # @return the normal vector\r\n  surfaceNormal: ( p ) ->\r\n    return @cross( p ).normalize(true)\r\n\r\n\r\n  # ## move origin to a new position. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will move all the points.\r\n  # @param `args` new position as 0-3 comma-separated values, or as an array, or a Point object.\r\n  moveTo: ( args ) ->\r\n    target = Point.get(arguments)\r\n    d = @$subtract( target )\r\n    pts = @toArray()\r\n    for p in pts\r\n      p.subtract( d )\r\n\r\n    return @\r\n\r\n  # ## move origin by a certain amount. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will move all the points.\r\n  # @param `args` move amount as 0-3 comma-separated values, or as an array, or a Point object.\r\n  moveBy: ( args ) ->\r\n    inc = Point.get(arguments)\r\n    pts = @toArray()\r\n    for p in pts\r\n      p.add( inc )\r\n\r\n    return @\r\n\r\n\r\n  # ## Rotate this vector around an anchor point on a 2D plane. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will rotate all the points.\r\n  # @param `radian` a radian value specifying the angle. (where 1 degree = PI / 180 radian)\r\n  # @param `anchor` a Point object specifying the anchor position\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.rotate2D( Math.PI/2, anchor_pt )` `vec.rotate2D( 30*Const.deg_to_rad, another_pt, Const.xz )`\r\n  # @return this vector\r\n  rotate2D: (radian, anchor, axis=Const.xy) ->\r\n    if !anchor then anchor = new Point(0,0,0)\r\n    mx = Matrix.rotateAnchor2D( radian, anchor, axis )\r\n\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n\r\n  # ## Reflect this vector along a path. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will reflect all the points.\r\n  # @param `line` a Line object to specify the path\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.reflect2D( line )` `vec.reflect2D( line, Const.xz )`\r\n  # @return this vector\r\n  reflect2D: (line, axis=Const.xy) ->\r\n    mx = Matrix.reflectAnchor2D( line, axis )\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n\r\n  # ## Rescale this vector from an anchor point. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will scale all the points together.\r\n  # @param `sx` x scale value, where 1 = no change\r\n  # @param `sy` y scale value, where 1 = no change\r\n  # @param `anchor` a Point object specifying the anchor position to scale from\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.scale2D( 0.7, 1.2, anchor_pt )` `vec.scale2D( 1, 3, anchor_pt, Const.xz )`\r\n  # @return this vector\r\n  scale2D: (sx, sy, anchor, axis=Const.xy) ->\r\n    if !anchor then anchor = new Point(0,0,0)\r\n    mx = Matrix.scaleAnchor2D( sx, sy, anchor, axis )\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n\r\n  # ## Shear this vector from an anchor point. In subclasses of `Vector`, such as `Pair` or `PointSet`, this will shear all the points together.\r\n  # @param `sx` x scale value, where 1 = no change\r\n  # @param `sy` y scale value, where 1 = no change\r\n  # @param `anchor` a Point object specifying the anchor position to scale from\r\n  # @param `axis` optional axis id (eg `Const.xy`) to specify a plane\r\n  # @eg `vec.scale2D( 0.7, 1.2, anchor_pt )` `vec.scale2D( 1, 3, anchor_pt, Const.xz )`\r\n  # @return this vector\r\n  shear2D: (sx, sy, anchor, axis=Const.xy) ->\r\n    if !anchor then anchor = new Point(0,0,0)\r\n    mx = Matrix.shearAnchor2D( sx, sy, anchor, axis )\r\n    pts = @toArray()\r\n    for p in pts\r\n      Matrix.transform2D( p, mx, axis )\r\n\r\n    return @\r\n\r\n  # ## Clone this vector\r\n  # @return a new vector identical to this vector\r\n  clone: () -> return new Vector(@)\r\n\r\n\r\n  # ## Describe this point as a text string\r\n  # @return \"Vector x, y, z\" text\r\n  toString: () -> \"Vector #{ @x }, #{ @y }, #{ @z }\"\r\n\r\n\r\n\r\n\r\n# namespace\r\nthis.Vector = Vector\r\n"]}