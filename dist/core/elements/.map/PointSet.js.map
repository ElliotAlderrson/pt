{"version":3,"sources":["PointSet.coffee"],"names":[],"mappings":"AACA,IAAA,QAAA;EAAA;;;AAAM;;;EAMS,kBAAA;IACX,2CAAA,SAAA;IAGA,IAAC,CAAA,MAAD,GAAU;EAJC;;qBASb,QAAA,GAAS,SAAA;AACP,QAAA;IAAA,GAAA,GAAM;AACN;AAAA,SAAA,qCAAA;;MACE,GAAA,IAAU,CAAC,CAAC,CAAH,GAAK,GAAL,GAAQ,CAAC,CAAC,CAAV,GAAY,GAAZ,GAAe,CAAC,CAAC,CAAjB,GAAmB;AAD9B;AAEA,WAAO,GAAA,GAAI;EAJJ;;qBAQT,OAAA,GAAQ,SAAA;WAAM,IAAC,CAAA,MAAM,CAAC,KAAR,CAAA;EAAN;;qBAOR,OAAA,GAAS,SAAE,IAAF;AAEP,QAAA;IAAA,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;MAEE,IAAG,KAAK,CAAC,OAAN,CAAe,SAAU,CAAA,CAAA,CAAzB,CAAA,IAAkC,SAAU,CAAA,CAAA,CAAE,CAAC,MAAb,GAAsB,CAAxD,IAA8D,OAAO,SAAU,CAAA,CAAA,CAAG,CAAA,CAAA,CAApB,KAA0B,QAA3F;AACE;AAAA,aAAA,qCAAA;;UACE,IAAC,CAAA,MAAM,CAAC,IAAR,CAAkB,IAAA,MAAA,CAAO,CAAP,CAAlB;AADF,SADF;OAAA,MAAA;QAKE,IAAC,CAAA,MAAM,CAAC,IAAR,CAAkB,IAAA,MAAA,CAAQ,KAAK,CAAC,GAAN,CAAU,SAAV,CAAR,CAAlB,EALF;OAFF;;AASA,WAAO;EAXA;;qBAkBT,iBAAA,GAAmB,SAAE,IAAF;AAEjB,QAAA;IAAA,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;MACE,IAAG,KAAK,CAAC,OAAN,CAAe,SAAU,CAAA,CAAA,CAAzB,CAAA,IAAkC,SAAU,CAAA,CAAA,CAAE,CAAC,MAAb,GAAsB,CAA3D;AACE;AAAA,aAAA,qCAAA;;UACE,IAAC,CAAA,MAAM,CAAC,IAAR,CAAc,IAAC,CAAA,IAAD,CAAM,CAAN,CAAd;AADF,SADF;OAAA,MAAA;QAKE,IAAC,CAAA,MAAM,CAAC,IAAR,CAAc,IAAC,CAAA,IAAD,CAAO,KAAK,CAAC,GAAN,CAAU,SAAV,CAAP,CAAd,EALF;OADF;;AAQA,WAAO;EAVU;;qBAiBnB,UAAA,GAAY,SAAC,KAAD;;MAAC,QAAM,CAAC;;IAClB,IAAG,KAAA,GAAQ,CAAX;MACE,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,MAAM,CAAC,KAAR,CAAe,CAAf,EAAkB,IAAC,CAAA,MAAM,CAAC,MAAR,GAAe,KAAjC,EADZ;KAAA,MAAA;MAGE,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,MAAM,CAAC,KAAR,CAAe,KAAA,GAAM,CAArB,EAHZ;;AAKA,WAAO;EANG;;qBAWZ,SAAA,GAAW,SAAC,IAAD;AACT,QAAA;IAAA,CAAA,GAAI,IAAC,CAAA,QAAD,CAAW,SAAX;AACJ;AAAA,SAAA,qCAAA;;MACE,CAAC,CAAC,GAAF,CAAO,CAAP;AADF;AAEA,WAAO;EAJE;;qBAQX,UAAA,GAAY,SAAC,IAAD;AACV,QAAA;IAAA,CAAA,GAAI,IAAC,CAAA,QAAD,CAAW,SAAX;AACJ;;AAAQ;AAAA;WAAA,qCAAA;;qBAAA,CAAC,CAAC,IAAF,CAAQ,CAAR;AAAA;;;EAFE;;qBAwDZ,KAAA,GAAO,SAAE,UAAF;AACL,QAAA;;MADO,aAAW;;IAClB,KAAA,GAAQ;IACR,KAAA,GAAQ;AACR;AAAA,SAAA,qCAAA;;MACE,IAAG,KAAH;QAAc,KAAK,CAAC,IAAN,CAAgB,IAAA,IAAA,CAAK,KAAL,CAAW,CAAC,OAAZ,CAAoB,CAApB,CAAhB,EAAd;;MACA,KAAA,GAAQ;AAFV;IAIA,IAAG,UAAH;MACE,KAAK,CAAC,IAAN,CAAgB,IAAA,IAAA,CAAM,KAAN,CAAa,CAAC,OAAd,CAAuB,IAAC,CAAA,MAAO,CAAA,CAAA,CAA/B,CAAhB,EADF;;AAGA,WAAO;EAVF;;qBAeP,MAAA,GAAQ,SAAE,IAAF;AACN,QAAA;;MADQ,OAAK,KAAK,CAAC;;IACnB,MAAA,GAAS;AACT,SAAS,4DAAT;MACE,EAAA,GAAK,IAAC,CAAA,MAAO,CAAA,CAAA,GAAE,CAAF,CAAI,CAAC,SAAb,CAAwB,IAAC,CAAA,MAAO,CAAA,CAAA,CAAhC;MACL,EAAA,GAAK,IAAC,CAAA,MAAO,CAAA,CAAA,GAAE,CAAF,CAAI,CAAC,SAAb,CAAwB,IAAC,CAAA,MAAO,CAAA,CAAA,CAAhC;MACL,MAAM,CAAC,IAAP,CAAa;QAAE,EAAA,EAAI,IAAC,CAAA,MAAO,CAAA,CAAA,GAAE,CAAF,CAAd;QAAoB,EAAA,EAAI,IAAC,CAAA,MAAO,CAAA,CAAA,CAAhC;QAAoC,EAAA,EAAI,IAAC,CAAA,MAAO,CAAA,CAAA,GAAE,CAAF,CAAhD;QAAsD,KAAA,EAAO,EAAE,CAAC,YAAH,CAAiB,EAAjB,CAA7D;OAAb;AAHF;AAKA,WAAO;EAPD;;qBAYR,MAAA,GAAQ,SAAA;WACN,IAAI,CAAC,WAAL,CAAkB,IAAC,CAAA,MAAnB;EADM;;qBAMR,QAAA,GAAU,SAAA;WACR,IAAI,CAAC,QAAL,CAAe,IAAC,CAAA,MAAhB;EADQ;;qBAOV,UAAA,GAAY,SAAE,IAAF;AAEV,QAAA;;MAFY,OAAK;;IAEjB,IAAG,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB,CAApB;AAA2B,aAAO,GAAlC;;IAGA,IAAG,IAAH;MACE,GAAA,GAAM,IAAC,CAAA,MAAM,CAAC,KAAR,CAAA;MACN,GAAG,CAAC,IAAJ,CAAU,SAAC,CAAD,EAAI,CAAJ;AAAU,eAAO,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC;MAAzB,CAAV,EAFF;KAAA,MAAA;MAIE,GAAA,GAAM,IAAC,CAAA,OAJT;;IAOA,IAAA,GAAO,SAAC,CAAD,EAAI,CAAJ,EAAO,EAAP;aACL,CAAC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAT,CAAA,GAAc,CAAC,EAAE,CAAC,CAAH,GAAO,CAAC,CAAC,CAAV,CAAd,GAA6B,CAAC,EAAE,CAAC,CAAH,GAAO,CAAC,CAAC,CAAV,CAAA,GAAe,CAAC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAT,CAA5C,GAA0D;IADrD;IAIP,EAAA,GAAK;IAGL,IAAG,IAAA,CAAM,GAAI,CAAA,CAAA,CAAV,EAAc,GAAI,CAAA,CAAA,CAAlB,EAAsB,GAAI,CAAA,CAAA,CAA1B,CAAH;MACE,EAAE,CAAC,IAAH,CAAS,GAAI,CAAA,CAAA,CAAb;MACA,EAAE,CAAC,IAAH,CAAS,GAAI,CAAA,CAAA,CAAb,EAFF;KAAA,MAAA;MAIE,EAAE,CAAC,IAAH,CAAS,GAAI,CAAA,CAAA,CAAb;MACA,EAAE,CAAC,IAAH,CAAS,GAAI,CAAA,CAAA,CAAb,EALF;;IAOA,EAAE,CAAC,OAAH,CAAY,GAAI,CAAA,CAAA,CAAhB;IACA,EAAE,CAAC,IAAH,CAAS,GAAI,CAAA,CAAA,CAAb;IAGA,CAAA,GAAI;AACJ,WAAM,CAAA,GAAI,GAAG,CAAC,MAAd;MACE,EAAA,GAAK,GAAI,CAAA,CAAA;MAET,IAAG,IAAA,CAAM,EAAN,EAAU,EAAG,CAAA,CAAA,CAAb,EAAiB,EAAG,CAAA,CAAA,CAApB,CAAA,IAA6B,IAAA,CAAK,EAAG,CAAA,EAAE,CAAC,MAAH,GAAU,CAAV,CAAR,EAAsB,EAAG,CAAA,EAAE,CAAC,MAAH,GAAU,CAAV,CAAzB,EAAuC,EAAvC,CAAhC;QACE,CAAA;AACA,iBAFF;;AAIA,aAAM,CAAC,IAAA,CAAK,EAAG,CAAA,EAAE,CAAC,MAAH,GAAU,CAAV,CAAR,EAAsB,EAAG,CAAA,EAAE,CAAC,MAAH,GAAU,CAAV,CAAzB,EAAuC,EAAvC,CAAP;QACE,EAAE,CAAC,GAAH,CAAA;MADF;MAEA,EAAE,CAAC,IAAH,CAAS,EAAT;AAEA,aAAM,CAAC,IAAA,CAAM,EAAG,CAAA,CAAA,CAAT,EAAa,EAAG,CAAA,CAAA,CAAhB,EAAoB,EAApB,CAAP;QACE,EAAE,CAAC,KAAH,CAAA;MADF;MAEA,EAAE,CAAC,OAAH,CAAY,EAAZ;MAEA,CAAA;IAfF;AAkBA,WAAO;EAjDG;;qBAqDZ,KAAA,GAAO,SAAA;WACD,IAAA,QAAA,CAAS,IAAT,CAAW,CAAC,OAAZ,CAAqB,IAAI,CAAC,WAAL,CAAkB,IAAC,CAAA,MAAnB,CAArB;EADC;;;;GAzOc;;AA8OvB,IAAI,CAAC,QAAL,GAAgB","file":"PointSet.js","sourceRoot":"/source/","sourcesContent":["\r\nclass PointSet extends Vector\r\n\r\n  # ## Create a new PointSet. A PointSet is a set of points which can repsent a polygon or a polyline or a time series.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or an object as parameters to specify the anchor point. Use `connect()` to add points to the set.\r\n  # @eg `new PointSet()` `new PointSet(1,2,3)` `new PointSet([2,4])` `new PointSet({x:3, y:6, z:9}).connect(1,2,3)` `new PointSet(1,2,3).connect([p1, p2, p3, p4, p5])`\r\n  # @return a new PointSet object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## The points in this set as an array\r\n    @points = []\r\n\r\n\r\n  # ## Describe this rectangle as a text string\r\n  # @return \"PointSet [p1... p2... p3...]\" text\r\n  toString:() ->\r\n    str = \"PointSet [ \"\r\n    for p in @points\r\n      str += \"#{p.x},#{p.y},#{p.z}, \"\r\n    return str+\" ]\"\r\n\r\n\r\n  # ## Get a copy of the `points` property as an array\r\n  toArray:() -> @points.slice()\r\n\r\n\r\n  # ## Add a point or an array of points to this PointSet\r\n  # @param `args` either an Array of Points, or a single point defined by comma-separated values, an array, or an object.\r\n  # @eg `pset.connect( 1,2,3 )` `pset.connect([1,2,3]` `pset.connect({x:3, y:6, z:9})` `pset.connect([p1, p2, p3, p4...])`\r\n  # @return this PointSet\r\n  connect: ( args ) ->\r\n\r\n    if arguments.length > 0\r\n      # if it's an array of objects.\r\n      if Array.isArray( arguments[0] ) and arguments[0].length > 0 and typeof arguments[0][0] is 'object'\r\n        for p in arguments[0]\r\n          @points.push( new Vector(p) )\r\n\r\n      else\r\n        @points.push( new Vector( Point.get(arguments ) ) )\r\n\r\n    return @\r\n\r\n\r\n  # ## Add a point whose position is calculated relative to this PointSet's anchor point\r\n  # @param `args` 0-3 comma-separated values, or as an array, or a Point object.\r\n  # @eg `pset.connectFromAnchor(1,2)` `pset.connectFromAnchor([2,4])` `pset.connectFromAnchor({x:3, y:6, z:9})`\r\n  # @return this PointSet\r\n  connectFromAnchor: ( args ) ->\r\n\r\n    if arguments.length > 0\r\n      if Array.isArray( arguments[0] ) and arguments[0].length > 0 # if it's Array.\r\n        for p in arguments[0]\r\n          @points.push( @$add(p) )\r\n\r\n      else\r\n        @points.push( @$add( Point.get(arguments ) ) )\r\n\r\n    return @\r\n\r\n\r\n  # ## Remove a point or a series of points from this Points set\r\n  # @param `index` an index which can be positive or negative integer. If index is negative, the points are removed from the end. For example, `-2` will remove the last 2 points.\r\n  # @eg `pset.disconnect(3)`, `pset.disconnect(-2)`\r\n  # @return this PointSet\r\n  disconnect: (index=-1) ->\r\n    if index < 0\r\n      @points = @points.slice( 0, @points.length+index )\r\n    else\r\n      @points = @points.slice( index+1 )\r\n\r\n    return @\r\n\r\n  # ## Add a vector to all the points in the `points` array.\r\n  # @param `args` comma-separated values, or as an array, or a Point object.\r\n  # @return this PointSet\r\n  pointsAdd: (args) ->\r\n    a = @_getArgs( arguments )\r\n    for p in @points\r\n      p.add( a )\r\n    return @\r\n\r\n\r\n  # ## Same as `pointsAdd()` but returns a new array of the resulting points.\r\n  $pointsAdd: (args) ->\r\n    a = @_getArgs( arguments )\r\n    return (p.$add( a ) for p in @points)\r\n\r\n\r\n  # ## Subtract a vector from all the points in the `points` array.\r\n  # @param `args` comma-separated values, or as an array, or a Point object.\r\n  # @return this PointSet\r\n  #  pointsSubtract: (args) ->\r\n  #    a = @_getArgs( arguments )\r\n  #    for p in @points\r\n  #      p.subtract( a )\r\n  #    return @\r\n\r\n\r\n  # ## Same as `pointsSubtract()` but returns a new array of the resulting points.\r\n  #  $pointsSubtract: (args) ->\r\n  #    a = @_getArgs( arguments )\r\n  #    return (p.$subtract( a ) for p in @points)\r\n\r\n\r\n  # ## Multiply a vector with all the points in the `points` array.\r\n  # @param `args` comma-separated values, or as an array, or a Point object.\r\n  # @return this PointSet\r\n  #  pointsMultiply: (args) ->\r\n  #    a = @_getArgs( arguments )\r\n  #    for p in @points\r\n  #      p.multiply( a )\r\n  #    return @\r\n\r\n\r\n  # ## Same as `pointsMultiply()` but returns a new array of the resulting points.\r\n  #  $pointsMultiply: (args) ->\r\n  #    a = @_getArgs( arguments )\r\n  #    return (p.$multiply( a ) for p in @points)\r\n\r\n\r\n  # ## Divide all the points in the `points` array with a vector.\r\n  # @param `args` comma-separated values, or as an array, or a Point object.\r\n  # @return this PointSet\r\n  #  pointsDivide: (args) ->\r\n  #    a = @_getArgs( arguments )\r\n  #    for p in @points\r\n  #      p.divide( a )\r\n  #    return @\r\n\r\n\r\n  # ## Same as `pointsDivide()` but returns a new array of the resulting points.\r\n  #  $pointsDivide: (args) ->\r\n  #    a = @_getArgs( arguments )\r\n  #    return (p.$divide( a ) for p in @points)\r\n\r\n\r\n  # ## Get an array of Lines that represents this PointSet's sides\r\n  # @param `close_path` a boolean value to include the side from last point to first point when set to `true`\r\n  # @return an array of Lines\r\n  sides: ( close_path=true ) ->\r\n    lastP = null\r\n    sides = []\r\n    for p in @points\r\n      if lastP then sides.push( new Line(lastP).connect(p) )\r\n      lastP = p\r\n\r\n    if close_path\r\n      sides.push( new Line( lastP ).connect( @points[0] ) )\r\n\r\n    return sides\r\n\r\n  # ## Get the angles of each vertice connected by 2 sides\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an array of angles in radian\r\n  angles: ( axis=Const.xy ) ->\r\n    angles = []\r\n    for i in [1...@points.length-1] by 1\r\n      v1 = @points[i-1].$subtract( @points[i] )\r\n      v2 = @points[i+1].$subtract( @points[i] )\r\n      angles.push( { p0: @points[i-1], p1: @points[i], p2: @points[i+1], angle: v1.angleBetween( v2 ) } )\r\n\r\n    return angles\r\n\r\n\r\n  # ## Get the bounding box for this point set.\r\n  # @return a Rectangle which is the bounding box of the PointSet\r\n  bounds: () ->\r\n    Util.boundingBox( @points )\r\n\r\n\r\n  # ## Get this PointSet's centroid, which is the averge positions of its points.\r\n  # @return the centroid point as Vector\r\n  centroid: () ->\r\n    Util.centroid( @points )\r\n\r\n\r\n  # ## Get a convex hull of the point set using Melkman's algorithm\r\n  # @param `sort` a boolean value to sort the `points` by x position first if set to true\r\n  # @return an array of Vectors to define the convex hull\r\n  convexHull: ( sort=true ) ->\r\n\r\n    if @points.length < 3 then return []\r\n\r\n    # sort points array first or not\r\n    if sort\r\n      pts = @points.slice()\r\n      pts.sort( (a, b) -> return a.x - b.x )\r\n    else\r\n      pts = @points\r\n\r\n    # if pt is on left of ray ab. Similar to Pari.collinear()\r\n    left = (a, b, pt) ->\r\n      (b.x - a.x) * (pt.y - a.y) - (pt.x - a.x) * (b.y - a.y) > 0\r\n\r\n    # double end queue\r\n    dq = []\r\n\r\n    # first 3 points\r\n    if left( pts[0], pts[1], pts[2])\r\n      dq.push( pts[0] )\r\n      dq.push( pts[1] )\r\n    else\r\n      dq.push( pts[1] )\r\n      dq.push( pts[0] )\r\n\r\n    dq.unshift( pts[2] )\r\n    dq.push( pts[2] )\r\n\r\n    # remaining points\r\n    i = 3\r\n    while i < pts.length\r\n      pt = pts[i]\r\n\r\n      if left( pt, dq[0], dq[1] ) and left(dq[dq.length-2], dq[dq.length-1], pt)\r\n        i++\r\n        continue\r\n\r\n      while !left(dq[dq.length-2], dq[dq.length-1], pt)\r\n        dq.pop()\r\n      dq.push( pt )\r\n\r\n      while !left( dq[0], dq[1], pt)\r\n        dq.shift()\r\n      dq.unshift( pt )\r\n\r\n      i++\r\n\r\n    # returns the hull's points\r\n    return dq\r\n\r\n\r\n  # overrides clone\r\n  clone: () ->\r\n    new PointSet(@).connect( Util.clonePoints( @points ) )\r\n\r\n\r\n# namespace\r\nthis.PointSet = PointSet"]}