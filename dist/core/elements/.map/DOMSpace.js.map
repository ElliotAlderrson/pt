{"version":3,"sources":["DOMSpace.coffee"],"names":[],"mappings":"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","file":"DOMSpace.js","sourceRoot":"/source/","sourcesContent":["# ### DOMSpace is a space that represents a html dom. It is similar to `CanvasSpace` but usually used as a space for SVG or HTML.\r\n\r\nclass DOMSpace extends Space\r\n\r\n  # ## Create a DOMSpace which represents a HTML DOM\r\n  # @param `id` an id property which refers to the \"id\" attribute of the element in DOM.\r\n  # @param `bgcolor` a background color string to specify the background. Default is `false` which shows a transparent background.\r\n  # @param `context` a string of dom context type, such as \"html\" or \"svg\". Default is \"html\"\r\n  constructor: ( id='pt_space', bgcolor=false, context='html' ) ->\r\n    super\r\n\r\n    # ## A property to store the DOM element\r\n    @space = document.querySelector(\"#\"+@id)\r\n    @css = {width: \"100%\", height: \"100%\"};\r\n\r\n    @bound = null\r\n    @boundRect = {top: 0, left: 0, width: 0, height: 0}\r\n\r\n    # ## A boolean property to track if the element is added to container or not\r\n    @appended = true\r\n\r\n    # either get existing one in the DOM or create a new one\r\n    if !@space then @_createSpaceElement()\r\n\r\n    # Track mouse dragging\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n    # A property to store canvas background color\r\n    @bgcolor = bgcolor\r\n\r\n    # A property to store rendering contenxt\r\n    @ctx = {}\r\n\r\n\r\n  # A private function to create the canvas element. By default this will create a <div>. Override to create a different element.\r\n  _createSpaceElement: () ->\r\n    @space = document.createElement(\"div\")\r\n    @space.setAttribute(\"id\", @id)\r\n    @appended = false\r\n\r\n\r\n  setCSS: ( key, val, isPx=false) ->\r\n    @css[key] = (if isPx then \"#{val}px\" else val)\r\n    return this\r\n\r\n\r\n  updateCSS: () ->\r\n    for k,v of @css\r\n      @space.style[k] = v\r\n\r\n\r\n  # ## Place a new canvas element into a container dom element. When canvas is ready, a \"ready\" event will be fired. Track this event with `space.canvas.addEventListener(\"ready\")`\r\n  # @param `parent_id` the DOM element into which the canvas element should be appended\r\n  # @param `readyCallback` a callback function with parameters `width`, `height`, and `canvas_element`, which will get called when canvas is appended and ready.\r\n  # @return this CanvasSpace\r\n  display: ( parent_id=\"#pt\", readyCallback ) ->\r\n    if not @appended\r\n\r\n      @bound = document.querySelector(parent_id)\r\n      @boundRect = @bound.getBoundingClientRect()\r\n\r\n      if @bound\r\n        # resize to fit bound\r\n        @resize( @boundRect.width, @boundRect.height )\r\n        @autoResize(true)\r\n\r\n        # add to parent dom if not existing\r\n        if @space.parentNode != @bound\r\n          @bound.appendChild( @space )\r\n\r\n        @appended = true\r\n\r\n        # fire ready event\r\n        setTimeout( (\r\n            () ->\r\n              @space.dispatchEvent( new Event('ready') )\r\n              if readyCallback\r\n                readyCallback( @boundRect.width, @boundRect.height,  @space )\r\n\r\n          ).bind(@)\r\n        )\r\n\r\n      else\r\n        throw 'Cannot add canvas to element '+parent_id\r\n\r\n    return this\r\n\r\n\r\n\r\n  # window resize handler\r\n  _resizeHandler: (evt) =>\r\n    @boundRect = @bound.getBoundingClientRect()\r\n    @resize( @boundRect.width, @boundRect.height, evt )\r\n\r\n\r\n  # ## Set whether the canvas element should resize when its container is resized. Default will auto size\r\n  # @param `auto` a boolean value indicating if auto size is set. Default is `true`.\r\n  # @return this CanvasSpace\r\n  autoResize: (auto=true) ->\r\n    # listen/unlisten for window resize event and callback\r\n    if (auto)\r\n      window.addEventListener( 'resize', @_resizeHandler )\r\n    else\r\n      window.removeEventListener( 'resize', @_resizeHandler )\r\n\r\n    return @\r\n\r\n\r\n  # ## This overrides Space's `resize` function. It's a callback function for window's resize event. Keep track of this with `onSpaceResize(w,h,evt)` callback in your added objects.\r\n  # @demo canvasspace.resize\r\n  # @return this CanvasSpace\r\n  resize: (w, h, evt) ->\r\n\r\n    @size.set(w, h)\r\n    @center = new Vector( w/2, h/2 )\r\n\r\n    # player resize callback\r\n    for k, p of @items\r\n      if p.onSpaceResize? then p.onSpaceResize(w, h, evt)\r\n\r\n    return @\r\n\r\n\r\n  clear: () ->\r\n    @space.innerHML = \"\"\r\n\r\n\r\n  # ## Overrides Space's `animate` function\r\n  # @param `time` current time\r\n  # @return this CanvasSpace\r\n  animate : (time) ->\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    return @\r\n\r\n\r\n  @attr: (elem, data) ->\r\n    for k, v of data\r\n      elem.setAttribute( k, v );\r\n\r\n\r\n  @css: (data) ->\r\n    str = \"\"\r\n    for k, v of data\r\n      if (v) then str += \"#{k}: #{v}; \"\r\n    return str;\r\n\r\n\r\n# namescape\r\nthis.DOMSpace = DOMSpace"]}