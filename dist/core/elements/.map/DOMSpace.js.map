{"version":3,"sources":["DOMSpace.coffee"],"names":[],"mappings":"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","file":"DOMSpace.js","sourceRoot":"/source/","sourcesContent":["# ### DOMSpace is a space that represents a html dom. It is similar to `CanvasSpace` but usually used as a space for SVG or HTML.\r\n\r\nclass DOMSpace extends Space\r\n\r\n  # ## Create a DOMSpace which represents a HTML DOM\r\n  # @param `id` an id property which refers to the \"id\" attribute of the element in DOM.\r\n  # @param `callback` an optional callback function with parameters `function (boundingBox, spaceElement)` which will get called when element is appended and ready. A \"ready\" event will also be fired from the space's element when it's appended, which you may track with `instance.space.addEventListener(\"ready\")`\r\n  # @param `spaceElement` a string of space's dom element name, such as \"div\" or \"svg\" or . Default is \"div\"\r\n  constructor: ( id, callback, spaceElement=\"div\" ) ->\r\n    if (!id) then id = 'pt'\r\n    super( id )\r\n\r\n    @id = if (@id[0] == \"#\") then @id.substr(1) else @id\r\n\r\n    # ## A property to store the DOM element\r\n    @space = null\r\n    @bound = null\r\n    @boundRect = {top: 0, left: 0, width: 0, height: 0}\r\n\r\n    @css = {};\r\n\r\n    _selector = document.querySelector(\"#\"+@id)\r\n\r\n    # if selector is not defined, create the spaceElement element\r\n    if !_selector\r\n      @space = @_createElement(spaceElement, @id)\r\n      document.body.appendChild( @space )\r\n      @bound = @space.parentElement\r\n\r\n    # if selector is an existing element\r\n    else\r\n      @space = _selector\r\n      @bound = @space.parentElement\r\n\r\n    # Track mouse dragging\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n    # no mutation observer, so we set a timeout for ready event\r\n    setTimeout( @_ready.bind(@, callback), 50 )\r\n\r\n    # A property to store canvas background color\r\n    @bgcolor = false\r\n\r\n    # A property to store rendering contenxt\r\n    @ctx = {}\r\n\r\n\r\n  # A private function to create the dom element. This will create a <div> if elem parameter is not set.\r\n  _createElement: ( elem=\"div\", id ) ->\r\n    d = document.createElement( elem )\r\n    d.setAttribute(\"id\", id )\r\n    return d\r\n\r\n\r\n  # A private function to handle callbacks after DOM element is mounted\r\n  _ready: ( callback ) ->\r\n\r\n    if @bound\r\n      # measurement of the bounds and resize to fit\r\n      @boundRect = @bound.getBoundingClientRect()\r\n      @resize( @boundRect.width, @boundRect.height )\r\n      @autoResize( @_autoResize )\r\n\r\n      if @bgcolor\r\n        @setCSS( \"backgroundColor\", @bgcolor )\r\n\r\n\r\n      @updateCSS()\r\n\r\n      @space.dispatchEvent( new Event('ready') )\r\n  \r\n      if (callback) then callback( @boundRect, @space )\r\n  \r\n    else\r\n      throw \"Cannot initiate #\"+@id+\" element\"\r\n    \r\n\r\n  setCSS: ( key, val, isPx=false) ->\r\n    @css[key] = (if isPx then \"#{val}px\" else val)\r\n    return this\r\n\r\n\r\n  updateCSS: () ->\r\n    for k,v of @css\r\n      @space.style[k] = v\r\n\r\n\r\n  # ## `display(...)` function is deprecated as of 0.2.0. You can now set the canvas element directly in the constructor, and customize it using `setup()`.\r\n  display: () ->\r\n    console.warn( \"space.display(...) function is deprecated as of version 0.2.0. You can now set the canvas element in the constructor. Please see the release note for details.\" )\r\n    return @\r\n\r\n  # ## Set up various options for CanvasSpace. The `opt` parameter is an object with the following fields. This is usually used during instantiation, eg `new CanvasSpace(...).setup( { opt } )`\r\n  # @param `opt.bgcolor` a hex or rgba string initial background color of the canvas\r\n  # @param `opt.resize` a boolean to set whether `<canvas>` size should auto resize to match its container's size\r\n  # @return this DOMSpace\r\n  setup: ( opt ) ->\r\n\r\n    # background color\r\n    if opt.bgcolor then @bgcolor = opt.bgcolor\r\n\r\n    # auto resize canvas to fit its container\r\n    @_autoResize = if (opt.resize != false) then true else false\r\n\r\n    return @\r\n\r\n\r\n  # window resize handler\r\n  _resizeHandler: (evt) =>\r\n\r\n    @boundRect = @bound.getBoundingClientRect()\r\n    @resize( @boundRect.width, @boundRect.height, evt )\r\n\r\n\r\n\r\n  # ## This overrides Space's `resize` function. It's a callback function for window's resize event when `autoResize` is true. Keep track of this with `onSpaceResize(w,h,evt)` callback in your added objects.\r\n  # @demo canvasspace.resize\r\n  # @return this CanvasSpace\r\n  resize: (w, h, evt) ->\r\n\r\n    @size.set(w, h)\r\n    @center = new Vector( w/2, h/2 )\r\n\r\n    # player resize callback\r\n    for k, p of @items\r\n      if p.onSpaceResize? then p.onSpaceResize(w, h, evt)\r\n\r\n    return @\r\n\r\n\r\n  # ## Set whether the svg element should resize when its container is resized.\r\n  # @param `auto` a boolean value indicating if auto size is set. Default is `true`.\r\n  # @return this CanvasSpace\r\n  autoResize: (auto=true) ->\r\n\r\n    # listen/unlisten for window resize event and callback\r\n    if (auto)\r\n      @css['width'] = '100%'\r\n      @css['height'] = '100%'\r\n      window.addEventListener( 'resize', @_resizeHandler )\r\n    else\r\n      delete @css['width']\r\n      delete @css['height']\r\n      window.removeEventListener( 'resize', @_resizeHandler )\r\n\r\n    return @\r\n\r\n\r\n  # ## Clear the space. This removes all the child nodes inside `space`\r\n  clear: () ->\r\n    @space.innerHML = \"\"\r\n\r\n\r\n  # ## Overrides Space's `animate` function\r\n  # @param `time` current time\r\n  # @return this CanvasSpace\r\n  animate : (time) ->\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    return @\r\n\r\n\r\n  @attr: (elem, data) ->\r\n    for k, v of data\r\n      elem.setAttribute( k, v );\r\n\r\n\r\n  @css: (data) ->\r\n    str = \"\"\r\n    for k, v of data\r\n      if (v) then str += \"#{k}: #{v}; \"\r\n    return str;\r\n\r\n\r\n# namescape\r\nthis.DOMSpace = DOMSpace"]}