{"version":3,"sources":["SVGSpace.coffee"],"names":[],"mappings":"AACA,IAAA,QAAA;EAAA;;;AAAM;;;EAKS,kBAAE,EAAF,EAAM,QAAN;AACX,QAAA;IAAA,0CAAO,EAAP,EAAW,QAAX,EAAqB,KAArB;IAEA,IAAG,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,WAAhB,CAAA,CAAA,KAAiC,KAApC;MACE,CAAA,GAAI,IAAC,CAAA,cAAD,CAAgB,KAAhB,EAAuB,IAAC,CAAA,EAAD,GAAI,MAA3B;MACJ,IAAC,CAAA,KAAK,CAAC,WAAP,CAAoB,CAApB;MACA,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA;MACV,IAAC,CAAA,KAAD,GAAS;MAGT,CAAA,GAAI,IAAC,CAAA,KAAK,CAAC,qBAAP,CAAA;MACJ,IAAC,CAAA,MAAD,CAAS,CAAC,CAAC,KAAX,EAAkB,CAAC,CAAC,MAApB,EARF;;EAHW;;qBAgBb,cAAA,GAAgB,SAAE,IAAF,EAAc,EAAd;AACd,QAAA;;MADgB,OAAK;;IACrB,CAAA,GAAI,QAAQ,CAAC,eAAT,CAA0B,4BAA1B,EAAwD,IAAxD;IACJ,IAAI,EAAJ;MAAa,CAAC,CAAC,YAAF,CAAe,IAAf,EAAqB,EAArB,EAAb;;AACA,WAAO;EAHO;;EAUhB,QAAC,CAAA,UAAD,GAAa,SAAC,MAAD,EAAS,IAAT,EAAe,EAAf;AAEX,QAAA;IAAA,IAAI,CAAC,MAAD,IAAW,CAAC,MAAM,CAAC,WAAvB;MACE,MAAA,GAAS,IAAC,CAAA;MACV,IAAG,CAAC,MAAJ;AAAgB,cAAO,0CAAvB;OAFF;;IAIA,IAAA,GAAO,QAAQ,CAAC,aAAT,CAAuB,GAAA,GAAI,EAA3B;IAEP,IAAI,CAAC,IAAL;MACE,IAAA,GAAO,QAAQ,CAAC,eAAT,CAA0B,4BAA1B,EAAwD,IAAxD;MACP,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAuB,EAAvB;MACA,IAAI,CAAC,YAAL,CAAkB,OAAlB,EAA0B,EAAE,CAAC,SAAH,CAAa,CAAb,EAAgB,EAAE,CAAC,OAAH,CAAW,GAAX,CAAhB,CAA1B;MACA,MAAM,CAAC,WAAP,CAAoB,IAApB,EAJF;;AAMA,WAAO;EAdI;;qBAqBb,MAAA,GAAS,SAAC,IAAD;AACP,QAAA;IAAA,IAAA,GAAO,IAAC,CAAA,KAAK,CAAC,gBAAP,CAAyB,GAAA,GAAI,OAAO,CAAC,QAAR,CAAiB,IAAjB,CAA7B;AAEP,SAAA,sCAAA;;MACE,CAAC,CAAC,UAAU,CAAC,WAAb,CAAyB,CAAzB;AADF;IAGA,OAAO,IAAC,CAAA,KAAO,CAAA,IAAI,CAAC,SAAL;AACf,WAAO;EAPA;;qBAYT,SAAA,GAAW,SAAA;AACT,WAAO,IAAC,CAAA,KAAK,CAAC,UAAd;MACE,IAAC,CAAA,KAAK,CAAC,WAAP,CAAmB,IAAC,CAAA,KAAK,CAAC,UAA1B;AACA,aAAO;IAFT;EADS;;;;GAhEU;;AAuEvB,IAAI,CAAC,QAAL,GAAgB","file":"SVGSpace.js","sourceRoot":"/source/","sourcesContent":["# ### SVGSpace is an extension of DOMSpace that represents an svg element in DOM. Also refers to DOMSpace for inherited methods.\r\nclass SVGSpace extends DOMSpace\r\n\r\n  # ## Create a SVGSpace which represents a svg element\r\n  # @param `id` Specify an element by its \"id\" attribute as string, or by the element object itself. An element can be an existing `<svg>`, or a `<div>` container in which a new `<svg>` will be created. If left empty, a `<div id=\"pt\"><svg id=\"pt_svg\" /></div>` will be added to DOM. Use css to customize its appearance if needed.\r\n  # @param `callback` an optional callback `function(boundingBox, spaceElement)` to be called when element is appended and ready. A \"ready\" event will also be fired from the space's element when it's appended, which can be tracked with `spaceInstance.space.addEventListener(\"ready\")`\r\n  constructor: ( id, callback ) ->\r\n    super( id, callback, 'svg')\r\n\r\n    if @space.nodeName.toLowerCase() != \"svg\"\r\n      s = @_createElement(\"svg\", @id+\"_svg\" )\r\n      @space.appendChild( s )\r\n      @bound = @space\r\n      @space = s\r\n\r\n      # size is known so set it immediately\r\n      b = @bound.getBoundingClientRect()\r\n      @resize( b.width, b.height )\r\n\r\n\r\n\r\n  # A private function to create the svg namespaced element. This will create a <svg> if elem parameter is not set.\r\n  _createElement: ( elem=\"svg\", id ) ->\r\n    d = document.createElementNS( \"http://www.w3.org/2000/svg\", elem )\r\n    if (id) then d.setAttribute(\"id\", id )\r\n    return d\r\n\r\n\r\n  # ## A static helper method to add a svg element inside a node. Usually you don't need to use this directly. See methods in `SVGForm` instead.\r\n  # @param `parent` the parent node element, or `null` to use current `<svg>` as parent.\r\n  # @param `name` a string of element name,  such as `\"rect\"` or `\"circle\"`\r\n  # @param `id` id attribute of the new element\r\n  @svgElement: (parent, name, id) ->\r\n\r\n    if (!parent || !parent.appendChild)\r\n      parent = @space\r\n      if !parent then throw( \"parent parameter needs to be a DOM node\" )\r\n\r\n    elem = document.querySelector(\"#\"+id);\r\n\r\n    if (!elem)\r\n      elem = document.createElementNS( \"http://www.w3.org/2000/svg\", name)\r\n      elem.setAttribute(\"id\",id)\r\n      elem.setAttribute(\"class\",id.substring(0, id.indexOf(\"-\")))\r\n      parent.appendChild( elem )\r\n\r\n    return elem\r\n\r\n\r\n  # ## Remove an item from this Space\r\n  # @param an object with an auto-assigned `animateID` property\r\n  # @demo svgspace.remove\r\n  # @return this space\r\n  remove : (item) ->\r\n    temp = @space.querySelectorAll( \".\"+SVGForm._scopeID(item) )\r\n\r\n    for t in temp\r\n      t.parentNode.removeChild(t)\r\n\r\n    delete @items[ item.animateID ]\r\n    return @\r\n\r\n\r\n  # ## Remove all items from this Space\r\n  # @return this space\r\n  removeAll: () ->\r\n    while (@space.firstChild)\r\n      @space.removeChild(@space.firstChild)\r\n      return @\r\n\r\n\r\n# namescape\r\nthis.SVGSpace = SVGSpace"]}