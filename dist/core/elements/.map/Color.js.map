{"version":3,"sources":["Color.coffee"],"names":[],"mappings":"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","file":"Color.js","sourceRoot":"/source/","sourcesContent":["# ### Color is a sensation of electromagnetic radiation, but your mind interprets it with such obstinate attitude that your favorite color may be, god forbids, pink. Or perhaps color is more like music, whose harmony and rhythm evoke emotions, and can be organized in different sequences to create meaningful narratives.\r\n\r\nclass Color extends Vector\r\n\r\n  # ## Create a new Color. Color lets you define a color in a specific mode. [This article](https://software.intel.com/en-us/node/503873) from Intel has a good overview of different color models.\r\n  # @param `args` Set the three values of a color as comma-separated values, as an array, or as an object with `{x, y, z}` properties. Optionally set `alpha` in a 4th parameter, and color mode string in 5th parameter.\r\n  # @eg `new Color()` `new Color(255,100,20)` `new Color([2,4])` `new Color({x:3, y:6, z:9})` `new Color(360,1,1,0.5)`, `new Color(100,50,-50,1,'lab')`\r\n  # @return a new Color object\r\n  constructor: ( args ) ->\r\n    super\r\n\r\n    _args = if ( Array.isArray(arguments[0]) and arguments[0][3] != undefined ) then arguments[0] else arguments\r\n\r\n    # ## alpha value from 0 to 1, where 0 is fully transparent, and 1 is fully opaque\r\n    @alpha = if _args.length >=4 then Math.min( 1, Math.max( _args[3], 0) ) else 1\r\n\r\n    # ## color mode id such as \"lab\" or \"rgb\"\r\n    @mode = 'rgb'\r\n    if arguments.length >=5 then @mode = arguments[4]\r\n    if typeof arguments[1] == \"string\" then @mode = arguments[1]\r\n\r\n\r\n  # ## A property to adject XYZ for Standard Observer 2deg, Daylight/sRGB illuminant D65\r\n  @XYZ = {\r\n    D65: {x: 95.047, y: 100, z: 108.883}\r\n  }\r\n\r\n  ## # A static function `Color.parseHex` to parse a hex string and a Color or rgb array\r\n  # @param `hex` hexadecial string with or without \"#\" in the beginning. It can be \"FF9900\", \"F90\", or \"FF9900CC\" with alpha.\r\n  # @param `asColor` Optional boolean value where the return value will be a `Color` object if set to `true`. Defaults to `false` which returns an array.\r\n  # @eg `Color.parseHex(\"#FF9900\")` `Color.parseHex(\"F90\")` `Color.parseHex(\"FF9900CC\")` `Color.parseHex(\"FF9900\", true)`\r\n  # @return a Color object, or an array [r, g, b]\r\n  @parseHex : (hex, asColor=false) ->\r\n    if hex.indexOf('#') == 0 then hex = hex.substr(1) # remove '#' if needed\r\n    if hex.length == 3 then hex = \"\"+hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]\r\n    if hex.length == 8\r\n      @alpha = hex.substr(6) & 0xFF / 255\r\n      hex = hex.substring(0,6)\r\n\r\n    hexValue = parseInt( hex, 16 )\r\n    rgb = [ hexValue >> 16, hexValue >> 8 & 0xFF, hexValue & 0xFF]\r\n    return if asColor then new Color( rgb[0], rgb[1], rgb[2] ) else rgb\r\n\r\n\r\n  # ## set a color mode and convert current color to new color mode\r\n  # @param `m` a string to specify color mode: 'hsl', 'hsb', 'rgb', 'lab', 'lch', 'xyz'\r\n  # @eg `color.setMode('lab')`\r\n  # @return this Color object with new color mode\r\n  setMode : ( m ) ->\r\n    m = m.toLowerCase()\r\n\r\n    if m != @mode\r\n      switch @mode\r\n        when 'hsl' then @copy( Point.get( Color.HSLtoRGB(@x, @y, @z) ) )\r\n        when 'hsb' then @copy( Point.get( Color.HSBtoRGB(@x, @y, @z) ) )\r\n        when 'lab' then @copy( Point.get( Color.LABtoRGB(@x, @y, @z) ) )\r\n        when 'lch' then @copy( Point.get( Color.LCHtoRGB(@x, @y, @z) ) )\r\n        when 'xyz' then @copy( Point.get( Color.XYZtoRGB(@x, @y, @z) ) )\r\n\r\n\r\n      switch m\r\n        when 'hsl' then @copy( Point.get( Color.RGBtoHSL(@x, @y, @z) ) )\r\n        when 'hsb' then @copy( Point.get( Color.RGBtoHSB(@x, @y, @z) ) )\r\n        when 'lab' then @copy( Point.get( Color.RGBtoLAB(@x, @y, @z) ) )\r\n        when 'lch' then @copy( Point.get( Color.RGBtoLCH(@x, @y, @z) ) )\r\n        when 'xyz' then @copy( Point.get( Color.RGBtoXYZ(@x, @y, @z) ) )\r\n\r\n#    if m != @mode\r\n#      if m is 'rgb' # to RGB\r\n#        if @mode is 'hsl' then @copy( Point.get( Color.HSLtoRGB(@x, @y, @z) ) )\r\n#        if @mode is 'hsb' then @copy( Point.get( Color.HSBtoRGB(@x, @y, @z) ) )\r\n#\r\n#      else if m is 'hsb' # to HSB\r\n#        if @mode is 'rgb' then @copy( Point.get( Color.RGBtoHSB(@x, @y, @z) ) )\r\n#        # # TODO: if @mode is 'hsl' then\r\n#\r\n#      else if m is 'hsl' # to HSL\r\n#        if @mode is 'rgb' then @copy( Point.get( Color.RGBtoHSL(@x, @y, @z) ) )\r\n#        # # TODO: if @mode is 'hsb' then\r\n#\r\n#      else if m is 'xyz'\r\n#        if @mode is 'rgb' then @copy( Point.get( Color.RGBtoXYZ(@x, @y, @z) ) )\r\n#        # # TODO: if @mode is 'hsb' then\r\n\r\n    @mode = m\r\n    return @\r\n\r\n\r\n  # ## Get rgb value as hex string such as '#123456'\r\n  hex: () ->\r\n    if @mode is 'rgb' then @floor() # make sure to get rgb as integer\r\n    cs = @values( (@mode != 'rgb') ) # convert to rgb if needed\r\n\r\n    # pad zero\r\n    _hexstring = (n) ->\r\n      n = n.toString(16)\r\n      if n.length < 2\r\n        return '0'+n\r\n      else\r\n        return n\r\n\r\n    ct = (_hexstring( n ) for n in cs)\r\n    return '#' + ct[0] + ct[1] + ct[2]\r\n\r\n\r\n  # ## Get rgb string such as 'rgb(12,34,56)'\r\n  rgb: () ->\r\n    if @mode is 'rgb' then @floor() # make sure to get rgb as integer\r\n    cs = @values( (@mode != 'rgb') ) # convert to rgb if needed\r\n    \"rgb(#{ cs[0] }, #{ cs[1] }, #{ cs[2] })\"\r\n\r\n\r\n  # ## Get rgba string such as 'rgba(12,34,56, 0.2)'\r\n  rgba: () ->\r\n    if @mode is 'rgb' then @floor() # make sure to get rgb as integer\r\n    cs = @values( (@mode != 'rgb') ) # convert to rgb if needed\r\n    \"rgba(#{ cs[0] }, #{ cs[1] }, #{ cs[2] }, #{ @alpha })\"\r\n\r\n\r\n  # ## Get color values (based on current color mode) as an array\r\n  # @param `toRGB` Optional boolean value to convert to rgb value if set to `true`. Default is false.\r\n  # @return an array of colro values\r\n  values: ( toRGB=false ) ->\r\n    cs = [@x, @y, @z]\r\n    if toRGB and @mode != 'rgb' # convert to rgb first\r\n      switch @mode\r\n        when 'hsl' then cs =  Color.HSLtoRGB(@x, @y, @z)\r\n        when 'hsb' then cs =  Color.HSBtoRGB(@x, @y, @z)\r\n        when 'lab' then cs =  Color.LABtoRGB(@x, @y, @z)\r\n        when 'lch' then cs =  Color.LCHtoRGB(@x, @y, @z)\r\n        when 'xyz' then cs =  Color.XYZtoRGB(@x, @y, @z)\r\n\r\n    return (Math.floor( v ) for v in cs)\r\n\r\n\r\n  # ## override clone\r\n  clone: () ->\r\n    c = new Color(@x, @y, @z, @alpha)\r\n    c.mode = @mode\r\n    return c\r\n\r\n\r\n  # ## Describe this color as a text string\r\n  # @return \"Color(mode) x, y, z, alpha\" text\r\n  toString: () -> \"Color (#{@mode} mode): #{ @x }, #{ @y }, #{ @z } #{ @alpha }\"\r\n\r\n\r\n  # color conversion code ported to coffeescript\r\n  # http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n\r\n  # ## A static function `Color.RGBtoHSL` to convert RGB to HSL\r\n  # @param `r, g, b` red, green, blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.RGBtoHSL(255,70,0)` `Color.RGBtoHSL(1,0.3,0, true)`\r\n  # @return an array of [h, s, l] where h is from 0 to 360, s is from 0 to 1, and l is from 0 to 1.\r\n  @RGBtoHSL : (r, g, b, normalizedInput, normalizedOutput) ->\r\n    if not normalizedInput\r\n      r /= 255\r\n      g /= 255\r\n      b /= 255\r\n\r\n    max = Math.max(r, g, b)\r\n    min = Math.min(r, g, b)\r\n    h = (max + min) / 2\r\n    s = h\r\n    l = h\r\n\r\n    if max == min\r\n      h = 0\r\n      s = 0 # achromatic\r\n    else\r\n      d = max - min\r\n      s = if l > 0.5 then d / (2 - max - min) else d / (max + min)\r\n\r\n      switch max\r\n        when r then h = (g - b) / d + (if g < b then 6 else 0)\r\n        when g then h = (b - r) / d + 2\r\n        when b then h = (r - g) / d + 4\r\n        else h = 0\r\n\r\n    return if normalizedOutput then [h/60, s, l] else [ h*60, s, l]\r\n\r\n\r\n  # ## A static function `Color.HSLtoRGB` to convert HSL to RGB\r\n  # @param `h, s, l` hue, saturation, and lightness. hue value from 0 to 360, saturation and lightness values from 0 to 1\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.HSLtoRGB(360,0.7,0.9)` `Color.HSLtoRGB(1,0.3,0, true)`\r\n  # @demo color.HSLtoRGB\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @HSLtoRGB : ( h, s, l, normalizedInput, normalizedOutput) ->\r\n\r\n    if s == 0\r\n      return if normalizedOutput then [1,1,1] else [255,255,255]\r\n    else\r\n\r\n      if not normalizedInput\r\n        h /= 360 # normalize hue\r\n\r\n      q = if l <= 0.5 then l * (1 + s) else l + s - (l * s)\r\n      p = 2 * l - q;\r\n\r\n      hue2rgb = ( p, q, t ) ->\r\n\r\n        if t < 0\r\n          t += 1\r\n        else if t > 1\r\n          t -= 1\r\n\r\n        if t * 6 < 1\r\n          return p + (q - p) * t * 6\r\n        else if t * 2 < 1\r\n          return q\r\n        else if t * 3 < 2\r\n          return p + (q - p) * ((2 / 3) - t) * 6\r\n        else\r\n          return p\r\n\r\n      r = hue2rgb( p, q, ( h + 1/3 ) )\r\n      g = hue2rgb( p, q, h )\r\n      b = hue2rgb( p, q, ( h - 1/3 ) )\r\n\r\n      return if normalizedOutput then [ r, g, b ] else [r*255, g*255, b*255]\r\n\r\n\r\n  # ## A static function `Color.RGBtoHSB` to convert RGB to HSB\r\n  # @param `r, g, b` red, green, blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.RGBtoHSB(255,70,0)` `Color.RGBtoHSB(1,0.3,0, true)`\r\n  # @return an array of [h, s, b] where h is from 0 to 360, s is from 0 to 1, and b is from 0 to 1.\r\n  @RGBtoHSB : (r, g, b, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      r /= 255\r\n      g /= 255\r\n      b /= 255\r\n\r\n    max = Math.max(r, g, b)\r\n    min = Math.min(r, g, b)\r\n\r\n    d = max - min\r\n    s = if max is 0 then 0 else d / max\r\n    v = max\r\n\r\n    if max is min\r\n      h = 0\r\n    else\r\n      switch max\r\n        when r then h = (g - b) / d + ( if g < b then 6 else 0 )\r\n        when g then h = (b - r) / d + 2\r\n        when b then h = (r - g) / d + 4\r\n        else h = 0\r\n\r\n    return if normalizedOutput then [h / 60, s, v] else [h * 60, s, v]\r\n\r\n\r\n  # ## A static function `Color.HSBtoRGB` to convert HSB to RGB\r\n  # @param `h, s, b` hue, saturation, and brightness. hue value from 0 to 360, saturation and brightness values from 0 to 1\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @eg `Color.HSBtoRGB(360,0.7,0.9)` `Color.HSBtoRGB(1,0.3,0, true)`\r\n  # @demo color.HSBtoRGB\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @HSBtoRGB : (h, s, v, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      h /= 360\r\n\r\n    i = Math.floor(h * 6)\r\n    f = h * 6 - i\r\n    p = v * (1 - s)\r\n    q = v * (1 - f * s)\r\n    t = v * (1 - (1 - f) * s)\r\n\r\n    switch i % 6\r\n      when 0 then rgb = [v, t, p]\r\n      when 1 then rgb = [q, v, p]\r\n      when 2 then rgb = [p, v, t]\r\n      when 3 then rgb = [p, q, v]\r\n      when 4 then rgb = [t, p, v]\r\n      when 5 then rgb = [v, p, q]\r\n      else rgb = [0,0,0]\r\n\r\n    return if normalizedOutput then rgb else [ rgb[0]*255, rgb[1]*255, rgb[2]*255 ]\r\n\r\n\r\n  # ## Static function `Color.RGBtoLAB` transforms RGB to LAB\r\n  # @param `r, g, b` red, green, and blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [L, a, b] where lightness (L) is from 0 to 100, a and b component values are from -128 to 127. red/green colors are represented in a, and yellow/blue colors are represented in b.\r\n  @RGBtoLAB : (r, g, b, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      r *= 255\r\n      g *= 255\r\n      b *= 255\r\n\r\n    xyz = Color.RGBtoXYZ(r,g,b)\r\n    return Color.XYZtoLAB( xyz[0], xyz[1], xyz[2] )\r\n\r\n\r\n  # ## Static function `Color.LABtoRGB` transforms LAB to RGB\r\n  # @param `L, a, b` lightness (L) is from 0 to 100, a and b component values are from -128 to 127. red/green colors are represented in a, and yellow/blue colors are represented in b.\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @demo color.LABtoRGB\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @LABtoRGB : (L, a, b, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      L *= 100\r\n      a = (a-0.5) * 127\r\n      b = (b-0.5) * 127\r\n\r\n    xyz = Color.LABtoXYZ( L, a, b)\r\n    rgb = Color.XYZtoRGB( xyz[0], xyz[1], xyz[2] )\r\n    return if normalizedOutput then [ rgb[0]/255, rgb[1]/255, rgb[2]/255 ] else rgb\r\n\r\n  # ## Static function `Color.RGBtoLCH` transforms RGB to LCH (Cylindrical Lab)\r\n  # @param `r, g, b` red, green, and blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [L, c, h] where lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  @RGBtoLCH : (r, g, b, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      r *= 255\r\n      g *= 255\r\n      b *= 255\r\n\r\n    lab = Color.RGBtoLAB(r,g,b)\r\n    lch = Color.LABtoLCH( lab[0], lab[1], lab[2] )\r\n    return if normalizedOutput then [ lch[0]/100, lch[1]/100, lch[2]/360 ] else lch\r\n\r\n\r\n  # ## Static function `Color.LCHtoRGB` transforms LCH to RGB\r\n  # @param `L, c, h` lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @LCHtoRGB : (L, c, h, normalizedInput, normalizedOutput) ->\r\n    if normalizedInput\r\n      L *= 100\r\n      c *= 100\r\n      h *= 360\r\n\r\n    lab = Color.LCHtoLAB( L, c, h )\r\n    xyz = Color.LABtoXYZ( lab[0], lab[1], lab[2])\r\n    rgb = Color.XYZtoRGB( xyz[0], xyz[1], xyz[2] )\r\n    return if normalizedOutput then [ rgb[0]/255, rgb[1]/255, rgb[2]/255 ] else rgb\r\n\r\n\r\n  # ## Static function `Color.XYZtoRGB` to convert XYZ to RGB. This is usually used when converting between LAB and RGB.\r\n  # @param `x, y, z` x, y, z values from 0 to 100\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [r, g, b] where each value is from 0 to 255\r\n  @XYZtoRGB : (x, y, z, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      x = x / 100\r\n      y = y / 100\r\n      z = z / 100\r\n\r\n    rgb = [\r\n      x *  3.2404542 + y * -1.5371385 + z * -0.4985314\r\n      x * -0.9692660 + y *  1.8760108 + z *  0.0415560\r\n      x *  0.0556434 + y * -0.2040259 + z *  1.0572252\r\n    ]\r\n\r\n    # convert xyz to rgb. Note that not all colors are visible in rgb, so here we bound rgb between 0 to 1\r\n    for c, i in rgb\r\n      if c < 0\r\n        rgb[i] = 0\r\n      else\r\n        rgb[i] = Math.min( 1, if ( c > 0.0031308 ) then 1.055 * ( Math.pow( c, 1/2.4 ) ) - 0.055 else 12.92 * c )\r\n\r\n#    r = if ( r > 0.0031308 ) then 1.055 * ( Math.pow( r, 1/2.4 ) ) - 0.055 else (if r < 0 then 0 else 12.92 * r)\r\n#    g = if ( g > 0.0031308 ) then 1.055 * ( Math.pow( g, 1/2.4 ) ) - 0.055 else (if g < 0 then 0 else 12.92 * g)\r\n#    b = if ( b > 0.0031308 ) then 1.055 * ( Math.pow( b, 1/2.4 ) ) - 0.055 else (if b < 0 then 0 else 12.92 * b)\r\n\r\n    return if normalizedOutput then rgb else [ Math.round(rgb[0] * 255), Math.round(rgb[1] * 255), Math.round(rgb[2] * 255) ]\r\n\r\n\r\n  # ## A static function `Color.RGBtoXYZ` to convert RGB to XYZ. This is usually used when converting between LAB and RGB.\r\n  # @param `r, g, b` red, green, blue values from 0 to 255\r\n  # @param `normalizedInput, normalizedOutput` Optional boolean values to indicate if input parameters are normalized (0 to 1), and if return value should be normalized\r\n  # @return an array of [x, y, z] where each value is from 0 to 100\r\n  @RGBtoXYZ : (r, g, b, normalizedInput, normalizedOutput) ->\r\n\r\n    if not normalizedInput\r\n      r = ( r / 255 )\r\n      g = ( g / 255 )\r\n      b = ( b / 255 )\r\n\r\n    r = if ( r > 0.04045 ) then Math.pow( ( r + 0.055 ) / 1.055, 2.4 ) else r / 12.92\r\n    g = if ( g > 0.04045 ) then Math.pow( ( g + 0.055 ) / 1.055, 2.4 ) else g / 12.92\r\n    b = if ( b > 0.04045 ) then Math.pow( ( b + 0.055 ) / 1.055, 2.4 ) else b / 12.92\r\n\r\n    if not normalizedOutput\r\n      r = r * 100\r\n      g = g * 100\r\n      b = b * 100\r\n\r\n    return [\r\n      r * 0.4124564 + g * 0.3575761 + b * 0.1804375\r\n      r * 0.2126729 + g * 0.7151522 + b * 0.0721750\r\n      r * 0.0193339 + g * 0.1191920 + b * 0.9503041\r\n    ]\r\n\r\n\r\n  # ## Static function `Color.XYZtoLAB` to convert XYZ to LAB.\r\n  # @param `x, y, z` x, y, z values from 0 to 100\r\n  # @return an array of [l, a, b] where lightness (L) is from 0 to 100, a and b values are from -128 to 127\r\n  @XYZtoLAB : (x, y, z) ->\r\n\r\n    # adjusted\r\n    x = x / Color.XYZ.D65.x\r\n    y = y / Color.XYZ.D65.y\r\n    z = z / Color.XYZ.D65.z\r\n\r\n    calc = (n) ->\r\n      return if ( n > 0.008856 ) then Math.pow(n, 1/3) else (7.787 * n) + 16/116\r\n\r\n    cy = calc( y )\r\n\r\n    return [\r\n      ( 116 * cy ) - 16\r\n      500 * ( calc(x) - cy )\r\n      200 * ( cy - calc(z) )\r\n    ]\r\n\r\n  # ## Static function `Color.LABtoXYZ` to convert LAB to XYZ.\r\n  # @param `L, a, b` lightness (L) is from 0 to 100, a and b component values are from -128 to 127\r\n  # @return an array of [x, y, z] where each value is from 0 to 100\r\n  @LABtoXYZ : (L, a, b) ->\r\n    y = ( L + 16 ) / 116\r\n    x = a / 500 + y\r\n    z = y - b / 200\r\n\r\n    calc = (n) ->\r\n      nnn = Math.pow(n,3)\r\n      return if ( nnn > 0.008856 ) then nnn else ( n - 16 / 116 ) / 7.787\r\n\r\n    # adjusted\r\n    xyz = [\r\n      Math.min( Color.XYZ.D65.x, Color.XYZ.D65.x * calc(x) )\r\n      Math.min( Color.XYZ.D65.y, Color.XYZ.D65.y * calc(y) )\r\n      Math.min( Color.XYZ.D65.y, Color.XYZ.D65.z * calc(z) )\r\n    ]\r\n\r\n    return xyz\r\n\r\n  # ## Static function `Color.XYZtoLUV` to convert XYZ to LUV.\r\n  # @param `x, y, z` x, y, z values from 0 to 100\r\n  # @return an array of [l, u, v] where lightness is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  @XYZtoLUV : (x, y, z) ->\r\n    u = ( 4 * x ) / ( x + ( 15 * y ) + ( 3 * z ) )\r\n    v = ( 9 * y ) / ( x + ( 15 * y ) + ( 3 * z ) )\r\n\r\n    y = y / 100\r\n    y = if ( y > 0.008856 ) then Math.pow( y, 1/3 ) else ( 7.787 * y + 16 / 116 )\r\n\r\n    refU = ( 4 * Color.XYZ.D65.x ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n    refV = ( 9 * Color.XYZ.D65.y ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n\r\n    L = ( 116 * y ) - 16\r\n    return [\r\n      L\r\n      13 * L * ( u - refU )\r\n      13 * L * ( v - refV )\r\n    ]\r\n\r\n  # ## Static function `Color.LUVtoXYZ` to convert LUV to XYZ.\r\n  # @param `L, u, v` lightness (L) is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  # @return an array of [x, y, z] where each value is from 0 to 100\r\n  @LUVtoXYZ : (L, u, v) ->\r\n    y = ( L + 16 ) / 116\r\n    cubeY = y*y*y\r\n    y = if ( cubeY > 0.008856 ) then cubeY else ( y - 16 / 116 ) / 7.787\r\n\r\n    refU = ( 4 * Color.XYZ.D65.x ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n    refV = ( 9 * Color.XYZ.D65.y ) / ( Color.XYZ.D65.x + ( 15 * Color.XYZ.D65.y ) + ( 3 * Color.XYZ.D65.z ) )\r\n\r\n    u = u / ( 13 * L ) + refU\r\n    v = v / ( 13 * L ) + refV\r\n\r\n    y = y*100\r\n    x = -1 * (9 * y * u) / ( (u - 4) * v  - u * v )\r\n    return [ x, y,  ( 9 * y - (15 * v * y) - (v * x) ) / (3 * v ) ]\r\n\r\n\r\n  # ## Static function `Color.LABtoLCH` transforms LAB to Cylindrical LCH\r\n  # @param `L, a, b` lightness (L) is from 0 to 100, a and b component values are from -128 to 127\r\n  # @return an array of [l, c, h] where lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  @LABtoLCH : (L, a, b) ->\r\n    h = Math.atan2( b, a )  # Quadrant by signs\r\n    h = if ( h > 0 ) then (180 * h / Math.PI) else 360 - ( 180 * Math.abs( h ) / Math.PI )\r\n    return [L, Math.sqrt( a*a + b*b ), h]\r\n\r\n\r\n  # ## Static function `Color.LCHtoLAB` transforms Cylindrical LCH to LAB\r\n  # @param `L, c, h` lightness (L) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  # @return an array of [l, a, b] where lightness (L) is from 0 to 100, a and b values are from -128 to 127\r\n  @LCHtoLAB : (L, c, h) ->\r\n    radH = Math.PI * h / 180\r\n    return [\r\n      L\r\n      Math.cos( radH ) * c\r\n      Math.sin( radH ) * c\r\n    ]\r\n\r\n  # ## Static function `Color.LUVtoLCH` to convert LUV to LCH.\r\n  # @param `L, u, v` lightness (L) is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  # @return an array of [l, c, h] where lightness (l) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  @LUVtoLCH : (L, u, v) -> LABtoLCH( L, u, v )\r\n\r\n  # ## Static function `Color.LCHtoLUV` transforms Cylindrical LCH to LUV\r\n  # @param `L, c, h` lightness (L) and chroma (c) is from 0 to 100, and hue (h) is from 0 to 360\r\n  # @return an array of [l, u, v] where lightness is from 0 to 100, u is from -134 to 220, and v is from -140 o 122\r\n  @LCHtoLUV : (L, c, h) -> LCHtoLAB( L, c, h )\r\n\r\n\r\n# namespace\r\nthis.Color = Color"]}