{"version":3,"sources":["Point.coffee"],"names":[],"mappings":"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","file":"Point.js","sourceRoot":"/source/","sourcesContent":["# ### A point is the smallest expressible concept within a space. To see an infinitesimal point in an infinite space, in your mind's eyes, is to gaze upon being and nothingness. A point defines a precise position, and while formless and unchanging, it provides the basis for creation, for endless possibilities in ideas and forms. Imagine a point not only in physical or visual spaces, but also on conceptual planes, in metaphysical dimensions, and ponder how all tangible and intangible forms can be reduced into points in spaces.\r\nclass Point\r\n\r\n  # ## Create a new point using optional parameters which can be a list of numeric values, or an array, or an object with x,y,z properties. If no parameter is specified, this will return a Point at (0,0,0) position.\r\n  # @param `args(x,y,z)` optional comma separated values to specify x, y, and z position\r\n  # @param `args([x,y,z])` optional array with 1 to 3 values to specify x, y, and z position\r\n  # @param `args(pt)` an optional object with `{x, y, z}` properties.\r\n  # @eg `new Point()` `new Point(1,2,3)` `new Point([2,4])` `new Point({x:3, y:6, z:9})`\r\n  # @return a new Point object\r\n  constructor: (args) ->\r\n\r\n    # parse arguments and copy to this.x,y,z\r\n    @copy( Point.get(arguments) )\r\n\r\n\r\n  # ## A static function `Point.get()` which converts arrays or objects to an object with `{x, y, z}` properties.\r\n  # @param `args` Similar to Point constructor, this accepts optional parameters which can be comma-separated values, or an array, or any object.\r\n  # @eg `Point.get([2,4])` `Point.get({x:3, y:6, z:9})`\r\n  # @return an Object with {x, y, z} properties\r\n  @get : ( args ) ->\r\n\r\n    if args.length > 0\r\n\r\n      if typeof args[0] is 'object'\r\n\r\n        # if it's Array or arguments (object with length property). Note that arguments is not considered as an Array by javascript.\r\n        if args[0] instanceof Array or args[0].length > 0\r\n\r\n          return {\r\n            x: args[0][0] || 0\r\n            y: args[0][1] || 0\r\n            z: args[0][2] || 0\r\n          }\r\n\r\n          # Point object\r\n        else\r\n          return {\r\n            x: args[0].x || 0\r\n            y: args[0].y || 0\r\n            z: args[0].z || 0\r\n          }\r\n\r\n        # multiple args for x, y, z\r\n      else\r\n\r\n        return {\r\n        x: args[0] || 0\r\n        y: args[1] || 0\r\n        z: args[2] || 0\r\n        }\r\n\r\n    else\r\n      # no argument return empty point\r\n      return { x: 0, y: 0, z: 0 }\r\n\r\n\r\n  # ## Given another point in relation to this point, this returns which side or quadrant the other point is at. Possible\r\n  # @param `pt` a Point object\r\n  # @param `epsilon` an optional value to specify the minimum distance threshold. Default is Const.epsilon.\r\n  # @eg `p.quadrant( another_p )` `p.quadrant( another_p, 2 )`\r\n  # @demo point.quadrant\r\n  # @return a constant value such as Const.identical, Const.bottom, Const.top_right\r\n  quadrant: (pt, epsilon=Const.epsilon) ->\r\n\r\n    if pt.near(@) then return Const.identical\r\n\r\n    if (Math.abs(pt.x-@x) < epsilon)\r\n      return if pt.y < @y then Const.top else Const.bottom\r\n\r\n    if (Math.abs(pt.y-@y) < epsilon)\r\n      return if pt.x < @x then Const.left else Const.right\r\n\r\n    if (pt.y < @y && pt.x > @x)\r\n      return Const.top_right\r\n    else if (pt.y < @y && pt.x < @x)\r\n      return Const.top_left\r\n    else if (pt.y > @y && pt.x < @x)\r\n      return Const.bottom_left\r\n    else\r\n      return Const.bottom_right\r\n\r\n\r\n  # ## Set position of this point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg Eg, `p.set( x, y )` or `p.set( {x, y, z} )` or  `p.set( [x, y, z] )`\r\n  # @return this Point\r\n  set: (args) ->\r\n    p = Point.get(arguments)\r\n\r\n    # ## property for x position\r\n    @x = p.x\r\n\r\n    # ## property for y position\r\n    @y = p.y\r\n\r\n    # ## propoerty for z position\r\n    @z = p.z\r\n    return @\r\n\r\n\r\n  # ## Copy another point object to this point. Slightly faster than `set()`\r\n  # @param `p` a Point object to copy\r\n  # @return this Point\r\n  copy: (p) ->\r\n    @x = p.x\r\n    @y = p.y\r\n    @z = p.z\r\n    return @\r\n\r\n\r\n  # ## Clone this point\r\n  # @return a new Point that is identical to this point\r\n  clone: () -> return new Point( @ )\r\n\r\n\r\n  # ## Describe this point as a text string\r\n  # @return \"Point x, y, z\" text\r\n  toString: () -> \"Point #{ @x }, #{ @y }, #{ @z }\"\r\n\r\n  # ## When a point has 3 dimensions `(x,y,z)`, this function converts it to a new point `(x,y)` of a specific 2D plane (such as `yz`)\r\n  # @param `axis` an axis id such as `Const.yz`.\r\n  # @param `reverse` optional boolean value. If `true`, the mapping will be flipped. Default is false.\r\n  # @eg `p.get2D( Const.xy )` `p.get2D(Const.yz, true)`\r\n  # @return a new 2D Point\r\n  get2D: (axis, reverse=false) ->\r\n\r\n    if axis == Const.xy then return new this.__proto__.constructor( @ )\r\n    if axis == Const.xz then return new this.__proto__.constructor( @x, @z, @y ) # same flip in reverse\r\n    if axis == Const.yz\r\n      if reverse\r\n        return new this.__proto__.constructor( @z, @x, @y )\r\n      else\r\n        return new this.__proto__.constructor( @y, @z, @x )\r\n\r\n    return new this.__proto__.constructor( @ )\r\n\r\n\r\n\r\n  # ## Evaluate the minimum x,y,z of this point and another point, and get a minimum Point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg `p.min(1,2)` `p.min( another_p )`\r\n  # @return a new Point\r\n  min: (args) ->\r\n    _p = Point.get(arguments)\r\n    return new Point( Math.min(@x, _p.x), Math.min(@y, _p.y), Math.min(@z, _p.z) )\r\n\r\n\r\n  # ## Evaluate the minimum x,y,z of this point and another point, and get a maximum Point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg `p.max(1,2)` `p.max( another_p )`\r\n  # @return a new Point\r\n  max: (args) ->\r\n    _p = Point.get(arguments)\r\n    return new Point( Math.max(@x, _p.x), Math.max(@y, _p.y), Math.max(@z, _p.z) )\r\n\r\n\r\n  # ## Check if this point is at exactly the same position as the other point\r\n  # @param `args` comma-separated values, as an array, or as a Point object.\r\n  # @eg `p.equal(1,2)` `p.equal( another_p )`\r\n  # @return boolean, true if they are equal\r\n  equal: (args) ->\r\n    _p = Point.get(arguments)\r\n    return  (_p.x == @x) and (_p.y == @y) and (_p.z == @z)\r\n\r\n\r\n  # ## Check if this point is at exactly the same position as the other point\r\n  # @param `pt` a Point to check against\r\n  # @param `epsilon` an optional threshold value indicating the minimum distance that's near enough\r\n  # @eg `p.near(another_p)` `p.near( another_p, 2 )` `p.near( Point.get(1,2,3) )`\r\n  # @return boolean, true if they are near\r\n  near: ( pt, epsilon=Const.epsilon) ->\r\n    _p = Point.get(arguments)\r\n    return (Math.abs(_p.x-@x) < epsilon) and (Math.abs(_p.y-@y) < epsilon) and (Math.abs(_p.z-@z) < epsilon)\r\n\r\n\r\n  # ## Snap this point's position to the nearest integer\r\n  # @return this Point\r\n  floor: () ->\r\n    @x = Math.floor( @x )\r\n    @y = Math.floor( @y )\r\n    @z = Math.floor( @z )\r\n    return @\r\n\r\n\r\n# namespace\r\nthis.Point = Point\r\n"]}