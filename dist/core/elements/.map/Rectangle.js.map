{"version":3,"sources":["Rectangle.coffee"],"names":[],"mappings":"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","file":"Rectangle.js","sourceRoot":"/source/","sourcesContent":["# Rectangle class is a pair of points\r\nclass Rectangle extends Pair\r\n\r\n  # ## Create a new Rectangle. A Rectangle is a Pair whose rectangular bounding box are defined by two Vectors. Use `toPointSet()` to convert it to a PointSet with 4 points if you need to rotate or shear it.\r\n  # @param `args` Similar to Pair constructor, use comma-separated values, an array, or an object as parameters to specify the first point. As a shortcut to `to()`, you can also pass 4 or 6 values to set both anchor and `p1` points directly as a 2d or 3d vector.\r\n  # @eg `new Rectangle()` `new Rectangle(1,2,3)` `new Rectangle([2,4])` `new Rectangle({x:3, y:6, z:9}).to(1,2,3)`\r\n  # @return a new Rectangle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## the center point of rectangle as Vector object\r\n    @center = new Vector()\r\n\r\n\r\n  # ## A static method `Rectangle.contain` to check if a point is within a bound\r\n  # @param `pt` the Point to check\r\n  # @param `ptl` a Point to specify top-left position of the rectangular bounds\r\n  # @param `pbr`  a Point to specify bottom-right position of the rectangular bounds\r\n  # @return a boolean value indicating if the point is contained within the rectangular bounds\r\n  @contain: (pt, ptl, pbr) ->\r\n    return (pt.x >= ptl.x && pt.x <= pbr.x && pt.y >= ptl.y && pt.y <= pbr.y && pt.z >= ptl.z && pt.z <= pbr.z)\r\n\r\n\r\n  # ## Describe this rectangle as a text string\r\n  # @return \"Rectangle x1, y1, z1, x2, y2, z2, width height\" text\r\n  toString : ->\r\n    s = @size()\r\n    \"Rectangle x1 #{@x}, y1 #{@y}, z1 #{@z}, x2 #{@p1.x}, y2 #{@p1.y}, z2 #{@p1.z}, width #{s.x}, height #{s.y}\"\r\n\r\n\r\n  # ## Convert this Rectangle from a pair of points to a `PointSet` which has 4 points. Note that if you want to rotate or shear this rectangle, convert this rectangle to a `PointSet` first.\r\n  # @return a PointSet with 4 points. (top-right, bottom-right, bottom-left, top-left)\r\n  toPointSet: () ->\r\n    c = @corners()\r\n    return new PointSet( @ ).to( [c.topRight, c.bottomRight, c.bottomLeft, c.topLeft ] )\r\n\r\n\r\n  # ## Similar to `Pair`, this function connects the anchor with another point to define the rectangular bounds. This also calls Pair's `resetBounds()` to make sure anchor point is at top-left and `p1` is at bottom-right\r\n  # @param `args` comma-separated values, or an array, or an object\r\n  # @eg `rect.to(1,2,3)` `new Rect(pt).to([3,4])`\r\n  # @return this Rectangle\r\n  to: ( args ) ->\r\n    @p1 = new Vector( Point.get(arguments) )\r\n    @resetBounds()\r\n    @center = @midpoint() # get center point also\r\n    return @\r\n\r\n\r\n  setCenter: ( args ) ->\r\n    halfsize = @size().$divide(2)\r\n    @center.set( Point.get(arguments) )\r\n    @set( @center.$subtract( halfsize ) )\r\n    @p1.set( @center.$add( halfsize ) )\r\n    return @\r\n\r\n  # ## Resize this rectangle by a certain amount from top left\r\n  # @param `args` comma-separated values, or an array, or an object to specify the size change\r\n  # @eg `rect.resizeBy(1,2,3)` `rect.resizeBy( delta_vec )`\r\n  # @return this Rectangle\r\n  resizeBy: ( args ) ->\r\n    size = new Vector( Point.get(arguments) ) # get full size\r\n    @p1.add( size )\r\n    @center = @midpoint()\r\n    return @\r\n\r\n\r\n  # ## resize this rectangle by a certain amount from center\r\n  # @param `args` comma-separated values, or an array, or an object to specify the size change\r\n  # @eg `rect.resizeCenterBy(1,2,3)` `rect.resizeCenterBy( delta_vec )`\r\n  # @return this Rectangle\r\n  resizeCenterBy: () ->\r\n    size = new Vector( Point.get(arguments) ).divide( 2 ) # get half size\r\n    @subtract( size )\r\n    @p1.add( size )\r\n    return @\r\n\r\n\r\n  # ## resize to a specific size from top left\r\n  # @param `args` comma-separated values, or an array, or an object to specify the new size\r\n  # @eg `rect.resizeTo(10,10)` `rect.resizeTo( size_vec )`\r\n  # @return this Rectangle\r\n  resizeTo: () ->\r\n    @p1 = new Vector( Point.get(arguments) )\r\n    @relative()\r\n    @center = @midpoint() # get center point also\r\n    return @\r\n\r\n\r\n  # ## resize to a specific size from center point\r\n  # @param `args` comma-separated values, or an array, or an object to specify the new size\r\n  # @eg `rect.resizeCenterTo(10,10)` `rect.resizeCenterTo( size_vec )`\r\n  # @return this Rectangle\r\n  resizeCenterTo: () ->\r\n    size = new Vector( Point.get(arguments)).divide( 2 ) # get half size\r\n    @set( @center.$subtract(size) )\r\n    @p1.set( @center.$add(size) )\r\n    return @\r\n\r\n\r\n  # ## resize this rectangle so that it will enclose another rectangle. Namely, the resulting rectangle is a *union* of the two initial rectangles.\r\n  # @param `rect` another Rectangle or Pair object\r\n  # @return this Rectangle which has the new size\r\n  enclose: ( rect ) ->\r\n    @set( @min( rect ) )\r\n    @p1.set( @p1.max( rect.p1 ) )\r\n    @center = @midpoint() # get center point also\r\n    return @\r\n\r\n\r\n  # ## Same as `enclose()` but returns a new Rectangle\r\n  # @param `rect` another Rectangle or Pair object\r\n  # @return a new Rectangle which has the new size\r\n  $enclose: ( rect ) -> return @clone().enclose( rect )\r\n\r\n  # ## Check if this rectangle encloses (or is enclosed by) another rect. Use with `isLarger()` to check which rectangle is being enclosed.\r\n  # @param `rect` another rectangle\r\n  # @return a boolean value to indicate if one rectangle is enclosed by another\r\n  isEnclosed: ( rect ) ->\r\n    d = @$subtract( rect ).multiply( @p1.$subtract( rect.p1 ) )\r\n    d2 = @size().subtract( rect.size() )\r\n    return d.x <= 0 and d.y <= 0 and d.z <= 0 and (d2.x * d2.y >= 0)\r\n\r\n\r\n  # ## Check if this rectangle is larger than another rectangle\r\n  # @param `rect` another rectangle\r\n  # @return a boolean value to indicate if this rectangle is larger\r\n  isLarger: ( rect ) ->\r\n    s1 = @size()\r\n    s2 = rect.size()\r\n    return s1.x * s1.y > s2.x * s2.y\r\n\r\n\r\n  # ## Check if a Point is on this Rectangle\r\n  # @param `args` comma-separated values, or an array, or a Point object\r\n  # @eg `rect.intersectPoint(1,2,3)` `rect.intersectPoint(pt)`\r\n  # @return a boolean value to indicate if there is an intersection\r\n  intersectPoint: () ->\r\n    pt = Point.get(arguments)\r\n    return (pt.x >= @x && pt.x <= @p1.x && pt.y >= @y && pt.y <= @p1.y && pt.z >= @z && pt.z <= @p1.z)\r\n\r\n\r\n  # ## Check intersections between this Rectangle and an infinite Line on xy axis.\r\n  # @param `path` a Pair or Line object to specify an infinite line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectPath: ( line, get_pts=true ) ->\r\n    sides = @sides()\r\n    pts = []\r\n    for s in sides\r\n      p = line.intersectPath( s )\r\n      if p\r\n        if get_pts\r\n          pts.push( p )\r\n        else\r\n          return true\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check intersections between this Rectangle and a Line segment on xy axis.\r\n  # @param `line` a Line to check\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero, one, or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLine: (line, get_pts=true) ->\r\n\r\n    # check if fully enclosed\r\n    ip1 = @intersectPoint( line )\r\n    ip2 = @intersectPoint( line.p1 )\r\n    if ip1 and ip2 then return if get_pts then [] else true\r\n\r\n    # bounding box check\r\n    if !(ip1 or ip2)\r\n      lbound = line.bounds()\r\n      if !@intersectRectangle( lbound, false )\r\n        return if get_pts then [] else false\r\n\r\n    # check sides\r\n    sides = @sides()\r\n    pts = []\r\n    for s in sides\r\n      p = line.intersectLine( s )\r\n      if p\r\n        if get_pts\r\n          pts.push( p )\r\n        else\r\n          return true\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check if this Rectangle intersects with a list of Lines ( useful for polygon or polyline such as `rectangle.sides()` ) on xy axis.\r\n  # @param `lines` an array of Line\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLines: (lines, get_pts=true) ->\r\n    return Line.intersectLines( @, lines, get_pts )\r\n\r\n\r\n  # ## Check if this Rectangle intersects with another Rectangle\r\n  # @param `rect` a Rectangle to check\r\n  # @get_pts `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectRectangle: ( rect, get_pts=true ) ->\r\n\r\n    # rectangle intersection check, check for whether it's completely contain\r\n    xi = ( @p1.x >= rect.x ) && ( @x <= rect.p1.x )\r\n    yi = ( @p1.y >= rect.y ) && ( @y <= rect.p1.y )\r\n    zi = ( @p1.z >= rect.z ) && ( @z <= rect.p1.z )\r\n    intersected = (xi && yi && zi)\r\n\r\n    if !get_pts then return intersected\r\n    if @isEnclosed( rect ) then return (if get_pts then [] else true )\r\n\r\n    if !intersected then return []\r\n\r\n    #      pa = new Vector(@max( rect ))\r\n    #      pb = new Vector(@p1.min( rect.p1 ))\r\n\r\n    sidesA = @sides()\r\n    sidesB = rect.sides()\r\n\r\n    pts = []\r\n    for sa in sidesA\r\n      for sb in sidesB\r\n\r\n        p = sa.intersectGridLine( sb )\r\n        if p then pts.push(p)\r\n\r\n    return pts\r\n\r\n\r\n\r\n  # ## Check if this Rectangle intersect with another element\r\n  # @param `item` any object that is based on Point. (Vector, Line, Rectangle, Circle, etc)\r\n  # @eg `rect.hasIntersect( another_circle )` `rect.hasIntersect(line)` `rect.hasIntersect(rect)`\r\n  # @returns an Array of intersection points or a boolean value. (Based on `get_pts` parameter)\r\n  hasIntersect: ( item, get_pts=false ) ->\r\n\r\n    # circle intersection check\r\n    if item instanceof Circle\r\n      return item.intersectLines( @sides(), get_pts )\r\n\r\n    # rectangle bounding box check\r\n    else if item instanceof Rectangle\r\n      return @intersectRectangle( item, get_pts )\r\n\r\n    # polygon intersection check\r\n    else if item instanceof PointSet or item instanceof Triangle\r\n      return @intersectLines(item.sides(), get_pts)\r\n\r\n    # line intersection check\r\n    else if item instanceof Pair\r\n      return @intersectLine( item, get_pts )\r\n\r\n    # point intersection check\r\n    else if item instanceof Point\r\n      return Rectangle.contain( item, @, @p1 )\r\n\r\n    else\r\n      return if get_pts then [] else false\r\n\r\n\r\n  # ## Get the corners of this rectangle as 4 Vectors\r\n  # @return an Object with 4 `Vector` objects as {topLeft, topRight, bottomLeft, bottomRight}\r\n  corners: () -> {\r\n    topLeft: new Vector( Math.min( @x, @p1.x ), Math.min( @y, @p1.y), Math.max( @z, @p1.z) )\r\n    topRight: new Vector( Math.max( @x, @p1.x ), Math.min( @y, @p1.y), Math.min( @z, @p1.z) )\r\n    bottomLeft: new Vector( Math.min( @x, @p1.x ), Math.max( @y, @p1.y), Math.max( @z, @p1.z) )\r\n    bottomRight: new Vector( Math.max( @x, @p1.x ), Math.max( @y, @p1.y), Math.min( @z, @p1.z) )\r\n  }\r\n\r\n\r\n  # ## Get the sides of this rectangle as 4 lines\r\n  # @return an Array of 4 `Line` objects [top, right, bottom, left]\r\n  sides: () ->\r\n    c = @corners()\r\n    return [\r\n      new Line( c.topLeft ).to( c.topRight )\r\n      new Line( c.topRight ).to( c.bottomRight )\r\n      new Line( c.bottomRight ).to( c.bottomLeft )\r\n      new Line( c.bottomLeft ).to( c.topLeft )\r\n    ]\r\n\r\n  # ## Get 4 rectangles from this rectangle by subdividing the quadrants\r\n  # @return an Object with 4 `Rectangle` objects as {topLeft, topRight, bottomLeft, bottomRight}\r\n  quadrants: () ->\r\n    c = @corners()\r\n    return {\r\n      topLeft: new this.__proto__.constructor(  c.topLeft ).to( @center )\r\n      topRight: new this.__proto__.constructor(  c.topRight ).to( @center )\r\n      bottomLeft: new this.__proto__.constructor( c.bottomLeft ).to( @center )\r\n      bottomRight: new this.__proto__.constructor(  c.bottomRight ).to( @center )\r\n    }\r\n\r\n\r\n  # override clone\r\n  clone: () ->\r\n    p = new Rectangle(@).to(@p1)\r\n    p.to( @p1.clone() )\r\n    return p\r\n\r\n\r\n# namespace\r\nthis.Rectangle = Rectangle"]}