{"version":3,"sources":["Space.coffee"],"names":[],"mappings":"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","file":"Space.js","sourceRoot":"/source/","sourcesContent":["# ### Fishes forget their rivers and lakes, said Chuang Tzu. Spaces or contexts give meanings to ideas and lives, but are often overlooked. In Pt, space represents an abstract context in which a point can be made visible in one form or another, and can be specified as an html canvas, a soundscape, or a graffiti robot on a wall. Space is where a concept meets its expression.\r\n\r\nclass Space\r\n\r\n  # ## Create a Space which is the context for displaying and animating elements. Extend this to create specific Spaces, for example, a space for HTML Canvas or SVG.\r\n  # @param `id` an id property to identify this space\r\n  constructor : ( id ) ->\r\n\r\n    if typeof id != 'string' or id.length == 0\r\n      throw \"id parameter is not valid\"\r\n      return false\r\n\r\n    # ## A property to identify this space by name\r\n    @id = id\r\n\r\n    # ## A property to indicate the size of this space as a Vector\r\n    @size = new Vector()\r\n\r\n    # ## A property to indicate the center of this space as a Vector\r\n    @center = new Vector()\r\n\r\n    # animation properties\r\n    @_timePrev = 0 # record prev time\r\n    @_timeDiff = 0 # record prev time difference\r\n    @_timeEnd = -1 # end in milliseconds, -1 to play forever, 0 to end immediately\r\n\r\n    # ## A set of items in this space. An item should implement a function `animate()` and optionally another callback `onSpaceResize(w,h,evt)`, and will be assigned a property `animateID` automatically. (See `add()`)\r\n    @items = {}\r\n\r\n    # item properties\r\n    @_animID = -1\r\n    @_animCount = 0 # player key as increment\r\n    @_animPause = false\r\n    @_refresh = true # refresh on each frame\r\n\r\n\r\n  # ## set whether the rendering should be repainted on each frame\r\n  # @param `b` a boolean value to set whether to repaint each frame\r\n  # @demo space.refresh\r\n  # @return this space\r\n  refresh: (b) ->\r\n    @_refresh = b\r\n    return @\r\n\r\n\r\n  # ## set custom render function (on resize and other events)\r\n  # @return this space\r\n  render: ( context ) ->\r\n    return @\r\n\r\n\r\n  # ## resize the space. (not implemented)\r\n  resize: (w, h) ->\r\n\r\n\r\n  # ## clear all contents in the space (not implemented)\r\n  clear: () ->\r\n\r\n\r\n  # ## Add an item to this space. An item must define a callback function `animate( time, fps, context )` and will be assigned a property `animateID` automatically. An item can also optionally define a callback function `onSpaceResize( w, h, evt )`. Subclasses of Space may define other callback functions.\r\n  # @param an object with an `animate( time, fps, context )` function, and optionall a `onSpaceResize( w, h, evt )` function\r\n  # @demo space.add\r\n  # @return this space\r\n  add : (item) ->\r\n    if item.animate? and typeof item.animate is 'function'\r\n      k = @_animCount++\r\n      @items[k] = item\r\n      item.animateID = k\r\n\r\n      # if player has onSpaceResize defined, call the function\r\n      if item.onSpaceResize? then item.onSpaceResize(@size.x, @size.y)\r\n    else\r\n      throw \"a player object for Space.add must define animate()\"\r\n\r\n    return @\r\n\r\n\r\n  # ## Remove an item from this Space\r\n  # @param an object with an auto-assigned `animateID` property\r\n  # @return this space\r\n  remove : (item) ->\r\n    delete @items[ item.animateID ]\r\n    return @\r\n\r\n\r\n  # ## Remove all items from this Space\r\n  # @return this space\r\n  removeAll : () ->\r\n    @items = {}\r\n    return @\r\n\r\n\r\n  # ## Main play loop. This implements window.requestAnimationFrame and calls it recursively. Override this `play()` function to implemenet your own animation loop.\r\n  # @param `time` current time\r\n  # @return this space\r\n  play : (time=0) ->\r\n\r\n    # use fat arrow here, because rAF callback will change @ to window\r\n    @_animID = requestAnimationFrame( (t) => @play(t) )\r\n\r\n    # if pause\r\n    if @_animPause then return\r\n\r\n    # calc time passed since prev frame\r\n    @_timeDiff = time - @_timePrev\r\n\r\n    # animate this frame\r\n    try\r\n      @_playItems( time )\r\n    catch err\r\n      cancelAnimationFrame( @_animID )\r\n      console.error( err.stack )\r\n      throw err\r\n\r\n\r\n    # store time\r\n    @_timePrev = time\r\n\r\n    return @\r\n\r\n\r\n  # Main animate function. This calls all the items to perform\r\n  # @param `time` current time\r\n  # @return this space\r\n  _playItems : (time) ->\r\n\r\n    # clear before draw if refresh is true\r\n    if @_refresh then @clear()\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    return @\r\n\r\n\r\n  # ## Pause the animation\r\n  # @param `toggle` a boolean value to set if this function call should be a toggle (between pause and resume)\r\n  # @return this space\r\n  pause: ( toggle=false) ->\r\n    @_animPause = if toggle then !@_animPause else true\r\n    return @\r\n\r\n\r\n  # ## Resume the paused animation\r\n  # @return this space\r\n  resume: () ->\r\n    @_animPause = false\r\n    return @\r\n\r\n\r\n  # ## Specify when the animation should stop: immediately, after a time period, or never stops.\r\n  # @param `t` a value in millisecond to specify a time period to play before stopping, or `-1` to play forever, or `0` to end immediately. Default is 0 which will stop the animation immediately.\r\n  # @return this space\r\n  stop : ( t=0 ) ->\r\n    @_timeEnd = t\r\n    return @\r\n\r\n\r\n  # ## Play animation loop, and then stop after `duration` time has passed.\r\n  # @param `duration` a value in millisecond to specify a time period to play before stopping, or `-1` to play forever\r\n  playTime: (duration=5000) ->\r\n    @play()\r\n    @stop( duration )\r\n\r\n\r\n\r\n  # ## Bind event listener in canvas element, for events such as mouse events\r\n  # @param `evt` Event object\r\n  # @param `callback` a callback function for this event\r\n  bindCanvas: ( evt, callback ) ->\r\n    if @space.addEventListener then @space.addEventListener( evt, callback )\r\n\r\n\r\n  # ## A convenient method to bind (or unbind) all mouse events in canvas element. All item added to `items` property that implements an `onMouseAction` callback will receive mouse event callbacks. The types of mouse actions are: \"up\", \"down\", \"move\", \"drag\", \"drop\", \"over\", and \"out\".\r\n  # @param `bind` a boolean value to bind mouse events if set to `true`. If `false`, all mouse events will be unbound. Default is true.\r\n  # @demo canvasspace.bindMouse\r\n  bindMouse: ( _bind=true ) ->\r\n    if @space.addEventListener and @space.removeEventListener\r\n      if _bind\r\n        @space.addEventListener( \"mousedown\", @_mouseDown.bind(@) )\r\n        @space.addEventListener( \"mouseup\", @_mouseUp.bind(@) )\r\n        @space.addEventListener( \"mouseover\", @_mouseOver.bind(@) )\r\n        @space.addEventListener( \"mouseout\", @_mouseOut.bind(@) )\r\n        @space.addEventListener( \"mousemove\", @_mouseMove.bind(@) )\r\n      else\r\n        @space.removeEventListener( \"mousedown\", @_mouseDown.bind(@) )\r\n        @space.removeEventListener( \"mouseup\", @_mouseUp.bind(@) )\r\n        @space.removeEventListener( \"mouseover\", @_mouseOver.bind(@) )\r\n        @space.removeEventListener( \"mouseout\", @_mouseOut.bind(@) )\r\n        @space.removeEventListener( \"mousemove\", @_mouseMove.bind(@) )\r\n\r\n\r\n  # ## A convenient method to bind (or unbind) all mobile touch events in canvas element. All item added to `items` property that implements an `onTouchAction` callback will receive touch event callbacks. The types of touch actions are the same as the mouse actions: \"up\", \"down\", \"move\", and \"out\".\r\n  # @param `bind` a boolean value to bind touch events if set to `true`. If `false`, all touch events will be unbound. Default is true.\r\n  bindTouch: ( _bind=true ) ->\r\n    if @space.addEventListener and @space.removeEventListener\r\n      if _bind\r\n        @space.addEventListener( \"touchstart\", @_mouseDown.bind(@) )\r\n        @space.addEventListener( \"touchend\", @_mouseUp.bind(@) )\r\n        @space.addEventListener( \"touchmove\",\r\n          ((evt) =>\r\n            evt.preventDefault();\r\n            @_mouseMove(evt)\r\n          ) )\r\n        @space.addEventListener( \"touchcancel\", @_mouseOut.bind(@) )\r\n      else\r\n        @space.removeEventListener( \"touchstart\", @_mouseDown.bind(@) )\r\n        @space.removeEventListener( \"touchend\", @_mouseUp.bind(@) )\r\n        @space.removeEventListener( \"touchmove\", @_mouseMove.bind(@) )\r\n        @space.removeEventListener( \"touchcancel\", @_mouseOut.bind(@) )\r\n\r\n\r\n  # ## A convenient method to convert the touch points in a touch event to an array of `Vectors`.\r\n  # @param evt a touch event which contains touches, changedTouches, and targetTouches list.\r\n  # @param which a string to select a touches list: \"touches\", \"changedTouches\", or \"targetTouches\". Default is \"touches\"\r\n  # @return an array of Vectors, whose origin position (0,0) is offset to the top-left of this space.\r\n  touchesToPoints: ( evt, which=\"touches\" ) ->\r\n    if (!evt or !evt[which]) then return []\r\n    return ( new Vector(t.pageX - this.boundRect.left, t.pageY - this.boundRect.top) for t in evt[which] )\r\n\r\n\r\n  # go through all item in `items` and call its onMouseAction callback function\r\n  _mouseAction: (type, evt) ->\r\n    if (evt.touches || evt.changedTouches)\r\n      for k, v of @items\r\n        if v.onTouchAction?\r\n          _c = evt.changedTouches and evt.changedTouches.length > 0\r\n          px = if (_c) then evt.changedTouches.item(0).pageX else 0;\r\n          py = if (_c) then evt.changedTouches.item(0).pageY else 0;\r\n          v.onTouchAction( type, px, py, evt )\r\n    else\r\n      for k, v of @items\r\n        if v.onMouseAction?\r\n          px = evt.offsetX || evt.layerX;\r\n          py = evt.offsetY || evt.layerY;\r\n          v.onMouseAction( type, px, py, evt )\r\n\r\n\r\n  # mouse down action\r\n  _mouseDown: (evt) ->\r\n    @_mouseAction( \"down\", evt )\r\n    @_mdown = true\r\n\r\n\r\n  # mouse up action\r\n  _mouseUp: (evt) ->\r\n    @_mouseAction( \"up\", evt )\r\n    if @_mdrag then @_mouseAction( \"drop\", evt )\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n\r\n  # mouse move action\r\n  _mouseMove: (evt) ->\r\n    @_mouseAction( \"move\", evt )\r\n    if @_mdown\r\n      @_mdrag = true\r\n      @_mouseAction( \"drag\", evt )\r\n\r\n\r\n  # mouse over action\r\n  _mouseOver: (evt) ->\r\n    @_mouseAction( \"over\", evt )\r\n\r\n\r\n  # mouse out action\r\n  _mouseOut: (evt) ->\r\n    @_mouseAction( \"out\", evt )\r\n    if @_mdrag then @_mouseAction( \"drop\", evt )\r\n    @_mdrag = false\r\n\r\n\r\n# namespace\r\nthis.Space = Space\r\n\r\n"]}