{"version":3,"sources":["Space.coffee"],"names":[],"mappings":"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","file":"Space.js","sourceRoot":"/source/","sourcesContent":["# ### A space is a context for Pt elements\r\n\r\nclass Space\r\n\r\n  # ## Create a Space which is the context for displaying and animating elements. Extend this to create specific Spaces, for example, a space for HTML Canvas or SVG.\r\n  # @param `id` an id property to identify this space by name\r\n  constructor : ( id='space' ) ->\r\n\r\n    # ## A property to identify this space by name\r\n    @id = id\r\n\r\n    # ## A render callback function, which needs to be implemented\r\n    @renderer = (ctx) =>\r\n\r\n    # ## A property to specify the size of this space as a Vector\r\n    @size = new Vector()\r\n\r\n    # ## A property to specify the center of this space as a Vector\r\n    @center = new Vector()\r\n\r\n    # animation properties\r\n    @_timePrev = 0 # record prev time\r\n    @_timeDiff = 0 # record prev time difference\r\n    @_timeEnd = -1 # end in milliseconds, -1 to play forever, 0 to end immediately\r\n\r\n    # ## A set of items in this space. An item should implement a function `animate()` and optionally another callback `onSpaceResize(w,h,evt)`, and will be assigned a property `animateID` automatically. (See `add()`)\r\n    @items = {}\r\n\r\n    # item properties\r\n    @_animID = -1\r\n    @_animCount = 0 # player key as increment\r\n    @_animPause = false\r\n    @_refresh = true # refresh on each frame\r\n\r\n\r\n  # ## set whether the rendering should repaint on each frame\r\n  refresh: (b) ->\r\n    @_refresh = b\r\n\r\n\r\n  # ## set custom render function (on resize etc)\r\n  render: ( func ) ->\r\n    @renderer = func\r\n    return @\r\n\r\n  # ## resize the space. (not implemented)\r\n  resize: (w, h) ->\r\n\r\n\r\n  # ## clear all contents in the space (not implemented)\r\n  clear: () ->\r\n\r\n\r\n  # ## Add an item to this space. An item must define a callback function `animate( time, fps, context )` and will be assigned a property `animateID` automatically. An item can also optionally define a callback function `onSpaceResize( w, h, evt )`\r\n  # @param an object with an `animate( time, fps, context )` function, and optionall a `onSpaceResize( w, h, evt )` function\r\n  add : (item) ->\r\n    if item.animate? and typeof item.animate is 'function'\r\n      k = @_animCount++\r\n      @items[k] = item\r\n      item.animateID = k\r\n\r\n      # if player has onSpaceResize defined, call the function\r\n      if item.onSpaceResize? then item.onSpaceResize(@size.x, @size.y)\r\n    else\r\n      throw \"a player object for Space.add must define animate()\"\r\n\r\n    return @\r\n\r\n\r\n  # ## Remove an item from this Space\r\n  # @param an object with an auto-assigned `animateID` property\r\n  remove : (item) ->\r\n    delete @items[ item.animateID ]\r\n    return @\r\n\r\n\r\n  # ## Remove all items from this Space\r\n  removeAll : () ->\r\n    @items = {}\r\n    return @\r\n\r\n\r\n  # ## Main play loop. This implements window.requestAnimationFrame and calls it recursively. Override this `play()` function to implemenet your own animation loop.\r\n  # @param `time` current time\r\n  play : (time=0) ->\r\n\r\n    # use fat arrow here, because rAF callback will change @ to window\r\n    @_animID = requestAnimationFrame( (t) => @play(t) )\r\n\r\n    # if pause\r\n    if @_animPause then return\r\n\r\n    # calc time passed since prev frame\r\n    @_timeDiff = time - @_timePrev\r\n\r\n    # animate this frame\r\n    try\r\n      @_playItems( time )\r\n    catch err\r\n      cancelAnimationFrame( @_animID )\r\n      console.error( err.stack )\r\n      throw err\r\n\r\n\r\n    # store time\r\n    @_timePrev = time\r\n\r\n    return @\r\n\r\n\r\n  # Main animate function. This calls all the items to perform\r\n  _playItems : (time) ->\r\n\r\n    # clear before draw if refresh is true\r\n    if @_refresh then @clear()\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    return @\r\n\r\n\r\n  # ## Pause the animation\r\n  # @param `toggle` a boolean value to set if this function call should be a toggle (between pause and resume)\r\n  pause: ( toggle=false) ->\r\n    @_animPause = if toggle then !@_animPause else true\r\n    return @\r\n\r\n\r\n  # ## Resume the paused animation\r\n  resume: () ->\r\n    @_animPause = false\r\n    return @\r\n\r\n\r\n  # ## Specify when the animation should stop: immediately, after a time period, or never stops.\r\n  # @param `t` a value in millisecond to specify a time period to play before stopping, or `-1` to play forever, or `0` to end immediately. Default is 0 which will stop the animation immediately.\r\n  stop : ( t=0 ) ->\r\n    @_timeEnd = t\r\n    return @\r\n\r\n\r\n  # ## Play animation loop, and then stop after `duration` time has passed.\r\n  # @param `duration` a value in millisecond to specify a time period to play before stopping, or `-1` to play forever\r\n  playTime: (duration=5000) ->\r\n    @play()\r\n    @stop( duration )\r\n\r\n\r\n\r\n# namespace\r\nthis.Space = Space\r\n\r\n"]}