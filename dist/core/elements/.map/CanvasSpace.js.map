{"version":3,"sources":["CanvasSpace.coffee"],"names":[],"mappings":"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","file":"CanvasSpace.js","sourceRoot":"/source/","sourcesContent":["# ### CanvasSpace is a space that represents a html canvas. It creates a new canvas or get an existing one in DOM by its `id` attribute. It also provide methods specific to html canvas, such as tracking resize and mouse position.\r\n\r\nclass CanvasSpace extends Space\r\n\r\n  # ## Create a CanvasSpace which represents a HTML Canvas Space\r\n  # @param `id` an id property which refers to the \"id\" attribute of the canvas element in DOM. If no canvas element with this id is found, a new canvas element will be created.\r\n  # @param `bgcolor` a background color string to specify the canvas background. Default is `false` which shows a transparent background.\r\n  # @param `context` a string of canvas context type, such as \"2d\" or \"webgl\". Default is \"2d\"\r\n  constructor : ( id='pt_space', bgcolor=false, context='2d' ) ->\r\n    super\r\n\r\n    # ## A property to store canvas DOM element\r\n    @space = document.querySelector(\"#\"+@id)\r\n\r\n    @bound = null\r\n    @boundRect = {top: 0, left: 0, width: 0, height: 0}\r\n    @pixelScale = 1\r\n\r\n    # ## A boolean property to track if the canvas element is added to dom or not\r\n    @appended = true\r\n\r\n    # either get existing one in the DOM or create a new one\r\n    if !@space\r\n      @space = document.createElement(\"canvas\")\r\n      @space.setAttribute(\"id\", @id)\r\n      @appended = false\r\n\r\n    # Track mouse dragging\r\n    @_mdown = false\r\n    @_mdrag = false\r\n\r\n    # A property to store canvas background color\r\n    @bgcolor = bgcolor\r\n\r\n    # A property to store canvas rendering contenxt\r\n    @ctx = @space.getContext( context )\r\n\r\n\r\n  # ## Place a new canvas element into a container dom element. When canvas is ready, a \"ready\" event will be fired. Track this event with `space.canvas.addEventListener(\"ready\")`\r\n  # @param `parent_id` the DOM element into which the canvas element should be appended\r\n  # @param `readyCallback` a callback function with parameters `width`, `height`, and `canvas_element`, which will get called when canvas is appended and ready.\r\n  # @param `devicePixelSupport` a boolean to set if device pixel scaling should be checked. This may make drawings on retina displays look sharper. Default is `true`.\r\n  # @return this CanvasSpace\r\n  display: ( parent_id=\"#pt\", readyCallback, devicePixelSupport=true ) ->\r\n    if not @appended\r\n\r\n      # @bound\r\n      @bound = document.querySelector(parent_id)\r\n      @boundRect = @bound.getBoundingClientRect()\r\n\r\n      # check for retina pixel ratio\r\n      @pixelScale = 1;\r\n      if (devicePixelSupport)\r\n        r1 = window.devicePixelRatio or 1\r\n        r2 = @ctx.webkitBackingStorePixelRatio or @ctx.mozBackingStorePixelRatio or @ctx.msBackingStorePixelRatio or @ctx.oBackingStorePixelRatio or @ctx.backingStorePixelRatio || 1;\r\n        @pixelScale = r1/r2\r\n\r\n      if @bound\r\n        # resize to fit bound\r\n        @resize( @boundRect.width, @boundRect.height )\r\n        @autoResize(true)\r\n\r\n        # add to parent dom if not existing\r\n        if @space.parentNode != @bound\r\n          @bound.appendChild( @space )\r\n\r\n        @appended = true\r\n\r\n        # fire ready event\r\n        setTimeout( (\r\n            () ->\r\n              @space.dispatchEvent( new Event('ready') )\r\n              if readyCallback\r\n                readyCallback( @boundRect.width, @boundRect.height,  @space )\r\n\r\n          ).bind(@)\r\n        )\r\n\r\n\r\n      else\r\n        throw 'Cannot add canvas to element '+parent_id\r\n\r\n    return this\r\n\r\n\r\n  # window resize handler\r\n  _resizeHandler: (evt) =>\r\n    @boundRect = @bound.getBoundingClientRect()\r\n    @resize( @boundRect.width, @boundRect.height, evt )\r\n\r\n\r\n  # ## Set whether the canvas element should resize when its container is resized. Default will auto size\r\n  # @param `auto` a boolean value indicating if auto size is set. Default is `true`.\r\n  # @return this CanvasSpace\r\n  autoResize: (auto=true) ->\r\n    # listen/unlisten for window resize event and callback\r\n    if (auto)\r\n      window.addEventListener( 'resize', @_resizeHandler )\r\n    else\r\n      window.removeEventListener( 'resize', @_resizeHandler )\r\n\r\n    return @\r\n\r\n  # ## This overrides Space's `resize` function. It's a callback function for window's resize event. Keep track of this with `onSpaceResize(w,h,evt)` callback in your added objects.\r\n  # @demo canvasspace.resize\r\n  # @return this CanvasSpace\r\n  resize: (w, h, evt) ->\r\n\r\n    w = Math.floor(w)\r\n    h = Math.floor(h)\r\n\r\n    @size.set(w, h)\r\n    @center = new Vector( w/2, h/2 )\r\n    @boundRect.width = w\r\n    @boundRect.height = h\r\n\r\n    # if retina, resize the canvas size and rescale\r\n    @space.width = w * @pixelScale\r\n    @space.height = h * @pixelScale\r\n    @space.style.width = w + \"px\"\r\n    @space.style.height = h + \"px\"\r\n\r\n    if (@pixelScale != 1)\r\n      @ctx.scale( @pixelScale, @pixelScale )\r\n\r\n\r\n    # player resize callback\r\n    for k, p of @items\r\n      if p.onSpaceResize? then p.onSpaceResize(w, h, evt)\r\n\r\n    # repaint canvas\r\n    @render( @ctx )\r\n\r\n    return @\r\n\r\n\r\n  # ## Clear the canvas with its background color. Overrides Space's `clear` function.\r\n  # @param `bg` Optionally specify a custom background color. If evaluated to false, it will use its `bgcolor` property as background color.\r\n  # @return this CanvasSpace\r\n  clear: ( bg ) ->\r\n\r\n    if bg then @bgcolor = bg\r\n\r\n    lastColor = @ctx.fillStyle\r\n\r\n    if @bgcolor\r\n      @ctx.fillStyle = @bgcolor;\r\n      @ctx.fillRect( 0, 0, @size.x, @size.y )\r\n    else\r\n      @ctx.clearRect( 0, 0, @size.x, @size.y )\r\n\r\n    @ctx.fillStyle = lastColor\r\n\r\n    return @\r\n\r\n\r\n\r\n  # ## Overrides Space's `animate` function for canvas\r\n  # @param `time` current time\r\n  # @return this CanvasSpace\r\n  animate : (time) ->\r\n\r\n\r\n    @ctx.save()\r\n\r\n    if @_refresh then @clear()\r\n\r\n    # animate all players\r\n    for k, v of @items\r\n      v.animate( time, @_timeDiff, @ctx )\r\n\r\n    # stop if time ended\r\n    if @_timeEnd >= 0 and time > @_timeEnd\r\n      cancelAnimationFrame( @_animID )\r\n\r\n    @ctx.restore()\r\n\r\n    return @\r\n\r\n\r\n# namescape\r\nthis.CanvasSpace = CanvasSpace"]}