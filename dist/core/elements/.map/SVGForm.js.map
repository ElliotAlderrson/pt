{"version":3,"sources":["SVGForm.coffee"],"names":[],"mappings":"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","file":"SVGForm.js","sourceRoot":"/source/","sourcesContent":["# ### `SVGForm` visualizes forms in the `SVGSpace`.\r\nclass SVGForm\r\n\r\n  @_domId = 0\r\n\r\n  # ## Create a new Form which is based on SVG\r\n  # @param `space` A space that has a valid context for this form. In this case, the space should represent an svg.\r\n  # @return a new Form object\r\n  constructor: ( space ) ->\r\n\r\n    # ## a property to reference the space's rendering context\r\n    @cc = space.ctx || {}\r\n\r\n    # keep track of dom id names\r\n    @cc.group = @cc.group || null\r\n    @cc.groupID = \"ptx\"\r\n    @cc.groupCount = 0\r\n    @cc.currentID = \"ptx0\"\r\n\r\n    # default style or false for no fill\r\n    @cc.style = {\r\n      fill: \"#999\"\r\n      stroke: \"#666\"\r\n      \"stroke-width\": 1\r\n      \"stroke-linejoin\": false\r\n      \"stroke-linecap\": false\r\n    }\r\n    @cc.font = \"11px sans-serif\"\r\n\r\n    # ## a property to specify the current font size\r\n    @cc.fontSize = 11\r\n\r\n    # ## a property to specify the current font face\r\n    @cc.fontFace = \"sans-serif\"\r\n\r\n\r\n  # ## Set current fill style\r\n  # @param `c` fill color. Default is `false` (transparent)\r\n  # @eg `form.fill(\"#F90\")` `form.fill(\"rgba(0,0,0,.5\")` `form.fill(false)`\r\n  # @return this Form\r\n  fill: (c) ->\r\n    @cc.style.fill = if c then c else false\r\n    return @\r\n\r\n\r\n  # ## Set current stroke style\r\n  # @param `c` stroke color. Default is false (transparent)\r\n  # @param `width` Optional value (can be floating point) to set line width\r\n  # @param `joint` Optional string to set line joint style. Can be \"miter\", \"bevel\", or \"round\".\r\n  # @eg `form.stroke(\"#F90\")` `form.stroke(\"rgba(0,0,0,.5\")` `form.stroke(false)` `form.stroke(\"#000\", 0.5, 'round')`\r\n  # @return this Form\r\n  stroke: (c, width, joint, cap) ->\r\n    @cc.style.stroke = if c then c else false\r\n    if width then @cc.style[\"stroke-width\"] = width\r\n    if joint then @cc.style[\"stroke-linejoin\"] = joint\r\n    if cap then @cc.style[\"stroke-linecap\"] = joint\r\n    return @\r\n\r\n\r\n  # ## Set this form's group scope by an ID, and optionally define the group's parent element. A group scope keeps track of DOM elements by their generated IDs, and updates their properties as needed. See also `enterScope()`.\r\n  # @param `group_id` a string to use as prefix for the group's id. For example, group_id \"hello\" will create elements with id like \"hello-1\", \"hello-2\", etc\r\n  # @param `group` optional dom element to define this group's parent element\r\n  # @eg `form.scope(\"dot\")` `form.scope(\"dot\", elem)`\r\n  # @demo svgform.scope\r\n  # @return context object\r\n  scope: ( group_id, group=false ) ->\r\n    if (group) then @cc.group = group\r\n    @cc.groupID = group_id\r\n    @cc.groupCount = 0\r\n\r\n    @nextID()\r\n    return @cc\r\n\r\n\r\n  # ## Set the current group scope to an item added into space, in order to keep track of any point, circle, etc created within it. The item must have an `animateID` property, so that elements created within the item will have generated IDs like \"item-{animateID}-{count}\".\r\n  # @param `item` an item that's added to space (see `space.add(...)`) and has an `animateID` property\r\n  # @return context object\r\n  enterScope: ( item ) ->\r\n    if (!item || item.animateID == null )\r\n      throw \"getScope()'s item must be added to a Space, and has an animateID property. Otherwise, use scope() instead.\"\r\n    return @scope( SVGForm._scopeID( item ) )\r\n\r\n\r\n  # ## `getScope(...)` function is deprecated as of 0.2.0. Use `enterScope()` instead.\r\n  getScope: ( item ) ->\r\n    if !@_warn1\r\n      console.warn( \"form.getScope(...) function is deprecated as of version 0.2.0. It is renamed as `enterScope()`.\" )\r\n      @_warn1 = true\r\n    return @enterScope( item )\r\n\r\n\r\n  # ## Get next available id in the current group\r\n  # @return an id string\r\n  nextID: () ->\r\n    @cc.groupCount++\r\n    @cc.currentID = @cc.groupID+\"-\"+@cc.groupCount\r\n    return @cc.currentID\r\n\r\n\r\n  # ## A static function to context\r\n  @id: (ctx) ->\r\n    return ctx.currentID || \"p-\"+SVGForm._domId++\r\n\r\n\r\n  # compose a scope id\r\n  @_scopeID: (item) ->\r\n    return \"item-\"+item.animateID\r\n\r\n  # ## A static function to help adding style object to an element. This put all styles into `style` attribute instead of individual attributes, so that the styles can be parsed by Adobe Illustrator.\r\n  # @param `elem` a dom element to add to\r\n  # @param `styles` an object of style properties\r\n  # @eg `SVGForm.style(elem, {fill: \"#f90\", stroke: false})`\r\n  @style: (elem, styles) ->\r\n    st = []\r\n\r\n    for k,v of styles\r\n      if (!v)\r\n        if (k==\"fill\")\r\n          st.push( \"fill: none\" )\r\n        else if (k==\"stroke\")\r\n          st.push( \"stroke: none\" )\r\n      else\r\n        st.push( k+\":\"+v )\r\n\r\n    return DOMSpace.attr( elem, {style: st.join(\";\")} )\r\n\r\n\r\n  # ## A static function to draw a point\r\n  # @param `ctx` rendering context object\r\n  # @param `pt` a Point object\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  # @param `circle` a boolean value to specify if the points should be drawn as a circle. Default to false.\r\n  @point: (ctx, pt, halfsize=2, fill=true, stroke=true, circle=false ) ->\r\n\r\n    elem = SVGSpace.svgElement( ctx.group, (if (circle) then \"circle\" else \"rect\"), SVGForm.id(ctx) )\r\n    if (!elem) then return;\r\n\r\n    if (circle)\r\n      DOMSpace.attr( elem, {\r\n        cx: pt.x\r\n        cy: pt.y\r\n        r: halfsize\r\n      })\r\n    else\r\n      DOMSpace.attr( elem, {\r\n        x: pt.x - halfsize\r\n        y: pt.y - halfsize\r\n        width: halfsize + halfsize\r\n        height: halfsize + halfsize\r\n      })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a point\r\n  # @param `p` a Point object\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `isCircle` a boolean value to specify if the point should be drawn as a circle. Default is false.\r\n  # @return this Form\r\n  point: (p, halfsize=2, isCircle=false) ->\r\n    @nextID()\r\n    SVGForm.point(@cc, p, halfsize, true, true, isCircle )\r\n    return @\r\n\r\n\r\n  # ## A static function similar to `SVGForm.point()` but draw a series of points\r\n  # @param `ctx` rendering context object\r\n  # @param `pts` an array of Points\r\n  # @param `halfsize, fill, stroke, circle` same parameters as in `SVGForm.point()`\r\n  @points: (ctx, pts, halfsize=2, fill=true, stroke=true, circle=false ) ->\r\n    return (SVGForm.point( ctx, p, halfsize, fill, stroke, circle ) for p in pts)\r\n\r\n\r\n  # ## Draw a series of points\r\n  # @param `ps` an array of Points\r\n  # @param `halfsize` radius or half size of the point. Default is 2.\r\n  # @param `isCircle` a boolean value to specify if the point should be drawn as a circle. Default is false.\r\n  # @return this Form\r\n  points: (ps, halfsize=2, isCircle=false) ->\r\n    for p in ps\r\n      @point(p, halfsize, isCircle )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a line\r\n  # @param `ctx` rendering context object\r\n  # @param `pair` a Pair object\r\n  @line: (ctx, pair) ->\r\n    if !pair.p1 then throw \"#{pair.toString()} is not a Pair\"\r\n    elem = SVGSpace.svgElement( ctx.group, \"line\", SVGForm.id(ctx) )\r\n\r\n    DOMSpace.attr( elem, {\r\n      x1: pair.x\r\n      y1: pair.y\r\n      x2: pair.p1.x\r\n      y2: pair.p1.y\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a line\r\n  # @param `p` a Pair object\r\n  # @return this Form\r\n  line: (p) ->\r\n    @nextID()\r\n    SVGForm.line( @cc, p )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a line\r\n  # @param `ctx` rendering context object\r\n  # @param `pairs` an array of Pair objects\r\n  @lines: (ctx, pairs) ->\r\n    return ( SVGForm.line( ctx, ln ) for ln in pairs )\r\n\r\n\r\n  # ## Draw a series of lines\r\n  # @param `ps` an array of Lines\r\n  # @return this Form\r\n  lines: (ps) ->\r\n    for p in ps\r\n      @line(p)\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a rectangle\r\n  # @param `ctx` rendering context object\r\n  # @param `pair` a Pair object\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @rect: (ctx, pair, fill=true, stroke=true) ->\r\n    if !pair.p1 then throw \"#{pair.toString() is not a Pair}\"\r\n    elem = SVGSpace.svgElement( ctx.group, \"rect\", SVGForm.id(ctx) )\r\n\r\n    size = pair.size()\r\n    DOMSpace.attr( elem, {\r\n      x: pair.x\r\n      y: pair.y\r\n      width: size.x\r\n      height: size.y\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a rectangle\r\n  # @param `p` a Pair object\r\n  # @return this Form\r\n  rect: (p, checkBounds=true) ->\r\n    @nextID()\r\n    r = if (checkBounds) then p.bounds() else p\r\n    SVGForm.rect( @cc, r )\r\n    return @\r\n\r\n\r\n  # ## A static  function to draw a circle\r\n  # @param `ctx` rendering context object\r\n  # @param `c` a Circle object\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @circle: (ctx, c, fill=true, stroke=false) ->\r\n\r\n    elem = SVGSpace.svgElement( ctx.group, \"circle\", SVGForm.id(ctx) )\r\n    if (!elem) then return\r\n\r\n    DOMSpace.attr( elem, {\r\n      cx: c.x\r\n      cy: c.y\r\n      r: c.radius\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a circle\r\n  # @param `c` a Circle object\r\n  # @demo svgform.circle\r\n  # @return this Form\r\n  circle: (c) ->\r\n    @nextID()\r\n    SVGForm.circle( @cc, c )\r\n    return @\r\n\r\n\r\n\r\n  # ## A static function to draw a polygon\r\n  # @param `ctx` rendering context object\r\n  # @param `pts` an array of Points\r\n  # @param `closePath` a boolean value to specify if the path should be closed (joining last point with first point)\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @polygon: ( ctx, pts, closePath=true, fill=true, stroke=true) ->\r\n\r\n    elem = SVGSpace.svgElement( ctx.group, (if (closePath) then \"polygon\" else \"polyline\"), SVGForm.id(ctx) )\r\n    if (!elem) then return\r\n\r\n    if pts.length <= 1 then return;\r\n\r\n    points = (\"#{pts[i].x},#{pts[i].y}\" for i in [0...pts.length] by 1)\r\n    DOMSpace.attr( elem, {\r\n      points: points.join(\" \")\r\n    })\r\n\r\n    SVGForm.style(elem, ctx.style)\r\n    return elem\r\n\r\n\r\n  # ## Draw a polygon\r\n  # @param `ps` an array of Points\r\n  # @param `closePath` a boolean value to specify if the path should be closed (joining last point with first point)\r\n  # @return this Form\r\n  polygon: (ps, closePath) ->\r\n    @nextID()\r\n    SVGForm.polygon( @cc, ps, closePath)\r\n    return @\r\n\r\n  # ## A static function to draw a triangle\r\n  # @param `ctx` rendering context object\r\n  # @param `tri` a Triangle object\r\n  # @param `fill` not used - already defined in ctx\r\n  # @param `stroke` not used - already defined in ctx\r\n  @triangle: ( ctx, tri, fill=true, stroke=false) ->\r\n    return SVGForm.polygon(ctx, tri.toArray() )\r\n\r\n\r\n  # ## Draw a triangle\r\n  # @param `tri` a Triangle object\r\n  # @return this Form\r\n  triangle: (tri) ->\r\n    @nextID()\r\n    SVGForm.triangle( @cc, tri )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw a curve as straight polygon segments. In future, this should be converted to bezier curves.\r\n  # @param `ctx` rendering context object\r\n  # @param `pts` an array of Points\r\n  @curve: ( ctx, pts, closePath=false ) ->\r\n    SVGForm.polygon( ctx, pts, closePath )\r\n\r\n\r\n  # ## Draw a curve\r\n  # @param `ps` an array of Points\r\n  # @return this Form\r\n  curve: (ps, closePath=false ) ->\r\n    @nextID()\r\n    SVGForm.curve( @cc, ps, closePath )\r\n    return @\r\n\r\n\r\n  # ## A static function to draw text\r\n  # @param `ctx` rendering context object\r\n  # @param `pt` a Point object to specify the anchor point\r\n  # @param `txt` a string of text to draw\r\n  # @param `maxWidth` not applicable in svg\r\n  # @param `dx` optional shift in x position\r\n  # @param `dy` optional shift in y position\r\n  @text: ( ctx, pt, txt, maxWidth=0, dx=0, dy=0 ) ->\r\n    elem = SVGSpace.svgElement( ctx.group, \"text\", SVGForm.id(ctx) )\r\n    if (!elem) then return\r\n\r\n    DOMSpace.attr( elem, {\r\n      \"pointer-events\": \"none\",\r\n      x: pt.x,\r\n      y: pt.y,\r\n      dx: 0,\r\n      dy: 0\r\n    })\r\n\r\n    elem.textContent = txt\r\n\r\n    SVGForm.style(elem, {\r\n      fill: ctx.style.fill\r\n      stroke: ctx.style.stroke\r\n      \"font-family\": ctx.fontFace or false\r\n      \"font-size\": ctx.fontSize or false\r\n    })\r\n    return elem\r\n\r\n\r\n  # ## Draw text\r\n  # @param `p` a Point to specify anchor position\r\n  # @param `txt` a string of text\r\n  # @param `maxWidth` not applicable in svg\r\n  # @param `xoff, yoff` x and y positional offset values\r\n  text: (p, txt, maxWidth=1000, xoff, yoff) ->\r\n    @nextID()\r\n    SVGForm.text( @cc, p, txt, maxWidth, xoff, yoff)\r\n    return @\r\n\r\n\r\n\r\n  # ## Set font size and font face\r\n  # @param `size` an integer value to specify font size in pixels\r\n  # @param `face` optional name to change the font face, such as \"sans-serif\" or \"Helvetica\"\r\n  # @eg `form.font(24)` `form.font(12, \"Georgia\")`\r\n  # @return this Form\r\n  font: (size, face=false) ->\r\n    @cc.fontFace = face\r\n    @cc.fontSize = size\r\n    @cc.font = \"#{size}px #{face}\"\r\n    return @\r\n\r\n\r\n  # ## Draw a shape. Defaults to `sketch()`. Override this function to draw differently.\r\n  # @return this Form\r\n  draw: ( shape ) ->\r\n    @sketch( shape )\r\n\r\n\r\n  # ## Default draw based on the types of shape (Point, Line, Circle, etc)\r\n  # @param `shape` any shape such as `Point` or `Line`, or an array of Points\r\n  # @return this Form\r\n  sketch: ( shape ) ->\r\n    shape.floor()\r\n\r\n    if shape instanceof Circle\r\n      SVGForm.circle(@cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Rectangle\r\n      SVGForm.rect( @cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Triangle\r\n      SVGForm.triangle( @cc, shape, @filled, @stroked)\r\n\r\n    else if shape instanceof Line or shape instanceof Pair\r\n      SVGForm.line(@cc, shape)\r\n\r\n    else if shape instanceof PointSet\r\n      SVGForm.polygon(@cc, shape.points )\r\n\r\n    else if shape instanceof Vector or shape instanceof Point\r\n      SVGForm.point(@cc, shape)\r\n\r\n\r\n    return @\r\n\r\n\r\n# namespace\r\nthis.SVGForm = SVGForm"]}