{"version":3,"sources":["Triangle.coffee"],"names":[],"mappings":"AACA,IAAA,QAAA;EAAA;;;AAAM;;;EAMS,kBAAA;IACX,2CAAA,SAAA;IAGA,IAAC,CAAA,EAAD,GAAU,IAAA,MAAA,CAAQ,IAAC,CAAA,CAAD,GAAG,CAAX,EAAc,IAAC,CAAA,CAAD,GAAG,CAAjB,EAAoB,IAAC,CAAA,CAArB;IAGV,IAAC,CAAA,EAAD,GAAU,IAAA,MAAA,CAAQ,IAAC,CAAA,CAAD,GAAG,CAAX,EAAc,IAAC,CAAA,CAAD,GAAG,CAAjB,EAAoB,IAAC,CAAA,CAArB;EAPC;;qBAcb,OAAA,GAAQ,SAAE,IAAF;IAEN,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;MAGE,IAAG,OAAO,SAAU,CAAA,CAAA,CAAjB,KAAuB,QAAvB,IAAoC,SAAS,CAAC,MAAV,KAAoB,CAA3D;QACI,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAS,SAAU,CAAA,CAAA,CAAnB;QACA,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAS,SAAU,CAAA,CAAA,CAAnB,EAFJ;OAAA,MAAA;QAME,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;UACE,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAS,CAAC,SAAU,CAAA,CAAA,CAAX,EAAe,SAAU,CAAA,CAAA,CAAzB,CAAT;UACA,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAS,CAAC,SAAU,CAAA,CAAA,CAAX,EAAe,SAAU,CAAA,CAAA,CAAzB,CAAT,EAFF;SAAA,MAAA;UAIE,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAS,CAAC,SAAU,CAAA,CAAA,CAAX,EAAe,SAAU,CAAA,CAAA,CAAzB,EAA6B,SAAU,CAAA,CAAA,CAAvC,CAAT;UACA,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAS,CAAC,SAAU,CAAA,CAAA,CAAX,EAAe,SAAU,CAAA,CAAA,CAAzB,EAA6B,SAAU,CAAA,CAAA,CAAvC,CAAT,EALF;SANF;OAHF;;AAgBA,WAAO;EAlBD;;qBAuBR,OAAA,GAAS,SAAA;WAAM,CAAC,IAAD,EAAI,IAAC,CAAA,EAAL,EAAS,IAAC,CAAA,EAAV;EAAN;;qBAIT,QAAA,GAAS,SAAA;WAAM,YAAA,GAAa,IAAC,CAAA,CAAd,GAAgB,IAAhB,GAAoB,IAAC,CAAA,CAArB,GAAuB,IAAvB,GAA2B,IAAC,CAAA,CAA5B,GAA8B,MAA9B,GAAoC,IAAC,CAAA,EAAE,CAAC,CAAxC,GAA0C,IAA1C,GAA8C,IAAC,CAAA,EAAE,CAAC,CAAlD,GAAoD,IAApD,GAAwD,IAAC,CAAA,EAAE,CAAC,CAA5D,GAA8D,MAA9D,GAAoE,IAAC,CAAA,EAAE,CAAC,CAAxE,GAA0E,IAA1E,GAA8E,IAAC,CAAA,EAAE,CAAC,CAAlF,GAAoF,IAApF,GAAwF,IAAC,CAAA,EAAE,CAAC,CAA5F,GAA8F;EAApG;;qBAKT,UAAA,GAAY,SAAA;AACV,QAAA;IAAA,EAAA,GAAS,IAAA,MAAA,CAAO,IAAP;AACT,WAAW,IAAA,QAAA,CAAU,EAAV,CAAc,CAAC,OAAf,CAAwB,CAAC,EAAD,EAAK,IAAC,CAAA,EAAN,EAAU,IAAC,CAAA,EAAX,CAAxB;EAFD;;qBAOZ,KAAA,GAAO,SAAA;AACL,WAAO,CACD,IAAA,IAAA,CAAK,IAAL,CAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,EAAjB,CADC,EAED,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAC,CAAA,EAAnB,CAFC,EAGD,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAlB,CAHC;EADF;;qBAWP,MAAA,GAAQ,SAAE,IAAF;AACN,QAAA;;MADQ,OAAK,KAAK,CAAC;;IACnB,MAAA,GAAS,CACP,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAe,IAAf,CAAkB,CAAC,YAAnB,CAAiC,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAe,IAAf,CAAjC,EAAqD,IAArD,CADO,EAEP,IAAC,CAAA,SAAD,CAAY,IAAC,CAAA,EAAb,CAAiB,CAAC,YAAlB,CAAgC,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAe,IAAC,CAAA,EAAhB,CAAhC,EAAsD,IAAtD,CAFO;IAIT,MAAM,CAAC,IAAP,CAAa,IAAI,CAAC,EAAL,GAAU,MAAO,CAAA,CAAA,CAAjB,GAAsB,MAAO,CAAA,CAAA,CAA1C;AACA,WAAO;EAND;;qBAWR,MAAA,GAAQ,SAAA;AACN,QAAA;IAAA,KAAA,GAAQ,IAAC,CAAA,KAAD,CAAA;IACR,GAAA;;AAAQ;WAAA,uCAAA;;qBAAA,IAAI,CAAC,QAAL,CAAA;AAAA;;;AACR,WAAW,IAAA,QAAA,CAAU,GAAI,CAAA,CAAA,CAAd,CAAkB,CAAC,OAAnB,CAA4B,GAAI,CAAA,CAAA,CAAhC,EAAoC,GAAI,CAAA,CAAA,CAAxC;EAHL;;qBAQR,SAAA,GAAW,SAAA;AACT,QAAA;IAAA,KAAA,GAAQ,IAAC,CAAA,KAAD,CAAA;IACR,IAAA,GAAO,CACL,KAAM,CAAA,CAAA,CAAE,CAAC,MAAT,CAAA,CADK,EAEL,KAAM,CAAA,CAAA,CAAE,CAAC,MAAT,CAAA,CAFK,EAGL,KAAM,CAAA,CAAA,CAAE,CAAC,MAAT,CAAA,CAHK;AAKP,WAAO;MACL,KAAA,EAAO,KADF;MAEL,KAAA,EAAO,IAAK,CAAA,CAAA,CAAL,GAAU,IAAK,CAAA,CAAA,CAAf,GAAoB,IAAK,CAAA,CAAA,CAF3B;MAGL,OAAA,EAAS,IAHJ;;EAPE;;qBAgBX,IAAA,GAAM,SAAA;AACJ,QAAA;IAAA,CAAA,GAAI,IAAC,CAAA,SAAD,CAAA;IACJ,EAAA,GAAK,CAAC,CAAC,KAAF,GAAU;AACf,WAAO;MACL,KAAA,EAAO,IAAI,CAAC,IAAL,CAAY,EAAA,GAAK,CAAC,EAAA,GAAG,CAAC,CAAC,OAAQ,CAAA,CAAA,CAAd,CAAL,GAAyB,CAAC,EAAA,GAAG,CAAC,CAAC,OAAQ,CAAA,CAAA,CAAd,CAAzB,GAA6C,CAAC,EAAA,GAAG,CAAC,CAAC,OAAQ,CAAA,CAAA,CAAd,CAAzD,CADF;MAEL,SAAA,EAAW,CAFN;;EAHH;;qBAaN,YAAA,GAAc,SAAE,EAAF;IACZ,IAAG,EAAA,KAAI,IAAP;AACE,aAAW,IAAA,IAAA,CAAK,IAAL,CAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,EAAjB,EADb;KAAA,MAEK,IAAG,EAAA,KAAM,IAAT;AACH,aAAW,IAAA,IAAA,CAAK,IAAL,CAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,EAAjB,EADR;KAAA,MAAA;AAGH,aAAW,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAC,CAAA,EAAnB,EAHR;;EAHO;;qBAad,aAAA,GAAe,SAAC,EAAD;IACb,IAAG,EAAA,KAAI,IAAP;AACE,aAAO,CAAK,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAlB,CAAL,EAA+B,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAC,CAAA,EAAnB,CAA/B,EADT;KAAA,MAEK,IAAG,EAAA,KAAM,IAAT;AACH,aAAO,CAAK,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAlB,CAAL,EAA+B,IAAA,IAAA,CAAK,IAAC,CAAA,EAAN,CAAS,CAAC,OAAV,CAAkB,IAAC,CAAA,EAAnB,CAA/B,EADJ;KAAA,MAAA;AAGH,aAAO,CAAK,IAAA,IAAA,CAAK,IAAL,CAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,EAAjB,CAAL,EAA+B,IAAA,IAAA,CAAK,IAAL,CAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,EAAjB,CAA/B,EAHJ;;EAHQ;;qBAaf,QAAA,GAAU,SAAC,EAAD,EAAK,MAAL,EAAmB,IAAnB;AACR,QAAA;;MADa,SAAO;;;MAAO,OAAK;;IAChC,EAAA,GAAK,IAAC,CAAA,aAAD,CAAe,EAAf;IACL,CAAA,GAAQ,IAAA,MAAA,CAAO,EAAG,CAAA,CAAA,CAAV;IACR,EAAG,CAAA,CAAA,CAAE,CAAC,MAAN,CAAa,CAAb,EAAe,CAAf;IACA,EAAG,CAAA,CAAA,CAAE,CAAC,MAAN,CAAa,CAAb,EAAe,CAAf;IACA,EAAA,GAAK,EAAG,CAAA,CAAA,CAAE,CAAC,EAAE,CAAC,MAAT,CAAgB,EAAG,CAAA,CAAA,CAAE,CAAC,EAAtB;IAEE,IAAG,MAAH;aAAmB,IAAA,IAAA,CAAK,CAAL,CAAO,CAAC,OAAR,CAAiB,EAAE,CAAC,QAAH,CAAY,IAAZ,CAAiB,CAAC,GAAlB,CAAsB,CAAtB,CAAjB,EAAnB;KAAA,MAAA;aAAoE,GAApE;;EAPC;;qBAcV,QAAA,GAAU,SAAE,EAAF;IACR,IAAG,EAAA,KAAI,IAAJ,IAAY,EAAA,KAAI,IAAnB;AACE,aAAW,IAAA,IAAA,CAAK,IAAE,CAAA,EAAA,CAAP,CAAW,CAAC,OAAZ,CAAqB,IAAC,CAAA,YAAD,CAAc,EAAd,CAAiB,CAAC,yBAAlB,CAA6C,IAAE,CAAA,EAAA,CAA/C,CAArB,EADb;KAAA,MAAA;AAGE,aAAW,IAAA,IAAA,CAAK,IAAL,CAAO,CAAC,OAAR,CAAiB,IAAC,CAAA,YAAD,CAAA,CAAe,CAAC,yBAAhB,CAA2C,IAA3C,CAAjB,EAHb;;EADQ;;qBASV,QAAA,GAAW,SAAA;AACT,QAAA;IAAA,EAAA,GAAK,IAAC,CAAA,OAAD,CAAS,CAAT;IACL,EAAA,GAAK,IAAC,CAAA,EAAE,CAAC,OAAJ,CAAY,CAAZ;IACL,EAAA,GAAK,IAAC,CAAA,EAAE,CAAC,OAAJ,CAAY,CAAZ;AACL,WAAW,IAAA,MAAA,CAAO,EAAE,CAAC,CAAH,GAAK,EAAE,CAAC,CAAR,GAAU,EAAE,CAAC,CAApB,EAAuB,EAAE,CAAC,CAAH,GAAK,EAAE,CAAC,CAAR,GAAU,EAAE,CAAC,CAApC,EAAuC,EAAE,CAAC,CAAH,GAAK,EAAE,CAAC,CAAR,GAAU,EAAE,CAAC,CAApD;EAJF;;qBASX,WAAA,GAAa,SAAA;AACX,QAAA;IAAA,CAAA,GAAI,IAAC,CAAA,QAAD,CAAA;IACJ,CAAA,GAAI,IAAC,CAAA,QAAD,CAAU,IAAV;AACJ,WAAO,CAAC,CAAC,aAAF,CAAiB,CAAjB,EAAoB,KAAK,CAAC,GAA1B;EAHI;;qBAOb,QAAA,GAAU,SAAA;AACR,QAAA;IAAA,CAAA,GAAI,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,IAAhB;IACJ,CAAA,GAAI,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,IAAhB;AACJ,WAAO,CAAC,CAAC,aAAF,CAAiB,CAAjB,EAAoB,KAAK,CAAC,GAA1B;EAHC;;qBAOV,QAAA,GAAU,SAAA;AACR,QAAA;IAAA,MAAA,GAAS,IAAC,CAAA,QAAD,CAAA;IACT,IAAA,GAAO,IAAC,CAAA,IAAD,CAAA;IACP,MAAA,GAAS,CAAA,GAAI,IAAI,CAAC,KAAT,GAAiB,IAAI,CAAC,SAAS,CAAC;AACzC,WAAW,IAAA,MAAA,CAAO,MAAP,CAAc,CAAC,SAAf,CAA0B,MAA1B;EAJH;;qBAQV,YAAA,GAAc,SAAA;AACZ,QAAA;IAAA,MAAA,GAAS,IAAC,CAAA,MAAD,CAAA;IAGT,GAAA,GAAM,CACA,IAAA,IAAA,CAAM,MAAN,CAAc,CAAC,OAAf,CAAwB,IAAC,CAAC,SAAF,CAAa,MAAb,CAAqB,CAAC,aAAtB,CAAA,CAAsC,CAAA,CAAA,CAAE,CAAC,IAAzC,CAA8C,MAA9C,CAAxB,CADA,EAEA,IAAA,IAAA,CAAM,MAAM,CAAC,EAAb,CAAiB,CAAC,OAAlB,CAA2B,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAe,MAAM,CAAC,EAAtB,CAA0B,CAAC,aAA3B,CAAA,CAA2C,CAAA,CAAA,CAAE,CAAC,IAA9C,CAAmD,MAAM,CAAC,EAA1D,CAA3B,CAFA,EAGA,IAAA,IAAA,CAAM,MAAM,CAAC,EAAb,CAAiB,CAAC,OAAlB,CAA2B,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAe,MAAM,CAAC,EAAtB,CAA0B,CAAC,aAA3B,CAAA,CAA2C,CAAA,CAAA,CAAE,CAAC,IAA9C,CAAmD,MAAM,CAAC,EAA1D,CAA3B,CAHA;AAMN,WAAO;MACL,MAAA,EAAQ,GAAI,CAAA,CAAA,CAAE,CAAC,aAAP,CAAsB,GAAI,CAAA,CAAA,CAA1B,EAA8B,KAAK,CAAC,GAApC,CADH;MAEL,SAAA,EAAW,GAFN;;EAVK;;qBAiBd,YAAA,GAAc,SAAA;AACZ,QAAA;IAAA,MAAA,GAAS,IAAC,CAAA,YAAD,CAAA;IACT,CAAA,GAAI,IAAC,CAAA,SAAD,CAAY,MAAM,CAAC,MAAnB;AACJ,WAAW,IAAA,MAAA,CAAQ,MAAM,CAAC,MAAf,CAAuB,CAAC,SAAxB,CAAmC,CAAnC;EAHC;;qBAMd,cAAA,GAAgB,SAAC,CAAD;AACd,QAAA;IAAA,KAAA,GAAQ,IAAC,CAAA,KAAD,CAAA;IACR,EAAA;;AAAO;WAAA,uCAAA;;qBAAA,CAAC,CAAC,SAAF,CAAY,CAAZ,CAAA,GAAiB;AAAjB;;;AACP,WAAO,EAAG,CAAA,CAAA,CAAH,KAAS,EAAG,CAAA,CAAA,CAAZ,IAAmB,EAAG,CAAA,CAAA,CAAH,KAAS,EAAG,CAAA,CAAA;EAHxB;;qBAUhB,aAAA,GAAe,SAAC,IAAD,EAAO,OAAP,EAAqB,IAArB;AACb,QAAA;;MADoB,UAAQ;;;MAAM,OAAK,KAAK,CAAC;;IAC7C,KAAA,GAAQ,IAAC,CAAA,KAAD,CAAA;IACR,GAAA,GAAM;AACN,SAAA,uCAAA;;MACE,CAAA,GAAI,CAAC,CAAC,aAAF,CAAiB,IAAjB;MACJ,IAAG,CAAA,IAAM,CAAC,CAAC,YAAF,CAAgB,CAAhB,EAAmB,IAAnB,CAAT;QACE,IAAG,CAAC,OAAJ;AAAiB,iBAAO,KAAxB;;QACA,GAAG,CAAC,IAAJ,CAAU,CAAV,EAFF;;AAFF;IAMO,IAAG,OAAH;aAAgB,IAAhB;KAAA,MAAA;aAAyB,MAAzB;;EATM;;qBAgBf,aAAA,GAAe,SAAC,IAAD,EAAO,OAAP,EAAqB,IAArB;AACb,QAAA;;MADoB,UAAQ;;;MAAM,OAAK,KAAK,CAAC;;IAC7C,GAAA,GAAM,IAAC,CAAA,aAAD,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B;IACN,GAAA,GAAM;AACN,SAAA,qCAAA;;MACE,IAAG,IAAI,CAAC,YAAL,CAAmB,CAAnB,CAAH;QACE,IAAG,CAAC,OAAJ;AAAiB,iBAAO,KAAxB;;QACA,GAAG,CAAC,IAAJ,CAAU,CAAV,EAFF;;AADF;IAKO,IAAG,OAAH;aAAgB,IAAhB;KAAA,MAAA;aAAyB,MAAzB;;EARM;;qBAef,cAAA,GAAgB,SAAC,KAAD,EAAQ,OAAR;;MAAQ,UAAQ;;AAC9B,WAAO,IAAI,CAAC,cAAL,CAAqB,IAArB,EAAwB,KAAxB,EAA+B,OAA/B;EADO;;qBAKhB,eAAA,GAAiB,SAAC,IAAD,EAAO,OAAP;AACf,QAAA;IAAA,EAAA,GAAK,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAc,IAAd;IACL,EAAA,GAAK,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAc,IAAd;IACL,GAAA,GAAM,IAAI,CAAC,SAAL,CAAA,CAAgB,CAAC,SAAjB,CAAA;IAEN,IAAA,GAAO,GAAG,CAAC,KAAJ,CAAU,EAAV;IACP,GAAA,GAAM,EAAE,CAAC,GAAH,CAAO,IAAP;IAGN,IAAI,GAAA,GAAM,CAAC,KAAK,CAAC,OAAb,IAAyB,GAAA,GAAM,KAAK,CAAC,OAAzC;AAAwD,aAAO,MAA/D;;IAEA,OAAA,GAAU,CAAA,GAAI;IAEd,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,IAAf;IACP,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,IAAT,CAAA,GAAiB;IACrB,IAAI,CAAA,GAAI,CAAJ,IAAS,CAAA,GAAI,CAAjB;AAAyB,aAAO,MAAhC;;IAEA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAY,EAAZ;IACP,CAAA,GAAI,GAAG,CAAC,GAAJ,CAAQ,IAAR,CAAA,GAAgB;IACpB,IAAI,CAAA,GAAI,CAAJ,IAAS,CAAA,GAAI,CAAjB;AAAyB,aAAO,MAAhC;;IAEA,CAAA,GAAI,EAAE,CAAC,GAAH,CAAQ,IAAR,CAAA,GAAiB;IACrB,IAAG,CAAA,GAAI,KAAK,CAAC,OAAb;MACS,IAAG,OAAH;eAAgB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAhB;OAAA,MAAA;eAA6B,KAA7B;OADT;KAAA,MAAA;AAGE,aAAO,MAHT;;EAtBe;;qBAgCjB,kBAAA,GAAoB,SAAC,IAAD,EAAO,OAAP;;MAAO,UAAQ;;AACjC,WAAO,IAAI,CAAC,cAAL,CAAqB,IAAC,CAAA,KAAD,CAAA,CAArB,EAA+B,OAA/B;EADW;;qBAQpB,eAAA,GAAiB,SAAC,MAAD,EAAS,OAAT;;MAAS,UAAQ;;AAChC,WAAO,MAAM,CAAC,cAAP,CAAuB,IAAC,CAAA,KAAD,CAAA,CAAvB,EAAiC,OAAjC;EADQ;;qBAQjB,iBAAA,GAAmB,SAAC,GAAD,EAAM,OAAN;;MAAM,UAAQ;;AAC/B,WAAO,GAAG,CAAC,cAAJ,CAAoB,IAAC,CAAA,KAAD,CAAA,CAApB,EAA8B,OAA9B;EADU;;qBAKnB,KAAA,GAAO,SAAA;WAAU,IAAA,QAAA,CAAS,IAAT,CAAW,CAAC,OAAZ,CAAqB,IAAC,CAAA,EAAtB,EAA0B,IAAC,CAAA,EAA3B;EAAV;;;;GAhUc;;AAoUvB,IAAI,CAAC,QAAL,GAAgB","file":"Triangle.js","sourceRoot":"/source/","sourcesContent":["\r\nclass Triangle extends Vector\r\n\r\n  # ## Create a new triangle\r\n  # @param Set the triangle's anchor point using 0 to 3 values. Can be comma-separated values, as an array, or as an object with `{x, y, z}` properties.\r\n  # @eg `new Triangle()` `new Triangle(1,2,3)` `new Triangle([2,4])` `new Triangle({x:3, y:6, z:9})`\r\n  # @return a new Triangle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## a vertice (corner point) of the triangle as Vector object\r\n    @p1 = new Vector( @x-1, @y-1, @z)\r\n\r\n    # ## another vertice (corner point) of the triangle as Vector object\r\n    @p2 = new Vector( @x+1, @y+1, @z)\r\n\r\n\r\n  # ## Connect triangle's anchor point with the other two points\r\n  # @param Parameters can be 2 objects or 2 arrays, or 4 or 6 numeric values to specify x, y, and optionally z positions\r\n  # @eg `tri.connect( p1, p2)` `tri.connect([1,2], [3,4]` `tri.connect(1,2,3,4)` `tri.connect(1,3,5,2,4,6)`\r\n  # @return this triangle\r\n  connect:( args ) ->\r\n\r\n    if arguments.length > 0\r\n\r\n      # by object or array\r\n      if typeof arguments[0] is 'object' and arguments.length == 2\r\n          @p1.set( arguments[0] )\r\n          @p2.set( arguments[1] )\r\n\r\n      # by 4 or 6 numeric values\r\n      else\r\n        if arguments.length < 6\r\n          @p1.set( [arguments[0], arguments[1]] )\r\n          @p2.set( [arguments[2], arguments[3]] )\r\n        else\r\n          @p1.set( [arguments[0], arguments[1], arguments[2]] )\r\n          @p2.set( [arguments[3], arguments[4], arguments[5]] )\r\n\r\n    return @\r\n\r\n\r\n  # ## Convert this triangle's points to an array of Vectors\r\n  # @return an array of 3 vectors\r\n  toArray: () -> [@, @p1, @p2 ]\r\n\r\n\r\n  # ## Get a text string that describes this triangle\r\n  toString:() -> \"Triangle (#{@x}, #{@y}, #{@z}), (#{@p1.x}, #{@p1.y}, #{@p1.z}), (#{@p2.x}, #{@p2.y}, #{@p2.z})\"\r\n\r\n\r\n  # ## Convert this Triangle to a `PointSet`\r\n  # @return a PointSet with 3 points.\r\n  toPointSet: () ->\r\n    p0 = new Vector(@)\r\n    return new PointSet( p0 ).connect( [p0, @p1, @p2 ] )\r\n\r\n\r\n  # ## Get an array of Lines that represents this triangle's 3 sides\r\n  # @return an array of 3 lines\r\n  sides: () ->\r\n    return [\r\n      new Line(@).connect(@p1)\r\n      new Line(@p1).connect(@p2)\r\n      new Line(@p2).connect(@)\r\n    ]\r\n\r\n\r\n  # ## Get the triangle's 3 angles\r\n  # @param `axis` optional axis id (eg, `Const.yz`) to specify a plane\r\n  # @return an array of 3 angles\r\n  angles: ( axis=Const.xy ) ->\r\n    angles = [\r\n      @p2.$subtract( @ ).angleBetween( @p1.$subtract( @ ), axis )\r\n      @$subtract( @p1 ).angleBetween( @p2.$subtract( @p1 ), axis )\r\n    ]\r\n    angles.push( Math.PI - angles[0] - angles[1] )\r\n    return angles\r\n\r\n\r\n  # ## Get the medial, which is an inner triangle formed by connecting the midpoints of this triangle's sides\r\n  # @return the medial triangle\r\n  medial: () ->\r\n    sides = @sides()\r\n    pts = ( side.midpoint() for side in sides )\r\n    return new Triangle( pts[0] ).connect( pts[1], pts[2] )\r\n\r\n\r\n  # ## Get this triangle's perimeter, which is the length of its 3 sides\r\n  # @return an object with 3 properties, where `.value` is the perimeter value, `.sides` is an array of 3 sides, `lengths` is an array of the 3 sides' lengths\r\n  perimeter: () ->\r\n    sides = @sides()\r\n    lens = [\r\n      sides[0].length()\r\n      sides[1].length()\r\n      sides[2].length()\r\n    ]\r\n    return {\r\n      sides: sides\r\n      value: lens[0] + lens[1] + lens[2]\r\n      lengths: lens\r\n    }\r\n\r\n\r\n  # ## Get this triangle's area using Heron's formula for calculating polygon area\r\n  # @return an object with 2 properties, where `.value` is the area value, and `.perimeter` is an object returned by `perimeter()` function\r\n  area: () ->\r\n    p = @perimeter()\r\n    hp = p.value / 2\r\n    return {\r\n      value: Math.sqrt( (hp * (hp-p.lengths[0]) * (hp-p.lengths[1]) * (hp-p.lengths[2]) ))\r\n      perimeter: p\r\n    }\r\n\r\n\r\n  # ## Given a point of the triangle, the opposite side is the side which the point doesn't touch\r\n  # @param specify a point by its id `\"p0\"` (the anchor point), `\"p1\"`, or `\"p2\"`\r\n  # @eg `tri.oppositeSide(\"p1\")`\r\n  # @return a Line which represents the opposite side\r\n  oppositeSide: ( id ) ->\r\n    if id==\"p1\"\r\n      return new Line(@).connect(@p2)\r\n    else if id == \"p2\"\r\n      return new Line(@).connect(@p1)\r\n    else\r\n      return new Line(@p1).connect(@p2)\r\n\r\n\r\n  # ## Given a point of the triangle, the adjacent sides are the two side which the point touches\r\n  # @param specify a point by its id `\"p0\"` (the anchor point), `\"p1\"`, or `\"p2\"`\r\n  # @eg `tri.adjacentSides(\"p1\")`\r\n  # @return an array of 2 Line which represents the adjacent sides\r\n  adjacentSides: (id) ->\r\n    if id==\"p1\"\r\n      return [new Line(@p1).connect(@), new Line(@p1).connect(@p2)]\r\n    else if id == \"p2\"\r\n      return [new Line(@p2).connect(@), new Line(@p2).connect(@p1)]\r\n    else\r\n      return [new Line(@).connect(@p1), new Line(@).connect(@p2)]\r\n\r\n\r\n  # ## Get a bisector, which is a path that splits a triangle's angle in half.\r\n  # @param the first paramter specifies a point by its id `\"p0\"`, `\"p1\"`, or `\"p2\"`. The second parameter determines if the path should be a simple vector from origin (`false`) or a line connected to the triangle's point (`true`). Optionally include a third parameter to set the length of the path.\r\n  # @eg `tri.bisector(\"p1\")`, `tri.bisector(\"p0\", true)`, `tri.bisector(\"p2\", false, 10)`\r\n  # @return either a Line or a Vector, based on the second parameter\r\n  bisector: (id, asLine=false, size=100) ->\r\n    ad = @adjacentSides(id)\r\n    p = new Vector(ad[0])\r\n    ad[0].moveTo(0,0)\r\n    ad[1].moveTo(0,0)\r\n    bp = ad[0].p1.bisect(ad[1].p1) # bisect vector from origin\r\n\r\n    return if asLine then new Line(p).connect( bp.multiply(size).add(p) ) else bp\r\n\r\n\r\n  # ## Get a triangle's altitude, which is a line from a triangle's point to its opposite side, and perpendicular to its opposite side.\r\n  # @param specify a point by its id `\"p0\"` (the anchor point), `\"p1\"`, or `\"p2\"`\r\n  # @eg `tri.altitude(\"p1\")` gets a line from p1 to the side formed by p0 and p2\r\n  # @return a Line representing an altitude\r\n  altitude: ( id ) ->\r\n    if id==\"p1\" or id==\"p2\"\r\n      return new Line(@[id]).connect( @oppositeSide(id).getPerpendicularFromPoint( @[id] ) )\r\n    else\r\n      return new Line(@).connect( @oppositeSide().getPerpendicularFromPoint( @ ) )\r\n\r\n\r\n  # ## Get a triangle's centroid, which is the averge positions of its three points.\r\n  # @return the centroid point as Vector\r\n  centroid : () ->\r\n    c0 = @$divide(3)\r\n    c1 = @p1.$divide(3)\r\n    c2 = @p2.$divide(3)\r\n    return new Vector(c0.x+c1.x+c2.x, c0.y+c1.y+c2.y, c0.z+c1.z+c2.z)\r\n\r\n\r\n  # ## Get orthocenter, which is the intersection point of a triangle's 3 altitudes (the 3 lines that are perpendicular to its 3 opposite sides).\r\n  # @return the orthocenter point as Vector\r\n  orthocenter: () ->\r\n    a = @altitude()\r\n    b = @altitude(\"p1\")\r\n    return a.intersectPath( b, Const.xyz )\r\n\r\n  # ## Get incenter, which is the center point of its inner circle, and also the intersection point of its 3 angle bisector lines (each of which cuts one of the 3 angles in half).\r\n  # @return the incenter point as Vector\r\n  incenter: () ->\r\n    a = @bisector(\"p0\", true)\r\n    b = @bisector(\"p1\", true)\r\n    return a.intersectPath( b, Const.xyz )\r\n\r\n  # ## Get an interior circle, which is the largest circle completed enclosed by this triangle\r\n  # @return a Circle\r\n  incircle: () ->\r\n    center = @incenter()\r\n    area = @area()\r\n    radius = 2 * area.value / area.perimeter.value\r\n    return new Circle(center).setRadius( radius )\r\n\r\n  # ## Get circumcenter, which is the intersection point of its 3 perpendicular bisectors lines ( each of which divides a side in half and is perpendicular to the side)\r\n  # @return the circumcenter point as Vector\r\n  circumcenter: () ->\r\n    medial = @medial()\r\n\r\n    # find perpendicular bisectors\r\n    pbs = [\r\n      new Line( medial ).connect( @.$subtract( medial ).perpendicular()[0].$add(medial) )\r\n      new Line( medial.p1 ).connect( @p1.$subtract( medial.p1 ).perpendicular()[0].$add(medial.p1) )\r\n      new Line( medial.p2 ).connect( @p2.$subtract( medial.p2 ).perpendicular()[0].$add(medial.p2) )\r\n    ]\r\n\r\n    return {\r\n      center: pbs[0].intersectPath( pbs[1], Const.xyz )\r\n      bisectors: pbs\r\n    }\r\n\r\n  # ## Get circumcircle, which is the smaller circle that encloses this triangle completely\r\n  # @return a Circle\r\n  circumcircle: () ->\r\n    center = @circumcenter()\r\n    r = @magnitude( center.center )\r\n    return new Circle( center.center ).setRadius( r )\r\n\r\n\r\n  intersectPoint: (p) ->\r\n    sides = @sides()\r\n    hp = ( s.collinear(p) > 0 for s in sides ) # check left or right sides of the half plane\r\n    return hp[0] == hp[1] and hp[1] == hp[2]\r\n\r\n\r\n  # ## Check intersections between this Triangle and an infinite Line on xy axis.\r\n  # @param `path` a Pair or Line object to specify an infinite line\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectPath: (path, get_pts=true, axis=Const.xy) ->\r\n    sides = @sides()\r\n    pts = []\r\n    for s in sides\r\n      p = s.intersectPath( path )\r\n      if p and s.withinBounds( p, axis )\r\n        if !get_pts then return true\r\n        pts.push( p )\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check intersections between this Triangle and a Line segment on xy axis.\r\n  # @param `line` a Line to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero, one, or two points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLine: (line, get_pts=true, axis=Const.xy) ->\r\n    ins = @intersectPath( line, true, axis )\r\n    pts = []\r\n    for p in ins\r\n      if line.withinBounds( p )\r\n        if !get_pts then return true\r\n        pts.push( p )\r\n\r\n    return if get_pts then pts else false\r\n\r\n\r\n  # ## Check if this Triangle intersects with a set of Lines on xy axis\r\n  # @param `lines` an array of Line\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points, or a boolean value. (Based on `get_pts` parameter)\r\n  intersectLines: (lines, get_pts=true) ->\r\n    return Line.intersectLines( @, lines, get_pts )\r\n\r\n\r\n  # ## Moller-Trumbore algorithm for 3D ray triangle intersection\r\n  intersectPath3D: (path, get_pts) ->\r\n    e1 = @p1.$subtract(@)\r\n    e2 = @p2.$subtract(@)\r\n    dir = path.direction().normalize()\r\n\r\n    pvec = dir.cross(e2)\r\n    det = e1.dot(pvec)\r\n\r\n    # 3D only, in 2D the det is always 0\r\n    if (det > -Const.epsilon and det < Const.epsilon ) then return false\r\n\r\n    inv_det = 1 / det\r\n\r\n    tvec = path.$subtract(@)\r\n    u = tvec.dot(pvec) * inv_det\r\n    if (u < 0 or u > 1) then return false\r\n\r\n    qvec = tvec.cross( e1 )\r\n    v = dir.dot(qvec) * inv_det\r\n    if (v < 0 or v > 1) then return false\r\n\r\n    t = e2.dot( qvec ) * inv_det\r\n    if t > Const.epsilon\r\n      return if get_pts then [u,v,t] else true\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Check if this Triangle intersects with a Rectangle\r\n  # @param `rect` a Rectangle to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectRectangle: (rect, get_pts=true) ->\r\n    return rect.intersectLines( @sides(), get_pts )\r\n\r\n\r\n  # ## Check if this Triangle intersects with another Circle\r\n  # @param `circle` a Circle to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectCircle: (circle, get_pts=true) ->\r\n    return circle.intersectLines( @sides(), get_pts )\r\n\r\n\r\n  # ## Check if this Triangle intersects with another Triangle\r\n  # @param `tri` a Triangle to check\r\n  # @param `get_pts` a boolean value to specify whether the results should include the intersection points. If `false`, then only the intersection state (true or false) will be returned.\r\n  # @returns an Array of intersection points (zero or two or four points), or a boolean value. (Based on `get_pts` parameter)\r\n  intersectTriangle: (tri, get_pts=true) ->\r\n    return tri.intersectLines( @sides(), get_pts )\r\n\r\n\r\n  # overrides clone\r\n  clone: () -> new Triangle(@).connect( @p1, @p2 )\r\n\r\n\r\n# namespace\r\nthis.Triangle = Triangle\r\n\r\n"]}