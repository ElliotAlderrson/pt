{"version":3,"sources":["Curve.coffee"],"names":[],"mappings":"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","file":"Curve.js","sourceRoot":"/source/","sourcesContent":["# ### Curves and splines\r\nclass Curve extends PointSet\r\n\r\n  # ## Create a new Curve. A Curve uses a set of anchor and/or control points to interpolate a curve.\r\n  # @param `args` Similar to PointSet constructor, use comma-separated values, an array, or an object as parameters to specify the anchor point. Use `connect()` to add points to the set.\r\n  # @eg `new PointSet()` `new PointSet(1,2,3)` `new PointSet([2,4])` `new PointSet({x:3, y:6, z:9}).connect(1,2,3)` `new PointSet(1,2,3).connect([p1, p2, p3, p4, p5])`\r\n  # @return a new Curve object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## a boolean value to specify if this Curve is 2D or 3D. Default is `false` (2D).\r\n    @is3D = false\r\n\r\n\r\n  # A private function to pre-calculate the interpolation steps\r\n  _getSteps: (steps) ->\r\n    ts = []\r\n    for s in [0..steps] by 1\r\n      t = s/steps\r\n      ts.push( [t, t*t, t*t*t] )\r\n    return ts\r\n\r\n\r\n  # ## Given an index for the starting position in `points` array, get the control and/or end points of a curve segment\r\n  # @param `index` start index in `points` array. Default is 0.\r\n  # @param `copyStart` an optional boolean value to indicate if the start index should be used twice. Default is false.\r\n  # @return an object with 4 points `{p0, p1, p2, p3}`\r\n  controlPoints: ( index=0, copyStart=false ) ->\r\n\r\n    _index = (i) =>\r\n      idx = if i < @points.length-1 then i else @points.length-1\r\n      return idx\r\n\r\n    # Get points based on index\r\n    p0 = @points[index] # control pt 1\r\n    if !p0.x? then return false\r\n\r\n    index = if copyStart then index else index+1\r\n\r\n    p1 = @points[ _index(index++) ] # t = 0\r\n    p2 = @points[ _index(index++) ] # t = 1\r\n    p3 = @points[ _index(index++) ] # control pt 2\r\n\r\n    return {\r\n      p0: p0\r\n      p1: p1\r\n      p2: p2\r\n      p3: p3\r\n    }\r\n\r\n\r\n  # ## Create a Catmull-Rom curve. Catmull-Rom is a kind of Cardinal curve with smooth-looking curve.\r\n  # @param `step` the number of line segments. Defaults to 10 steps.\r\n  # @return an array of Points\r\n  catmullRom: ( steps=10 ) ->\r\n\r\n    if @points.length < 2 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # use first point twice\r\n    c = @controlPoints( 0, true )\r\n    for i in [0..steps] by 1\r\n      ps.push( @catmullRomPoint( ts[i], c ) )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k < @points.length-2\r\n      c = @controlPoints( k )\r\n      if c\r\n        for i in [0..steps] by 1\r\n          ps.push( @catmullRomPoint( ts[i], c ) )\r\n        k++\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on Catmull-Rom curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @return a Point on the curve\r\n  catmullRomPoint: ( step, ctrls ) ->\r\n    # Basis Matrix (http://mrl.nyu.edu/~perlin/courses/fall2002/hw/12.html)\r\n    # {-0.5,  1.5, -1.5, 0.5}\r\n    # { 1  , -2.5,  2  ,-0.5},\r\n    # {-0.5,  0  ,  0.5, 0  },\r\n    # { 0  ,  1  ,  0  , 0  }\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = ( -0.5*t3 + t2 - 0.5*t )\r\n    h2 = ( 1.5*t3 - 2.5*t2 + 1 )\r\n    h3 = ( -1.5*t3 + 2*t2 + 0.5*t )\r\n    h4 = ( 0.5*t3 - 0.5*t2 )\r\n\r\n    x = ( h1*ctrls.p0.x + h2* ctrls.p1.x + h3*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2* ctrls.p1.y + h3*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h3*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Create a Cardinal spline curve\r\n  # @param `step` the number of line segments. Defaults to 10 steps.\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Default to 0.5 which is the tension for Catmull-Rom curve\r\n  # @return an array of Points\r\n  cardinal: ( steps=10, tension=0.5 ) ->\r\n\r\n    if @points.length < 2 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # use first point twice\r\n    c = @controlPoints( 0, true )\r\n    for i in [0..steps] by 1\r\n      ps.push( @cardinalPoint( ts[i], c, tension ) )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k < @points.length-2\r\n      c = @controlPoints( k )\r\n      if c\r\n        for i in [0..steps] by 1\r\n          ps.push( @cardinalPoint( ts[i], c, tension ) )\r\n        k++\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on Cardinal curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Default to 0.5 which is the tension for Catmull-Rom curve\r\n  # @return a Point on the curve\r\n  cardinalPoint: ( step, ctrls, tension=0.5 ) ->\r\n\r\n    # Basis Matrix (http://algorithmist.wordpress.com/2009/10/06/cardinal-splines-part-4/)\r\n    # [ -s  2-s  s-2   s ]\r\n    # [ 2s  s-3  3-2s -s ]\r\n    # [ -s   0    s    0 ]\r\n    # [  0   1    0    0 ]\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = tension * ( -1*t3 + 2*t2 - t )\r\n    h2 = tension * ( -1*t3 + t2 )\r\n    h2a = (2*t3 - 3*t2 + 1)\r\n    h3 = tension * ( t3 - 2*t2 + t )\r\n    h3a = (-2*t3 + 3*t2)\r\n    h4 = tension * ( t3 - t2 )\r\n\r\n    x = ctrls.p0.x*h1 + ctrls.p1.x*h2 + h2a*ctrls.p1.x + ctrls.p2.x*h3 + h3a*ctrls.p2.x + ctrls.p3.x*h4\r\n    y = ctrls.p0.y*h1 + ctrls.p1.y*h2 + h2a*ctrls.p1.y + ctrls.p2.y*h3 + h3a*ctrls.p2.y + ctrls.p3.y*h4\r\n    z = if !@is3D then 0 else ctrls.p0.z*h1 + ctrls.p1.z*h2 + h2a*ctrls.p1.z + ctrls.p2.z*h3 + h3a*ctrls.p2.z + ctrls.p3.z*h4\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Create a Bezier curve. In a cubic bezier curve, the first and 4th points are end points, and 2nd and 3rd points are control points.\r\n  # @param `step` the number of line segments. Defaults to 10 steps\r\n  # @return an array of Points\r\n  bezier: ( steps=10 ) ->\r\n\r\n    if @points.length < 4 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k <= @points.length-3\r\n      c = @controlPoints( k )\r\n      if c\r\n        for i in [0..steps] by 1\r\n          ps.push( @bezierPoint( ts[i], c ) )\r\n        # go to the next set of point, but assume current end pt is next start pt\r\n        k+=3\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on a cubic Bezier curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control and end points which can be provided by `controlPoints()` function. The first and 4th points are end points, and 2nd and 3rd points are control points.\r\n  # @return a Point on the curve\r\n  bezierPoint: (step, ctrls) ->\r\n    # Bezier basis matrix\r\n    # { -1,  3, -3,  1 }\r\n    # {  3, -6,  3,  0 }\r\n    # { -3,  3,  0,  0 }\r\n    # {  1,  0,  0,  0 }\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = ( -1*t3 + 3*t2 - 3*t + 1 )\r\n    h2 = ( 3*t3 - 6*t2 + 3*t )\r\n    h3 = ( -3*t3 + 3*t2 )\r\n    h4 = t3\r\n\r\n    x = ( h1*ctrls.p0.x + h2* ctrls.p1.x + h3*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2* ctrls.p1.y + h3*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h3*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Create a B-Spline cuve\r\n  # @param `step` the number of line segments. Defaults to 10 steps.\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Or `false` to have normal tension. Default is false.\r\n  # @return an array of Points\r\n  bspline: ( steps=10, tension=false ) ->\r\n\r\n    if @points.length < 2 then return []\r\n\r\n    ps = []\r\n    ts = @_getSteps( steps )\r\n\r\n    # go through all the points\r\n    k = 0\r\n    while k < @points.length-2\r\n      c = @controlPoints( k )\r\n      if c\r\n        if !tension\r\n          for i in [0..steps] by 1\r\n            ps.push( @bsplinePoint( ts[i], c ) )\r\n        else\r\n          for i in [0..steps] by 1\r\n            ps.push( @bsplineTensionPoint( ts[i], c, tension ) )\r\n        k++\r\n\r\n    return ps\r\n\r\n\r\n  # ## Interpolate to get a point on B-Spline curve\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @return a Point on the curve\r\n  bsplinePoint: (step, ctrls) ->\r\n    # Basis matrix:\r\n    # { -1.0/6.0,  3.0/6.0, -3.0/6.0, 1.0/6.0 },\r\n    # {  3.0/6.0, -6.0/6.0,  3.0/6.0,    0.0 },\r\n    # { -3.0/6.0,      0.0,  3.0/6.0,    0.0 },\r\n    # {  1.0/6.0,  4.0/6.0,  1.0/6.0,    0.0 }\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = ( -0.16666666666*t3 + 0.5*t2 - 0.5*t + 0.16666666666 )\r\n    h2 = ( 0.5*t3 - t2 + 0.66666666666 )\r\n    h3 = ( -0.5*t3 + 0.5*t2 + 0.5*t + 0.16666666666 )\r\n    h4 = (0.16666666666*t3)\r\n\r\n    x = ( h1*ctrls.p0.x + h2* ctrls.p1.x + h3*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2* ctrls.p1.y + h3*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h3*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n  # ## Interpolate to get a point on B-Spline curve with tension (Duff)\r\n  # @param `step` the point to interpolate, as an array of `[t, t*t, t*t*t]` where `t` is between 0 to 1\r\n  # @param `ctrls` the control points which can be provided by `controlPoints()` function\r\n  # @param `tension` optional value between 0 to 1 to specify a \"tension\". Default to 1 which is the normal tension.\r\n  # @return a Point on the curve\r\n  bsplineTensionPoint: (step, ctrls, tension=1) ->\r\n    # Basis matrix:\r\n    # [ -1/6a, 2 - 1.5a, 1.5a - 2, 1/6a ]\r\n    # [ 0.5a,  2a-3,     3-2.5a    0 ]\r\n    # [ -0.5a, 0,        0.5a,     0 ]\r\n    # [ 1/6a,  1 - 1/3a, 1/6a,     0 ]\r\n\r\n    t = step[0]\r\n    t2 = step[1]\r\n    t3 = step[2]\r\n\r\n    h1 = tension * ( -0.16666666666*t3 + 0.5*t2 - 0.5*t + 0.16666666666 )\r\n    h2 = tension * ( -1.5*t3 + 2*t2 - 0.33333333333 )\r\n    h2a = (2*t3 - 3*t2 + 1)\r\n    h3 = tension * ( 1.5*t3 - 2.5*t2 + 0.5*t + 0.16666666666 )\r\n    h3a = (-2*t3 + 3*t2)\r\n    h4 = tension * (0.16666666666*t3)\r\n\r\n    x = ( h1*ctrls.p0.x + h2*ctrls.p1.x + h2a*ctrls.p1.x + h3*ctrls.p2.x + h3a*ctrls.p2.x + h4*ctrls.p3.x  )\r\n    y = ( h1*ctrls.p0.y + h2*ctrls.p1.y + h2a*ctrls.p1.y + h3*ctrls.p2.y + h3a*ctrls.p2.y + h4*ctrls.p3.y  )\r\n    z = if !@is3D then 0 else ( h1*ctrls.p0.z + h2* ctrls.p1.z + h2a*ctrls.p1.y + h3*ctrls.p2.z + h3a*ctrls.p2.z + h4*ctrls.p3.z )\r\n\r\n    return new Point(x,y,z)\r\n\r\n\r\n# namespace\r\nthis.Curve = Curve"]}