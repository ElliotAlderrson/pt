{"version":3,"sources":["Particle.coffee"],"names":[],"mappings":"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","file":"Particle.js","sourceRoot":"/source/","sourcesContent":["# ### A particle with physics\r\nclass Particle extends Circle\r\n\r\n  # derivative of momentum is force (F=dp/dt)\r\n  # derivative of position is velocity (v=dx/dt)\r\n  # derivative of velocity is acceleration (a=dv/dt)\r\n  # Force = mass * acceleration (F=ma)\r\n  # Momentum = mass * velocity (p=mv)\r\n\r\n  # ## Create a new Particle. Like a Circle, specify its center position with a `radius` property to define its radius.\r\n  # @param `args` Similar to Point constructor, use comma-separated values, an array, or a Point object as parameters to specify the center of circle. Optionally include a 4th parameter to set the radius directly, or use `setRadius()` afterwards.\r\n  # @eg `new Particle()` `new Particle(1,2,3)` `new Particle(1,2,3,100)`\r\n  # @return a new Circle object\r\n  constructor: () ->\r\n    super\r\n\r\n    # ## A property to store this particle's id\r\n    @id = 0\r\n\r\n    # ## A property to track this particle's states. An object with properties `.age` and `.maxAge` and a boolean proeprty `.active`\r\n    @life = {age: 0, maxAge: 0, active: true, complete: false}\r\n\r\n    # ## A property to track this particle's momentum as a Vector\r\n    @momentum = new Vector()\r\n\r\n    # ## A property to track this particle's velocity as a Vector\r\n    @velocity = new Vector()\r\n\r\n    # ## A property to specify this particle's mass value. Default is 2.\r\n    @mass = 2\r\n\r\n    # ## A property to specify this particle's friction. Defaulti is 0.\r\n    @friction = 0\r\n\r\n    # A property to specify how many frames per milliseconds, for timeStep integration. Default is 20 ms (1000/48 (48 fps) = ~20ms).\r\n    @frame_ms = 20\r\n\r\n\r\n  # ## Play the particle for one time-step.\r\n  # @param `time` current time in milliseconds\r\n  # @param `timeDiff` time difference between last and current step, ie, the time of a frame.\r\n  play: ( time, timeDiff ) ->\r\n    t = 0\r\n    while timeDiff > 0\r\n      dt = Math.min( timeDiff, @frame_ms )\r\n      @integrate(t/1000, dt/1000 ); # unit is seconds\r\n      timeDiff -= dt\r\n      t += dt\r\n      @life.age++\r\n\r\n\r\n\r\n  # ## Integrate function using Runge-Kutta-4. Override this function to specify other integrator, such as Euler or Verlet.\r\n  # @param `t` current time in *seconds*\r\n  # @param `dt` time difference between last and current step, in *seconds*\r\n  integrate: (t, dt) ->\r\n    @integrateRK4(t, dt)\r\n\r\n\r\n  # ## Calculate all forces acting on this particle. This is called by integrate function. Override this function to implement specific force calculations.\r\n  # @param `state` a object with `position` and `momentum` Vectors\r\n  # @param `t` curent time in seconds\r\n  # @eg `p.forces( {position: new Vector(), momentum: new Vector()}, t+dt )`\r\n  # @return an object with `force` property\r\n  forces: (state, t) ->\r\n    return {force: new Vector()}\r\n\r\n  # ## Apply an impulse to this particle's `momentum` and `velocity` properties\r\n  # @param `force_dt` a force Vector\r\n  impulse: ( force_dt ) ->\r\n    @momentum.add( force_dt )\r\n    @velocity = @momentum.$divide( @mass )\r\n\r\n\r\n  # For RK4 integration: update position, momentum and velocity. calculate force.\r\n  _evaluate : (t, dt=0, derivative=false) ->\r\n\r\n    # integrate at time dt\r\n    if dt != 0 and derivative\r\n\r\n      state = {\r\n        position: @$add( derivative.velocity.$multiply( dt ) )\r\n        momentum: @momentum.$add( derivative.force.$multiply( dt ) )\r\n      }\r\n\r\n    else\r\n      state = { position: new Vector(@), momentum: new Vector(@momentum) }\r\n\r\n    # recalculate velocity\r\n    state.velocity = state.momentum.$divide( @mass )\r\n\r\n    # calculate force\r\n    f = @forces( state, t+dt )\r\n\r\n    return { velocity: state.velocity, force: f.force }\r\n\r\n\r\n  # ## Runge-Kutta-4 integration\r\n  # @param `t` current time in *seconds*\r\n  # @param `dt` time difference between last and current step, in *seconds*\r\n  integrateRK4: (t, dt) ->\r\n\r\n    # rk4 calculations (adapted based on the algorithm on gafferongames.com)\r\n    _map = (m1, m2, m3, m4) ->\r\n      v = new Vector(\r\n        (m1.x + 2*(m2.x+m3.x) + m4.x) / 6\r\n        (m1.y + 2*(m2.y+m3.y) + m4.y) / 6\r\n        (m1.z + 2*(m2.z+m3.z) + m4.z) / 6\r\n      )\r\n\r\n      return v\r\n\r\n    a = @_evaluate(t, 0)\r\n    b = @_evaluate(t, dt*0.5, a)\r\n    c = @_evaluate(t, dt*0.5, b)\r\n    d = @_evaluate(t, dt, c)\r\n\r\n    @add( _map( a.velocity, b.velocity, c.velocity, d.velocity ) )\r\n    @momentum.add( _map( a.force, b.force, c.force, d.force ) )\r\n\r\n\r\n  # ## Simple Euler integration using momentum\r\n  # @param `t` current time in *seconds*\r\n  # @param `dt` time difference between last and current step, in *seconds*\r\n  integrateEuler: (t, dt) ->\r\n\r\n    f = @forces( { position: new Vector(@), momentum: new Vector(@momentum) }, t+dt )\r\n    @add( @velocity )\r\n    @momentum.add( f.force )\r\n    @velocity = @momentum.$divide( @mass )\r\n\r\n\r\n  # ## check Collision with a line segment (wall), and calculate the resulting velocity and momentum\r\n  # @param `wall` a Line object to check collision against\r\n  # @param `precise` a boolean value to specify a precise collision calculation. If `true`, then the particle position will be recalculated to match the exact collision position with the line. Default is true.\r\n  # @return a boolean value to indicate if collision occurs\r\n  collideLine2d: ( wall, precise=true ) ->\r\n\r\n    # this can be optimized by calculating the normalized velocity and wall vectors (used in various Line functions)\r\n\r\n    curr_pos = new Vector(@)\r\n    curr_dist = Math.abs( wall.getDistanceFromPoint( curr_pos ) )\r\n    collided = Math.abs(curr_dist) < @radius\r\n\r\n    # if precision is on, find the next position and check if the next position completely crossed the wall (when speed is very fast)\r\n    if precise\r\n      next_pos = @$add( @velocity )\r\n      next_dist = Math.abs( wall.getDistanceFromPoint( next_pos ) )\r\n      crossed = wall.intersectLine( new Line( curr_pos ).connect( next_pos ) )\r\n\r\n      if crossed\r\n        next_pos = crossed.$add( @velocity.$normalize().$multiply(-@radius/2) )\r\n        next_dist = Math.abs( wall.getDistanceFromPoint( next_pos ) )\r\n        collided = true\r\n\r\n    if collided\r\n\r\n      pt_on_wall = wall.getPerpendicularFromPoint( curr_pos ) # normal point on wall\r\n      wall_path = wall.$subtract( wall.p1 )\r\n\r\n      collideEndPt = false\r\n\r\n      # intersecting with wall segment\r\n      if !wall.withinBounds( pt_on_wall, Const.xy )\r\n\r\n        # check if colliding with end pt\r\n        if @intersectPoint( wall )\r\n          collideEndPt = true\r\n          end_path = @$subtract( wall )\r\n\r\n        if @intersectPoint( wall.p1 )\r\n          collideEndPt = true\r\n          end_path = @$subtract( wall.p1 )\r\n\r\n        if collideEndPt\r\n          wall_path = new Vector( -end_path.y, end_path.x ) # treating it like colliding with zero-radius point\r\n\r\n        else\r\n          return false\r\n\r\n      # find project and resulting velocity\r\n      dot = wall_path.dot( @velocity )\r\n      proj = wall_path.$multiply( (dot / wall_path.dot( wall_path )) )\r\n      tangent = proj.$subtract( @velocity )\r\n\r\n      @velocity = proj.$add(tangent)\r\n      @momentum = @velocity.$multiply( @mass )\r\n\r\n\r\n      # Recalculate last position before collision if precision needed\r\n      if precise and !collideEndPt\r\n\r\n        # normal on wall to curr_pos\r\n        perpend = new Line( pt_on_wall ).connect( curr_pos )\r\n\r\n        # line segment of two points on wall\r\n        prev_pt_on_wall = wall.getPerpendicularFromPoint( next_pos )\r\n        path = new Line( pt_on_wall ).connect( prev_pt_on_wall )\r\n        pvec = path.direction()\r\n\r\n        # interpolate the point where the collision occurs\r\n        r = (@radius-curr_dist) / (next_dist-curr_dist)\r\n        pt = pvec.$multiply( r ).$add( path )\r\n        pt2 = pt.$add( perpend.direction().$normalize().$multiply( @radius ) )\r\n\r\n        # set new position\r\n        @set( pt2.$add( @velocity.$normalize() ) )\r\n\r\n    return collided\r\n\r\n\r\n  # ## Check if a particle hits the boundaries within a box, and calculate the resulting velocity and momentum. Precise collision positioning are not implemented.\r\n  # @param `bound` a Rectangle object to specify a bounding box`\r\n  # @return a boolean value to indicate if collision occurs\r\n  collideWithinBounds: ( bound ) ->\r\n\r\n    if @x - @radius < bound.x or @x + @radius > bound.p1.x\r\n\r\n      if @x - @radius < bound.x # fast but not totally accurate. Would be better to check the trajectory like in collideLine2D.\r\n        @x = bound.x + @radius;\r\n      else if @x + @radius > bound.p1.x\r\n        @x = bound.p1.x - @radius;\r\n\r\n      @velocity.x *= -1\r\n      @momentum = @velocity.$multiply( @mass )\r\n      return true\r\n\r\n    else if @y - @radius < bound.y or @y + @radius > bound.p1.y\r\n      if @y - @radius < bound.y\r\n        @y = bound.y + @radius;\r\n      else if @y + @radius > bound.p1.y\r\n        @y = bound.p1.y - @radius;\r\n\r\n      @velocity.y *= -1\r\n      @momentum = @velocity.$multiply( @mass )\r\n      return true\r\n\r\n    return false\r\n\r\n\r\n  # ## Check 2D collision with another particle, and calculate the resulting velocity and momentum. Precise collision positioning are not implemented.\r\n  # @param `pb` another Particle\r\n  # @return an array of 2 Vectors, representing this and the other particle's resulting velocity. Or `false` if collision doesn't occur.\r\n  collideParticle2d: ( pb ) ->\r\n\r\n    if @hasIntersect( pb )\r\n      return Particle.collideParticle2d( @, pb, true )\r\n\r\n    else\r\n      return false\r\n\r\n\r\n  # ## Static function to calculate velocity and momentum after 2D collision, without precise coliision positioning. Remember to check intersection/collision before calling this.\r\n  # @param `pa, pb` two Particles\r\n  # @param `update` a boolean value to update the velocity and momentum of the two particle directly if set to `true`. Default is true.\r\n  # @return an array of 2 Vectors, representing this and the other particle's resulting velocity.\r\n  @collideParticle2d: (pa, pb, update=true, checkOverlap=true) ->\r\n\r\n    # normal and tangent vector of 2 particles on contact\r\n    normal = pa.$subtract(pb).normalize()\r\n    tangent = new Vector( -normal.y, normal.x )\r\n\r\n    # dot products\r\n    dot1n = normal.dot( pa.velocity )\r\n    dot1t = tangent.dot( pa.velocity )\r\n    dot2n = normal.dot( pb.velocity )\r\n    dot2t = tangent.dot( pb.velocity )\r\n\r\n    # final velocity (one dimension)\r\n    d1 = ( dot1n * (pa.mass - pb.mass) + 2 * pb.mass * dot2n ) / (pa.mass + pb.mass)\r\n    d2 = ( dot2n * (pb.mass - pa.mass) + 2 * pa.mass * dot1n ) / (pa.mass + pb.mass)\r\n\r\n    # final veloctiy (vector)\r\n    v1n = normal.$multiply( d1 )\r\n    v1t = tangent.$multiply( dot1t )\r\n    v2n = normal.$multiply( d2 )\r\n    v2t = tangent.$multiply( dot2t )\r\n\r\n    pav = v1n.$add( v1t )\r\n    pbv = v2n.$add( v2t )\r\n\r\n    # check if two particles are overlapping, if so, push them apart\r\n    if checkOverlap\r\n      mag = pa.magnitude( pb );\r\n      if mag < pa.radius + pb.radius\r\n        dir= pa.$subtract( pb ).normalize()\r\n        magDiff = Math.abs(mag - pa.radius - pb.radius) / 1.98;\r\n        pa.add( dir.multiply( magDiff ) );\r\n        pb.add( dir.multiply( -magDiff ) );\r\n\r\n    if update\r\n      pa.velocity = pav\r\n      pb.velocity = pbv\r\n\r\n      pa.momentum = pa.velocity.$multiply( pa.mass )\r\n      pb.momentum = pb.velocity.$multiply( pb.mass )\r\n\r\n    return [pav, pbv]\r\n\r\n\r\n  # ## Static function to calculate gravitational forces between 2 particles. This can be used as an implementation of `forces()` function\r\n  # @param `state` a object with `position` and `momentum` Vectors\r\n  # @param `t` curent time in seconds\r\n  # @param `pa, pb` two Particles\r\n  # @param `g` optional gravitational constant. Defaults to 0.0067.\r\n  # @return an object with `force` property\r\n  @force_gravitation: (state, t, pa, pb, g=0.0067) ->\r\n    meterToPixel = 30\r\n\r\n    d = pb.$subtract( state.position )\r\n    mag = d.magnitude() / meterToPixel\r\n    force = if mag == 0 then 0 else t * g * pa.mass * pb.mass / (mag*mag)\r\n    d.normalize().multiply( force )\r\n\r\n    return {force: d}\r\n\r\n\r\n  # ## Static function of Runge-Kutta-4 integrator (adopted from gafferongames.com)\r\n  # @param `c, d` the derivative of c is d. If c is position, then d is velocity.\r\n  # @param `func` acceleration function(c, d, dt, t)\r\n  # @param `dt` change in time\r\n  # @param `t` current time\r\n  # @return an object with `{c, d}` properties where the derivative of c is d.\r\n  @RK4: (c, d, func, dt, t) ->\r\n\r\n    c1 = c\r\n    d1= d\r\n    a1 = func(c1, d1, 0, t)\r\n\r\n    c2 = c + 0.5*d1*dt\r\n    d2 = d + 0.5*a1*dt\r\n    a2 = func(c2, d2, dt/2, t)\r\n\r\n    c3 = c + 0.5*d2*dt\r\n    d3 = d + 0.5*a2*dt\r\n    a3 = func(c3, d3, dt/2, t)\r\n\r\n    c4 = c + d3*dt\r\n    d4 = d + a3*dt\r\n\r\n    dc = (c1 + 2*(c2+c3) + c4) / 6\r\n    dd = (d1 + 2*(d2+d3) + d4) / 6\r\n\r\n    return { c: c + dc*dt, d: d + dd*dt }\r\n\r\n# namespace\r\nthis.Particle = Particle"]}